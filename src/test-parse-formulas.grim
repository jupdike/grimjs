(a/b, c)

(1/Sqrt(x), Equal(c, 1))

make_entry(ID("8c9ba1"),
    Formula(Equal(CarlsonRC(x, c*x), Cases(
        Tuple(Atan(Sqrt(c-1)) / Sqrt((c-1)*x), Greater(c, 1)),
        Tuple(1/Sqrt(x), Equal(c, 1)),
        Tuple(Atanh(Sqrt(1-c)) / Sqrt((1-c)*x), Less(c, 1))))),
    Variables(x, c),
    Assumptions(And(Element(x, CC), Element(c, OpenInterval(0, Infinity)))))

[Div(1,2), Div(1,2), 1]

[f(x), b]

[CarlsonRJ(0, y, z, w), b]

Formula(Equal(CarlsonRJ(0, y, z, w), (3 * Pi / 4) * CarlsonHypergeometricR(-Div(3,2), [Div(1,2), Div(1,2), 1], [y, z, w])))

make_entry(ID("5a8f57"),
    Formula(Equal(CarlsonRJ(0, y, z, w), (3 * Pi / 4) * CarlsonHypergeometricR(-Div(3,2), [Div(1,2), Div(1,2), 1], [y, z, w]))),
    Variables(y, z, w),
    Assumptions(And(
        Element(y, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(w, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

Equal(CarlsonRJ(0, y, z, w), (3 * Pi / 4) * CarlsonHypergeometricR(-Div(3,2)))

List(CarlsonRJ(0, y, z, w), b)

List(CarlsonRJ(0, y, z, w), b)

Formula(Equal(CarlsonRJ(0, y, z, w), (3 * Pi / 4) * CarlsonHypergeometricR(-Div(3,2))))

CarlsonHypergeometricR(-Div(3,2))

f(
    x
)

f(
    x,
)

def_Topic(Title("Arithmetic-geometric mean"), Section("Definitions"), Entries("b0d256", "eda1e3", ) )

def_Topic(
    Title("Arithmetic-geometric mean"),
    Section("Definitions"),
    Entries(
        "b0d256",
        "eda1e3",
    )
)

def_Topic(
    Title("Arithmetic-geometric mean"),
    Section("Definitions"),
    Entries(
        "b0d256",
        "eda1e3",
    ),
    Section("Illustrations"),
    Entries(
        "00d5df",
        "c941c4",
    ),
    Section("Single parameter"),
    Entries(
        "21f412",
    ),
    Section("Domain"),
    Entries(
        "32b3b4",
        "c38209",
        "f9caac",
        "098757",
    ),
    Section("Specific values"),
    Entries(
        "08329d",
        "8f176c",
        "3e1398",
        "b41bdd",
        "0d9352",
        "e3896e",
        "361801",
        "f9190b",
        "69d0a3",
        "5174ea",
        "7b362f",
        "eb0661",
        "3da9b7",
        "f178f2",
        "447541",
    ),
    Section("AGM iteration"),
    Subsection("Recurrence and limit"),
    Entries(
        "95fb3e",
        "84b888",
        "08b69d",
        "41f67b",
    ),
    Subsection("Correct square root for complex variables"),
    Entries(
        "a2b0f9",
    ),
    Section("Brent-Salamin algorithm for pi"),
    Entries(
        "6d9ceb",
        "13c539",
        "042551",
    ),
    Section("Functional equations"),
    Entries(
        "59fab1",
        "c0dea0",
        "7189d6",
        "ce2395",
        "ea1d58",
        "d60119",
        "c7f885",
        "fa6ff7",
        "8e80c6",
        "46c021",
        "9d84d8",
    ),
    Section("Representation by other functions"),
    Entries(
        "d6d836",
        "71a0ff",
    ),
    Section("Representation of other functions"),
    Entries(
        "e15f43",
        "26fd1b",
    ),
    Section("Derivatives and differential equations"),
    Entries(
        "20828c",
        "a4cc5a",
    ),
    Section("Series expansions"),
    Entries(
        "cfefa9",
    ),
    Section("Integral representations"),
    Entries(
        "417619",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "162ecf",
        "23ee29",
        "75e692",
    ),
)

make_entry(ID("b0d256"),
    SymbolDefinition(AGM, AGM(a,b), "Arithmetic-geometric mean"),
    Description("This function can be called with one or two arguments, with", Equal(AGM(z), AGM(1,z)), "."))

make_entry(ID("eda1e3"),
    SymbolDefinition(AGMSequence, AGMSequence(n,a,b), "Convergents in AGM iteration"),
    Description("Represents the tuple", Tuple(a_(n), b_(n)), "giving the", n, "-th values in the arithmetic-geometric mean iteration with initial values",
        Equal(Tuple(a_(0), b_(0)), Tuple(a, b)), "."))

make_entry(ID("00d5df"),
    Image(Description("Plot of", AGM(1,x), "on", Element(x, ClosedInterval(-2,2))),
        ImageSource("plot_agm")))

make_entry(ID("c941c4"),
    Image(Description("X-ray of", AGM(1,z), "on", Element(z, ClosedInterval(-4,4) + ClosedInterval(-4,4)*ConstI)),
        ImageSource("xray_agm")),
    description_xray)

make_entry(ID("21f412"),
    Formula(Equal(AGM(z), AGM(1, z), AGM(z, 1))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("32b3b4"),
    Formula(Implies(And(Element(a, CC), Element(b, CC)), Element(AGM(a, b), CC))),
    Variables(a, b))

make_entry(ID("c38209"),
    Formula(Implies(And(Element(a, ClosedOpenInterval(0, Infinity)), Element(b, ClosedOpenInterval(0, Infinity))), Element(AGM(a, b), ClosedOpenInterval(0, Infinity)))),
    Variables(a, b))

make_entry(ID("f9caac"),
    Formula(Implies(Element(x, CC), Element(AGM(x), CC))),
    Variables(x))

make_entry(ID("098757"),
    Formula(Implies(Element(x, ClosedOpenInterval(0, Infinity)), Element(AGM(x), ClosedOpenInterval(0, Infinity)))),
    Variables(x))

make_entry(ID("08329d"),
    Formula(Equal(AGM(0, b), 0)),
    Variables(b),
    Assumptions(Element(b, CC)))

make_entry(ID("8f176c"),
    Formula(Equal(AGM(a, 0), 0)),
    Variables(a),
    Assumptions(Element(a, CC)))

make_entry(ID("3e1398"),
    Formula(Equal(AGM(a, -a), 0)),
    Variables(a),
    Assumptions(Element(a, CC)))

make_entry(ID("b41bdd"),
    Formula(Equal(AGM(a, a), a)),
    Variables(a),
    Assumptions(Element(a, CC)))

make_entry(ID("0d9352"),
    Formula(Equal(AGM(1, Sqrt(2)), Div(Mul(2, Sqrt(2), Pow(Pi, Div(3, 2))), Pow(Gamma(Div(1, 4)), 2)))))

make_entry(ID("e3896e"),
    Formula(Equal(AGM(1, Sqrt(2)/2), Div(Mul(2, Pow(Pi, Div(3, 2))), Pow(Gamma(Div(1, 4)), 2)))))

make_entry(ID("361801"),
    Formula(Equal(AGM(1, 3+2*Sqrt(2)), Div(Mul(2, Add(2, Sqrt(2)), Pow(Pi, Div(3, 2))), Pow(Gamma(Div(1, 4)), 2)))))

make_entry(ID("f9190b"),
    Formula(Equal(AGM(1, 3-2*Sqrt(2)), Div(Mul(2, Sub(2, Sqrt(2)), Pow(Pi, Div(3, 2))), Pow(Gamma(Div(1, 4)), 2)))))

make_entry(ID("69d0a3"),
    Formula(Equal(AGM(1, ConstI), ((Sqrt(2) * (1+ConstI) * Pi**Div(3,2)) / Pow(Gamma(Div(1, 4)), 2)))))

make_entry(ID("5174ea"),
    Formula(Equal(AGM(1, -ConstI), ((Sqrt(2) * (1-ConstI) * Pi**Div(3,2)) / Pow(Gamma(Div(1, 4)), 2)))))

make_entry(ID("7b362f"),
    Formula(Equal(AGM(1, Sqrt(2)), (1/JacobiTheta(4, 0, ConstI)**2))))

make_entry(ID("eb0661"),
    Formula(Equal(AGM(1, 1), 1)))

make_entry(ID("3da9b7"),
    Formula(Equal(ComplexDerivative(AGM(1, x), For(x, 1)), Div(1, 2))))

make_entry(ID("f178f2"),
    Formula(Equal(ComplexDerivative(AGM(1, x), For(x, 1, 2)), -Div(1, 8))))

make_entry(ID("447541"),
    Formula(Equal(ComplexDerivative(AGM(1, x), For(x, 1, n)), ((-1)**n * Factorial(n) / 8**n) * SloaneA("060691", n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("95fb3e"),
    Formula(Where(Equal(AGM(a, b), SequenceLimit(a_(n), For(n, Infinity)), SequenceLimit(b_(n), For(n, Infinity))),
        Def(Tuple(a_(n), b_(n)), AGMSequence(n, a, b)))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("84b888"),
    Formula(Equal(AGMSequence(0, a, b), Tuple(a, b))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("08b69d"),
    Formula(Where(Equal(Tuple(a_(n+1), b_(n+1)),
            Tuple((a_(n)+b_(n))/2, Sqrt(a_(n)*b_(n)))),
            Def(Tuple(a_(k), b_(k)), AGMSequence(k, a, b)))),
    Variables(n, a, b),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(a, CC), Element(b, CC), Or(Equal(a, 0), Equal(b, 0), And(Greater(Re(a), 0), Greater(Re(b), 0)), Less(Abs(Arg(a)) + Abs(Arg(b)), Pi)))))

make_entry(ID("41f67b"),
    Formula(Where(And(Equal(2 * a_(n+1), a_(n) + b_(n)), Equal(b_(n+1)**2, a_(n) * b_(n))),
        Def(Tuple(a_(k), b_(k)), AGMSequence(k, a, b)))),
    Variables(n, a, b),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(a, CC), Element(b, CC))))

make_entry(ID("a2b0f9"),
    Formula(Where(Equal(Tuple(a_(n+1), b_(n+1)),
            Where(Tuple(x, s*y),
                Def(x, (a_(n)+b_(n))/2), Def(y, Sqrt(a_(n)*b_(n))),
                    Def(s, Cases(Tuple(Pos(1), Or(Equal(y, 0), GreaterEqual(Re(x / y), 0))),
                                 Tuple(Neg(1), Otherwise))))),
            Def(Tuple(a_(k), b_(k)), AGMSequence(k, a, b)))),
    Variables(n, a, b),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(a, CC), Element(b, CC))))

make_entry(ID("6d9ceb"),
    Formula(Where(Equal(Pi, 4 * AGM(1, 1/Sqrt(2))**2 / (1 - Sum(2**j * c_(j)**2, For(j, 0, Infinity))),
        SequenceLimit(
            ((a_(n)+b_(n))**2)/((1-Sum(2**j * c_(j)**2, For(j, 0, n)))), For(n, Infinity))
        ),
        Def(Tuple(a_(n), b_(n)), AGMSequence(n, 1, 1/Sqrt(2))), Def(c_(n), (a_(n)-b_(n))))))

make_entry(ID("13c539"),
    Formula(Where(LessEqual(Abs(Pi -
            ((a_(n)+b_(n))**2)/((1-Sum(2**j * c_(j)**2, For(j, 0, n))))),
            2**(n+8) * Exp(-(Pi * 2**(n+1)))),
        Def(Tuple(a_(n), b_(n)), AGMSequence(n, 1, 1/Sqrt(2))), Def(c_(n), (a_(n)-b_(n))))),
    References("https://doi.org/10.2307/2005327"))

make_entry(ID("042551"),
    Formula(Equal(Exp(Pi), Where(32 * Product((a_(n+1) / a_(n))**(2**(1-n)), For(n, 0, Infinity)),
        Def(Tuple(a_(n), b_(n)), AGMSequence(n, 1, 1/Sqrt(2)))))),
    References("https://doi.org/10.2307/2005327"))

make_entry(ID("59fab1"),
    Formula(Equal(AGM(a, b), AGM(b, a))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("c0dea0"),
    Formula(Equal(AGM(Conjugate(a), Conjugate(b)), Conjugate(AGM(a, b)))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC), Or(Equal(a, 0), NotElement(b / a, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("7189d6"),
    Formula(Equal(AGM(-a, -b), -AGM(a, b))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC), Or(Equal(a, 0), NotElement(b / a, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("ce2395"),
    Formula(Equal(AGM(a, b), a * AGM(1, b / a))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC), NotEqual(a, 0), NotElement(b / a, OpenClosedInterval(-Infinity, 0)))))

make_entry(ID("ea1d58"),
    Formula(Equal(AGM(a, b), b * AGM(1, a / b))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC), NotEqual(b, 0), NotElement(a / b, OpenClosedInterval(-Infinity, 0)))))

make_entry(ID("d60119"),
    Formula(Equal(AGM(c*a, c*b), c*AGM(a, b))),
    Variables(a, b, c),
    Assumptions(And(Element(a, CC), Element(b, CC), Element(c, CC), Or(Equal(a, 0), Equal(b, 0), Equal(c, 0), NotElement(b / a, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("c7f885"),
    Formula(Equal(AGM(a, b), AGM((a+b)/2, Sqrt(a*b)))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC), Or(Equal(a, 0), Equal(b, 0), And(Greater(Re(a), 0), Greater(Re(b), 0)), Less(Abs(Arg(a)) + Abs(Arg(b)), Pi)))))

make_entry(ID("fa6ff7"),
    Formula(Equal(AGM(a, b), Where(AGM(x, s*y),
    Def(x, (a+b)/2), Def(y, Sqrt(a*b)),
        Def(s, Cases(Tuple(Pos(1), Or(Equal(y, 0), GreaterEqual(Re(x / y), 0))),
                     Tuple(Neg(1), Otherwise)))))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("8e80c6"),
    Formula(Equal(AGM(1, b), b * AGM(1, 1 / b))),
    Variables(b),
    Assumptions(And(Element(b, CC), NotElement(b, OpenClosedInterval(-Infinity, 0)))))

make_entry(ID("46c021"),
    Formula(Equal(AGM(1, b), (b+1)/2 * AGM(1, 2*Sqrt(b)/(b+1)))),
    Variables(b),
    Assumptions(Element(b, CC)))

make_entry(ID("9d84d8"),
    Formula(Equal(AGM(1+b, 1-b), AGM(1, Sqrt(1-b**2)))),
    Variables(b),
    Assumptions(Element(b, CC)))

make_entry(ID("d6d836"),
    Formula(Equal(AGM(a, b), (a+b)/(2*Hypergeometric2F1(Div(1,2), Div(1,2), 1, ((a-b)/(a+b))**2)))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC), NotEqual(b, 0), NotElement(a / b, OpenClosedInterval(-Infinity, 0)))))

make_entry(ID("71a0ff"),
    Formula(Equal(AGM(a, b), (Pi/4) * ((a+b)/EllipticK(((a-b)/(a+b))**2)))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC), NotEqual(b, 0), NotElement(a / b, OpenClosedInterval(-Infinity, 0)))))

make_entry(ID("e15f43"),
    Formula(Equal(EllipticK(m), Pi / (2*AGM(1, Sqrt(1-m))))),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("26fd1b"),
    Formula(Equal(Log(1/q), Pi / (AGM(JacobiThetaQ(2,0,q)**2, JacobiThetaQ(3,0,q)**2)))),
    Variables(q),
    Assumptions(Element(q, OpenInterval(0, 1))))

make_entry(ID("20828c"),
    Formula(Equal(ComplexDerivative(AGM(a, b), For(a, a)), AGM(a, b)/(Pi*a*(a-b)) * (Pi*a - 2*AGM(a, b) * EllipticE(((a-b)/(a+b))**2)))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC), NotEqual(b, 0), NotEqual(a, b), NotElement(a / b, OpenClosedInterval(-Infinity, 0)))),
    References("http://functions.wolfram.com/09.54.20.0001.01"))

make_entry(ID("a4cc5a"),
    Formula(Where(Equal(2*a*(b**2-a**2) * ComplexDerivative(f(a), For(a, a))**2 - a*f(a)**2 + ((3*a**2-b**2)*ComplexDerivative(f(a), For(a, a))
        + a*(a**2-b**2) * ComplexDerivative(f(a), For(a, a, 2))) * f(a), 0), Def(f(a), AGM(a, b)))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC), NotEqual(b, 0), NotElement(a / b, OpenClosedInterval(-Infinity, 0)))),
    References("http://functions.wolfram.com/09.54.13.0001.01"))

make_entry(ID("cfefa9"),
    Formula(Equal(AGM(1, 1+x), Sum(SloaneA("060691", n) / 8**n * (-x)**n, For(n, 0, Infinity)))),
    Variables(x),
    Assumptions(And(Element(x, CC), Less(Abs(x), 1))))

make_entry(ID("417619"),
    Formula(Equal(AGM(a, b), Where(Pi/(2*I), Def(I, Integral(1/Sqrt(a**2*Cos(x)**2 + b**2*Sin(x)**2), For(x, 0, Pi/2)))))),
    Variables(a, b),
    Assumptions(And(Element(a, OpenInterval(0, Infinity)), Element(b, OpenInterval(0, Infinity)))))

make_entry(ID("162ecf"),
    Formula(LessEqual(Sqrt(a*b), AGM(a, b), (a+b)/2)),
    Variables(a),
    Assumptions(And(Element(a, ClosedOpenInterval(0, Infinity)), Element(b, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("23ee29"),
    Formula(LessEqual(Abs(AGM(a, b)), Abs(AGM(Abs(a), Abs(b))))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("75e692"),
    Formula(Where(LessEqual(Abs(AGM(1, z) - a_(n)), Abs(a_(n) - b_(n))), Def(Tuple(a_(n), b_(n)), AGMSequence(n, 1, z)))),
    Variables(z),
    Assumptions(And(Element(z, CC), GreaterEqual(Re(z), 0))))

def_Topic(
    Title("Airy functions"),
    Section("Definitions"),
    Entries(
        "9ac289",
        "5a9d3f",
    ),
    Section("Illustrations"),
    Entries(
        "b4c968",
        "fa65f3",
    ),
    Section("Differential equation"),
    Entries(
        "51b241",
        "de9800",      ),
    Section("Special values"),
    Entries(
        "693cfe",
        "807917",
        "9a8d4d",
        "fba07c",
    ),
    Section("Higher derivatives"),
    Entries(
        "b2e9d0",          "70ec9f",          "eadca2",      ),
    Section("Hypergeometric representations"),
    Entries(
        "01bbb6",
        "bd319e",
        "20e530",
        "4d65e5",
    ),
    Section("Analytic properties"),
    Entries(
        "def37e",
        "1f0577",
        "90f31e",
        "b88f65",
        "7194d4",
        "d1f9d0",
        "a2df77",
    ),        
)

make_entry(ID("9ac289"),
    SymbolDefinition(AiryAi, AiryAi(z), "Airy function of the first kind"))

make_entry(ID("5a9d3f"),
    SymbolDefinition(AiryBi, AiryBi(z), "Airy function of the second kind"))

make_entry(ID("b4c968"),
    Image(Description("X-ray of", AiryAi(z), "on", Element(z, ClosedInterval(-6,6) + ClosedInterval(-6,6)*ConstI)),
        ImageSource("xray_airy_ai")),
    description_xray,
    )

make_entry(ID("fa65f3"),
    Image(Description("X-ray of", AiryBi(z), "on", Element(z, ClosedInterval(-6,6) + ClosedInterval(-6,6)*ConstI)),
        ImageSource("xray_airy_bi")),
    description_xray,
    )

make_entry(ID("51b241"),
    Formula(Where(Equal(ComplexDerivative(y(z), For(z, z, 2)) - z*y(z), 0), Equal(y(z), C*AiryAi(z) + D*AiryBi(z)))),
    Variables(z, C, D),
    Assumptions(And(Element(z, CC), Element(C, CC), Element(D, CC))))

make_entry(ID("de9800"),
    Formula(Equal(AiryAi(z)*AiryBi(z,1)-AiryAi(z,1)*AiryBi(z), 1/Pi)),
    Variables(z),
    Element(z, CC))

make_entry(ID("693cfe"),
    Formula(EqualAndElement(AiryAi(0), Div(1, Pow(3,Div(2,3))*Gamma(Div(2,3))), RealBall(Decimal("0.355028053887817239260063186004"), Decimal("1.84e-31")))))

make_entry(ID("807917"),
    Formula(EqualAndElement(AiryAi(0,1), -Div(1, Pow(3,Div(1,3))*Gamma(Div(1,3))), RealBall(Decimal("-0.258819403792806798405183560189"), Decimal("2.04e-31")))))

make_entry(ID("9a8d4d"),
    Formula(EqualAndElement(AiryBi(0), Div(1, Pow(3,Div(1,6))*Gamma(Div(2,3))), RealBall(Decimal("0.614926627446000735150922369094"), Decimal("3.87e-31")))))

make_entry(ID("fba07c"),
    Formula(EqualAndElement(AiryBi(0,1), Div(Pow(3,Div(1,6)), Gamma(Div(1,3))), RealBall(Decimal("0.448288357353826357914823710399"), Decimal("1.72e-31")))))

make_entry(ID("b2e9d0"),
    Formula(Equal(AiryAi(z,2), z*AiryAi(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("70ec9f"),
    Formula(Equal(AiryBi(z,2), z*AiryBi(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("eadca2"),
    Formula(Where(Equal(ComplexDerivative(y(z), For(z, z, n)), z*ComplexDerivative(y(z), For(z, z, n-2)) + (n-2)*ComplexDerivative(y(z), For(z, z, n-3))),
        Equal(y(z), C*AiryAi(z) + D*AiryBi(z)))),
    Variables(n, z, C, D),
    Assumptions(And(Element(z, CC), Element(n, ZZGreaterEqual(3)), Element(C, CC), Element(D, CC))))

make_entry(ID("01bbb6"),
    Formula(Equal(AiryAi(z), AiryAi(0)*Hypergeometric0F1(Div(2,3),z**3/9) + z*AiryAi(0,1)*Hypergeometric0F1(Div(4,3),z**3/9))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("bd319e"),
    Formula(Equal(AiryBi(z), AiryBi(0)*Hypergeometric0F1(Div(2,3),z**3/9) + z*AiryBi(0,1)*Hypergeometric0F1(Div(4,3),z**3/9))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("20e530"),
    Formula(Equal(AiryAi(z,1), AiryAi(0,1)*Hypergeometric0F1(Div(1,3),z**3/9) + (z**2/2)*AiryAi(0)*Hypergeometric0F1(Div(5,3),z**3/9))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("4d65e5"),
    Formula(Equal(AiryBi(z,1), AiryBi(0,1)*Hypergeometric0F1(Div(1,3),z**3/9) + (z**2/2)*AiryBi(0)*Hypergeometric0F1(Div(5,3),z**3/9))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("def37e"),
    Formula(IsHolomorphic(C*AiryAi(z) + D*AiryBi(z), ForElement(z, CC))),
    Variables(C, D),
    Assumptions(And(Element(C, CC), Element(D, CC), Not(And(Equal(C,0), Equal(D,0))))))

make_entry(ID("1f0577"),
    Formula(Equal(Poles(C*AiryAi(z) + D*AiryBi(z), ForElement(z, Union(CC, Set(UnsignedInfinity)))), Set())),
    Variables(C, D),
    Assumptions(And(Element(C, CC), Element(D, CC), Not(And(Equal(C,0), Equal(D,0))))))

make_entry(ID("90f31e"),
    Formula(Equal(EssentialSingularities(C*AiryAi(z) + D*AiryBi(z), z, Union(CC, Set(UnsignedInfinity))), Set(UnsignedInfinity))),
    Variables(C, D),
    Assumptions(And(Element(C, CC), Element(D, CC), Not(And(Equal(C,0), Equal(D,0))))))

make_entry(ID("b88f65"),
    Formula(Equal(BranchPoints(C*AiryAi(z) + D*AiryBi(z), z, Union(CC, Set(UnsignedInfinity))), Set())),
    Variables(C, D),
    Assumptions(And(Element(C, CC), Element(D, CC))))

make_entry(ID("7194d4"),
    Formula(Equal(BranchCuts(C*AiryAi(z) + D*AiryBi(z), z, CC), Set())),
    Variables(C, D),
    Assumptions(And(Element(C, CC), Element(D, CC))))

make_entry(ID("d1f9d0"),
    Formula(Subset(Zeros(AiryAi(z), ForElement(z, CC)), RR)))

make_entry(ID("a2df77"),
    Formula(Subset(Zeros(AiryAi(z,1), ForElement(z, CC)), RR)))

def_Topic(
    Title("Inverse tangent"),
    Section("Definitions"),
    Entries(
        "b120b9",
        "ce3a8e",
    ),
    Section("Illustrations"),
    Entries(
        "8bb3d8",
    ),
    Section("Transcendental equations"),
    Entries(
        "1f026d",
        "d4b0b6",
        "0b829e",
        "f516e3",
        "cbce7f",
        "a2af66",
    ),
    Section("Differential equations"),
    Entries(
        "61d8f3",
    ),
    Section("Integral representations"),
    Entries(
        "90a864",
    ),
    Section("Specific values"),
    Entries(
        "645e30",
        "d418d3",
        "7295b5",
        "a2d208",
        "9b0994",
        "157c6c",
        "706783",
        "3c1021",
        "a9ecff",
        "c6c92a",
        "7dd050",
        "b0049f",
    ),
    Section("Analytic properties"),
    Entries(
        "a6cd13",
        "30ba67",
        "48031d",
        "26c47c",
        "3b11d3",
        "718a9b",
    ),
    Section("Cases for atan2"),
    Entries(
        "a6776b",
        "77e519",
        "22fb4a",
    ),
    Section("Argument transformations"),
    Subsection("Symmetries"),
    Entries(
        "0ee626",
        "632063",
        "e3d274",
        "073e1a",
        "bfc13f",
    ),
    Subsection("Addition and multiplication formulas"),
    Entries(
        "072166",
        "268c9e",
        "14f8c2",
    ),
    Subsection("Algebraic transformations"),
    Entries(
        "67c0be",
    ),
    Section("Sums and products"),
    Entries(
        "cf64b3",
        "00e608",
        "3ea11b",
        "503d4d",
        "a020e9",
        "1d730a",
    ),
    Section("Representations through other functions"),
    Subsection("Logarithms"),
    Entries(
        "a18b77",
        "500c0a",
        "12765e",
        "9dec3e",
        "eca4ce",
    ),
    Subsection("Inverse trigonometric functions"),
    Entries(
        "c580f4",
        "7954ad",
        "ec7f2d",
    ),
    Subsection("Hypergeometric functions"),
    Entries(
        "34ff28",
    ),
    Section("Complex parts"),
    Entries(
        "df52fc",
        "b65d19",
    ),
    Section("Derivatives and integrals"),
    Entries(
        "8fbf69",
        "a4eb86",
        "90631b",
        "36171f",
        "6b8963",
        "1d3fd7",
    ),
    Section("Series expansions"),
    Entries(
        "4e5947",
    ),
    Section("Bounds and inequalities"),
    Subsection("Real arguments"),
    Entries(
        "b63481",
        "e7a9b1",
        "5d6f74",
        "466095",
        "3478af",
        "1eeccf",
        "efebb8",
        "a42212",
        "3fe47b",
        "f5d28c",
        "b0a4e9",
        "d04a5b",
        "b971fe",
    ),
    Subsection("Complex arguments"),
    Entries(
        "7272a8",
        "fa9b71",
    ),
    Subsection("Perturbations"),
    Entries(
        "47331d",
        "96289e",
        "fa30c7",
        "4d2168",
    ),
)

make_entry(ID("b120b9"),
    SymbolDefinition(Atan, Atan(z), "Inverse tangent"),
    Description("The inverse tangent function", Atan(z),
        "(denoted by", SourceForm(Atan(z)), "in the Fungrim formula language)",
         "is a function of a single variable.",
        "The following table lists conditions such that", SourceForm(Atan(z)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(Element(z, RR), Element(Atan(z), OpenInterval(-(Pi/2), Pi/2))),
        Tuple(Element(z, SetMinus(CC, Set(-ConstI, +ConstI))), Element(Atan(z), CC)),
        TableSection("Infinities"),
        Tuple(Element(z, Set(-Infinity, Infinity)), Element(Atan(z), Set(-(Pi/2), Pi/2))),
        Tuple(Element(z, Set(-ConstI, +ConstI)), Element(Atan(z), Set(-ConstI*Infinity, +ConstI*Infinity))),
        TableSection("Formal power series"),
        Tuple(Element(z, PowerSeries(RR, x)), Element(Atan(z), PowerSeries(RR, x))),
        Tuple(And(Element(z, PowerSeries(CC, x)), NotElement(SeriesCoefficient(z, x, 0), Set(-ConstI, +ConstI))), Element(Atan(z), PowerSeries(CC, x))),
      )))

make_entry(ID("ce3a8e"),
    SymbolDefinition(Atan2, Atan2(y, x), "Two-argument inverse tangent"),
    Description("The inverse tangent function", Atan2(y, x),
        "(denoted by", SourceForm(Atan2(y, x)), "in the Fungrim formula language)",
         "is a function of two variables.",
        "The following table lists conditions such that", SourceForm(Atan2(y, x)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(And(Element(y, RR), Element(x, RR)), Element(Atan2(y, x), OpenClosedInterval(-Pi, Pi))),
      )))

make_entry(ID("8bb3d8"),
    Image(Description("X-ray of", Atan(z), "on", Element(z, ClosedInterval(-2,2) + ClosedInterval(-2,2)*ConstI)),
        ImageSource("xray_atan")),
    description_xray,
    )

make_entry(ID("1f026d"),
    Formula(Equal(Tan(Atan(z)), z)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("d4b0b6"),
    Formula(Equal(Sin(Atan(z)), z/Sqrt(1+z**2))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(-ConstI, ConstI)))))

make_entry(ID("0b829e"),
    Formula(Equal(Cos(Atan(z)), 1/Sqrt(1+z**2))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(-ConstI, ConstI)))))

make_entry(ID("f516e3"),
    Formula(Equal(Atan(Tan(theta)), theta)),
    Variables(theta),
    Assumptions(And(Element(theta, CC), Less(-(Pi/2), Re(theta), Pi/2))))

make_entry(ID("cbce7f"),
    Formula(Equal(Solutions(Brackets(Equal(Tan(w), z)), ForElement(w, CC)), Set(Atan(z) + Pi*n, ForElement(n, ZZ)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(-ConstI, ConstI)))))

make_entry(ID("a2af66"),
    Formula(Equal(Atan2(y, x), UniqueSolution(Brackets(Where(
        Equal(Tuple(x,y), Tuple(r*Cos(theta), r*Sin(theta))),
            Equal(r, Sqrt(x**2+y**2)))), ForElement(theta, OpenClosedInterval(-Pi, Pi))))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR), Or(NotEqual(x, 0), NotEqual(y, 0)))))

C_1 = Subscript(c, 1)

C_2 = Subscript(c, 2)

make_entry(ID("61d8f3"),
    Formula(Where(Equal((1+z**2) * ComplexDerivative(y(z), For(z, z, 2)) + 2 * z * ComplexDerivative(y(z), For(z, z, 1)), 0), Equal(y(z), C_1 + C_2 * Atan(z)))),
    Variables(z, C_1, C_2),
    Assumptions(And(Element(z, CC), Element(C_1, CC), Element(C_2, CC),
        NotElement(ConstI*z, Union(OpenClosedInterval(-Infinity, -1), ClosedOpenInterval(1, Infinity))))))

make_entry(ID("90a864"),
    Formula(Equal(Atan(z), Integral(1/(1+t**2), For(t, 0, z)))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(ConstI*z, Union(OpenClosedInterval(-Infinity,-1), ClosedOpenInterval(1,Infinity))))))

make_entry(ID("645e30"),
    Formula(Equal(Atan(0), 0)))

make_entry(ID("d418d3"),
    Formula(Equal(Atan(+Infinity), Pi/2)))

make_entry(ID("7295b5"),
    Formula(Equal(Atan(-Infinity), -(Pi/2))))

make_entry(ID("a2d208"),
    Formula(Equal(Atan(+ConstI), +ConstI*Infinity)))

make_entry(ID("9b0994"),
    Formula(Equal(Atan(-ConstI), -ConstI*Infinity)))

make_entry(ID("157c6c"),
    Formula(Equal(Atan(1), Pi/4)))

make_entry(ID("706783"),
    Formula(Equal(Atan(Sqrt(3)), Pi/3)))

make_entry(ID("3c1021"),
    Formula(Equal(Atan(1/Sqrt(3)), Pi/6)))

make_entry(ID("a9ecff"),
    Formula(Equal(Atan(Sqrt(2)-1), Pi/8)))

make_entry(ID("c6c92a"),
    Formula(Equal(Atan(Sqrt(2)+1), 3*Pi/8)))

make_entry(ID("7dd050"),
    Formula(Equal(Atan(2-Sqrt(3)), Pi/12)))

make_entry(ID("b0049f"),
    Formula(Equal(Atan(2+Sqrt(3)), 5*Pi/12)))

make_entry(ID("a6cd13"),
    Formula(IsHolomorphic(Atan(z), ForElement(z, 
        SetMinus(CC, Parentheses(Union(OpenClosedInterval(-Infinity,-1)*ConstI, ClosedOpenInterval(1,Infinity)*ConstI)))))))

make_entry(ID("30ba67"),
    Formula(Equal(EssentialSingularities(Atan(z), z, Union(CC, Set(UnsignedInfinity))), Set())))

make_entry(ID("48031d"),
    Formula(Equal(Poles(Atan(z), ForElement(z, Union(CC, Set(UnsignedInfinity)))), Set())))

make_entry(ID("26c47c"),
    Formula(Equal(BranchPoints(Atan(z), z, Union(CC, Set(UnsignedInfinity))), Set(-ConstI, ConstI, UnsignedInfinity))))

make_entry(ID("3b11d3"),
    Formula(Equal(BranchCuts(Atan(z), z, CC),
        Set(OpenClosedInterval(-Infinity,-1)*ConstI, ClosedOpenInterval(1,Infinity)*ConstI))))

make_entry(ID("718a9b"),
    Formula(Equal(Zeros(Atan(z), ForElement(z, CC)), Set(0))))

make_entry(ID("a6776b"),
    Formula(Equal(Atan2(0,x), Cases(Tuple(0, GreaterEqual(x, 0)), Tuple(Pi, Less(x, 0))))),
    Variables(x),
    Assumptions(Element(x, RR)))

make_entry(ID("77e519"),
    Formula(Equal(Atan2(y,0), (Pi/2) * Sign(y))),
    Variables(y),
    Assumptions(Element(y, RR)))

make_entry(ID("22fb4a"),
    Formula(Equal(Atan2(y,x), Cases(
        Tuple(0, Equal(x, y, 0)),
        Tuple(Atan(y/x), Greater(x, 0)),
        Tuple(Parentheses(Pi/2) * Sign(y) - Atan(x/y), NotEqual(y, 0)),
        Tuple(Pi, And(Equal(y, 0), Less(x, 0))),
        ))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("0ee626"),
    Formula(Equal(Atan(-z), -Atan(z))),
    Variables(z),
    Assumptions(Element(z, Union(CC, Set(-Infinity, Infinity)))))

make_entry(ID("632063"),
    Formula(Equal(Atan(Conjugate(z)), Conjugate(Atan(z)))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(ConstI*z, Union(OpenInterval(-Infinity,-1), OpenInterval(1,Infinity))))))

make_entry(ID("e3d274"),
    Formula(Equal(Atan(1/z), Pi/2 - Atan(z))),
    Variables(z),
    Assumptions(And(Element(z, CC), Or(Greater(Re(z), 0),
        And(Equal(Re(z), 0), Element(Im(z), Union(OpenInterval(-1,0), OpenInterval(1, Infinity))))))))

make_entry(ID("073e1a"),
    Formula(Equal(Atan(1/z), -(Pi/2) - Atan(z))),
    Variables(z),
    Assumptions(And(Element(z, CC), Or(Less(Re(z), 0),
        And(Equal(Re(z), 0), Element(Im(z), Union(OpenInterval(-Infinity,-1), OpenInterval(0, 1))))))))

make_entry(ID("bfc13f"),
    Formula(Equal(Atan(1/z), (Pi/2)*Csgn(1/z) - Atan(z))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(ConstI*z, Union(Set(0), OpenClosedInterval(-Infinity, -1), ClosedOpenInterval(1, Infinity))))))

make_entry(ID("072166"),
    Formula(Equal(Atan(ConstI*z), ConstI*Atanh(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("268c9e"),
    Formula(Equal(Atan(x+y), Atan(x) + Atan(y/(1+x*(x+y))))),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC), Less(Abs(x+y), 1), Less(Abs(x), 1)),
                And(Element(x, RR), Element(y, RR), Greater(x*(x+y), -1))))

make_entry(ID("14f8c2"),
    Formula(Equal(Atan(2*z), Atan(z) + Atan(z/(1+2*z**2)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Not(And(Equal(Re(z), 0), Element(Abs(Im(z)), ClosedInterval(Sqrt(2)/2, 1)))))))

make_entry(ID("67c0be"),
    Formula(Equal(Atan(z), 2*Atan(z/(1+Sqrt(1+z**2))))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("cf64b3"),
    Formula(Equal(Atan(x)+Atan(y), Atan2(x+y, 1-x*y))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("00e608"),
    Formula(Equal(Atan(x)-Atan(y), Atan2(x-y, 1+x*y))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("3ea11b"),
    Formula(Equal(Atan(x)+Atan(y), Atan((x+y)/(1-x*y)))),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC), Less(Abs(x), 1), Less(Abs(y), 1)),
                And(Element(x, RR), Element(y, RR), Less(x*y, 1))))

make_entry(ID("503d4d"),
    Formula(Equal(Atan(x)-Atan(y), Atan((x-y)/(1+x*y)))),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC), Less(Abs(x), 1), Less(Abs(y), 1)),
                And(Element(x, RR), Element(y, RR), Greater(x*y, -1))))

y1 = Subscript(y,1)

y2 = Subscript(y,2)

x1 = Subscript(x,1)

x2 = Subscript(x,2)

make_entry(ID("a020e9"),
    Formula(Equal(Atan2(y1,x1)+Atan2(y2,x2), Atan2(y1*x2+y2*x1, x1*x2-y1*y2))),
    Variables(x, y),
    Assumptions(And(Element(x1, RR), Element(x2, RR), Element(y1, RR), Element(y2, RR),
        Element(Atan2(y1,x1)+Atan2(y2,x2), OpenClosedInterval(-Pi, Pi)),
        Not(Equal(x1,y1,0)), Not(Equal(x2,y2,0)))))

make_entry(ID("1d730a"),
    Formula(Equal(Atan2(y1,x1)-Atan2(y2,x2), Atan2(y1*x2-y2*x1, x1*x2+y1*y2))),
    Variables(x, y),
    Assumptions(And(Element(x1, RR), Element(x2, RR), Element(y1, RR), Element(y2, RR),
        Element(Atan2(y1,x1)-Atan2(y2,x2), OpenClosedInterval(-Pi, Pi)),
        Not(Equal(x1,y1,0)), Not(Equal(x2,y2,0)))))

make_entry(ID("a18b77"),
    Formula(Equal(Atan(z), (ConstI/2)*(Log(1-ConstI*z) - Log(1 + ConstI*z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("500c0a"),
    Formula(Equal(Atan(z), (ConstI/2)*(Log((1-ConstI*z)/(1+ConstI*z))))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(-z*ConstI, ClosedOpenInterval(1, Infinity)))))

make_entry(ID("12765e"),
    Formula(Equal(Atan(z), -(ConstI/2)*(Log((1+ConstI*z)/(1-ConstI*z))))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z*ConstI, ClosedOpenInterval(1, Infinity)))))

make_entry(ID("9dec3e"),
    Formula(Equal(Atan2(y,x), -ConstI*Log(Sign(x+y*ConstI)))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR), NotEqual(x+y*ConstI, 0))))

make_entry(ID("eca4ce"),
    Formula(Equal(Atan2(y,x), Im(Log(x+y*ConstI)))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR), NotEqual(x+y*ConstI, 0))))

make_entry(ID("c580f4"),
    Formula(Equal(Atan(z), Acot(1/z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("7954ad"),
    Formula(Equal(Atan(z), Asin(z/Sqrt(1+z**2)))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(ConstI*z, Union(OpenClosedInterval(-Infinity,-1), ClosedOpenInterval(1,Infinity))))))

make_entry(ID("ec7f2d"),
    Formula(Equal(Atan(z), Csgn(z) * Acos(1/Sqrt(1+z**2)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(-ConstI, ConstI)))))

make_entry(ID("34ff28"),
    Formula(Equal(Atan(z), z * Hypergeometric2F1(1, Div(1,2), Div(3,2), -z**2))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(-ConstI, ConstI)))))

make_entry(ID("df52fc"),
    Formula(Equal(Re(Atan(x+y*ConstI)), Div(1,2)*Atan2(2*x, 1-x**2-y**2))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR), Not(And(Equal(x, 0), Element(y, Union(OpenClosedInterval(-Infinity, -1), Set(1))))))))

make_entry(ID("b65d19"),
    Formula(Equal(Im(Atan(x+y*ConstI)), Div(1,4)*Log((x**2+(1+y)**2)/(x**2+(1-y)**2)))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR), NotElement(x+y*ConstI, Set(-ConstI, ConstI)))))

make_entry(ID("8fbf69"),
    Formula(Equal(ComplexDerivative(Atan(z), For(z, z, 1)), 1/(1+z**2))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(ConstI*z, Union(OpenClosedInterval(-Infinity,-1), ClosedOpenInterval(1,Infinity))))))

make_entry(ID("a4eb86"),
    Formula(Equal(ComplexDerivative(Atan(z), For(z, z, 2)), -((2*z)/(1+z**2)**2))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(ConstI*z, Union(OpenClosedInterval(-Infinity,-1), ClosedOpenInterval(1,Infinity))))))

make_entry(ID("90631b"),
    Formula(Equal(ComplexDerivative(Atan(z), For(z, z, n)),
        Factorial(n-1) / (1+z**2)**((n+1)/2) * ChebyshevU(n-1, -(z/Sqrt(1+z**2))))),
    Variables(z, n),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(z, CC), NotElement(ConstI*z, Union(OpenClosedInterval(-Infinity,-1), ClosedOpenInterval(1,Infinity))))),
    References("M. A. Boutiche and M. Rahmani (2017), On the higher derivatives of the inverse tangent function, https://arxiv.org/abs/1712.03521, Theorem 9"))

make_entry(ID("36171f"),
    Formula(Equal(ComplexDerivative(Atan(z), For(z, z, n)),
        (((-1)**n * Factorial(n-1)) / (2 * ConstI)) * (1/(z+ConstI)**n - 1/(z-ConstI)**n))),
    Variables(z, n),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(z, CC), NotElement(ConstI*z, Union(OpenClosedInterval(-Infinity,-1), ClosedOpenInterval(1,Infinity))))))

make_entry(ID("6b8963"),
    Formula(Equal(RealDerivative(Atan2(y, x), For(x, x, 1)), -(y/(x**2+y**2)))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR), Or(Greater(x, 0), NotEqual(y, 0)))))

make_entry(ID("1d3fd7"),
    Formula(Equal(RealDerivative(Atan2(y, x), For(y, y, 1)), x/(x**2+y**2))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR), Or(Greater(x, 0), NotEqual(y, 0)))))

make_entry(ID("4e5947"),
    Formula(Equal(Atan(z), Sum((-1)**k * z**(2*k+1) / (2*k+1), For(k, 0, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Less(Abs(z), 1))))

make_entry(ID("b63481"),
    Formula(LessEqual(Abs(Atan2(y,x)), Pi)),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("e7a9b1"),
    Formula(Less(Abs(Atan(x)), Pi/2)),
    Variables(x),
    Assumptions(Element(x, RR)))

make_entry(ID("5d6f74"),
    Formula(LessEqual(Abs(Atan(x)), Pi/2)),
    Variables(x),
    Assumptions(Element(x, Union(RR, Set(-Infinity, Infinity)))))

make_entry(ID("466095"),
    Formula(LessEqual(Abs(Atan(x)), Abs(x))),
    Variables(x),
    Assumptions(Element(x, Union(RR, Set(-Infinity, Infinity)))))

make_entry(ID("3478af"),
    Formula(LessEqual(Atan(x), Sum((-1)**k * x**(2*k+1) / (2*k+1), For(k, 0, 2*N)))),
    Variables(x, N),
    Assumptions(And(Element(x, ClosedOpenInterval(0, Infinity)), Element(N, ZZGreaterEqual(0)))))

make_entry(ID("1eeccf"),
    Formula(GreaterEqual(Atan(x), Sum((-1)**k * x**(2*k+1) / (2*k+1), For(k, 0, 2*N+1)))),
    Variables(x, N),
    Assumptions(And(Element(x, ClosedOpenInterval(0, Infinity)), Element(N, ZZGreaterEqual(0)))))

make_entry(ID("efebb8"),
    Formula(LessEqual(Atan(x), (Pi/2)**2 * (x / (1 + (Pi/2) * x)))),
    Variables(x),
    Assumptions(Element(x, ClosedOpenInterval(0, Infinity))))

make_entry(ID("a42212"),
    Formula(GreaterEqual(Atan(x), x/(1+x))),
    Variables(x),
    Assumptions(Element(x, ClosedOpenInterval(0, Infinity))))

make_entry(ID("3fe47b"),
    Formula(GreaterEqual(Atan(x), (Pi * x) / (Pi + 2*x))),
    Variables(x),
    Assumptions(Element(x, ClosedOpenInterval(0, Infinity))))

make_entry(ID("f5d28c"),
    Formula(LessEqual(Atan(x), (Pi/2) * (x / Sqrt(1 + x**2)))),
    Variables(x),
    Assumptions(Element(x, ClosedOpenInterval(0, Infinity))))

make_entry(ID("b0a4e9"),
    Formula(GreaterEqual(Atan(x), (x / Sqrt(1 + x**2)))),
    Variables(x),
    Assumptions(Element(x, ClosedOpenInterval(0, Infinity))))

make_entry(ID("d04a5b"),
    Formula(LessEqual(Atan(x), (Pi/2) * Tanh(x))),
    Variables(x),
    Assumptions(Element(x, ClosedOpenInterval(0, Infinity))))

make_entry(ID("b971fe"),
    Formula(GreaterEqual(Atan(x), Tanh(x))),
    Variables(x),
    Assumptions(Element(x, ClosedOpenInterval(0, Infinity))))

make_entry(ID("7272a8"),
    Formula(LessEqual(Abs(Atan(z)), Abs(Atanh(Abs(z))))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("fa9b71"),
    Formula(LessEqual(Abs(Atan(z)), -Log(1-Abs(z)))),
    Variables(z),
    Assumptions(And(Element(z, CC), LessEqual(Abs(z), 1))))

make_entry(ID("47331d"),
    Formula(Equal(Abs(Atan(x+y)-Atan(x)), Atan2(Abs(y), 1+x*(x+y)))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("96289e"),
    Formula(LessEqual(Abs(Atan(x+y)-Atan(x)), Abs(y))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("fa30c7"),
    Formula(LessEqual(Abs(Atan(x+y)-Atan(x)), Abs(y)/(1 + Max(0, Abs(x)-Abs(y))**2))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("4d2168"),
    Formula(Less(Abs(Atan(x+y)-Atan(x)), Pi)),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

def_Topic(
    Title("Barnes G-function"),
    Section("Definitions"),
    Entries(
        "82a1b1",
        "da1509",
    ),
    Section("Illustrations"),
    Entries(
        "488c5c",
        "106bf7",
        "e1497f",
    ),
    Section("Domain"),
    Subsection("Barnes G-function"),
    Entries(
        "971881",
        "3d46ea",
        "f3f0a7",
        "8ec739",
    ),
    Subsection("Logarithmic Barnes G-function"),
    Entries(
        "037342",
        "19b40f",
        "a471d0",
        "62bdb8",
    ),
    Section("Logarithmic form"),
    Entries(
        "b4355e",
        "5a11eb",
        "d9a7a3",
    ),
    Section("Specific values"),
    Subsection("Integers"),
    Entries(
        "33f13a",
        "daef08",
        "5cb675",
        "dbc117",
    ),
    Subsection("Rational arguments"),
    Entries(
        "8b7991",
        "ce66a9",
        "dc507f",
    ),
    Subsection("Derivatives"),
    Entries(
        "90b367",
        "dbfd5b",
        "a54fb0",
        "f50c74",
    ),
    Section("Singularities and zeros"),
    Subsection("Zeros"),
    Entries(
        "e488dc",
        "f77124",
        "2b021c",
    ),
    Subsection("Branch cuts"),
    Entries(
        "c3e340",
        "e1f73d",
        "a044e1",
        "cc3a51",
        "d35c54",
    ),
    Section("Functional equations"),
    Subsection("Recurrence relation"),
    Entries(
        "86b3ec",
        "5261e3",
        "7a36e5",
    ),
    Subsection("Reflection formula, real variables"),
    Entries(
        "541e2e",
        "d1a0ec",
    ),
    Subsection("Reflection formula, complex variables"),
    Entries(
        "b6017f",
        "23ed69",
        "82b410",
    ),
    Subsection("Multiplication theorem"),
    Entries(
        "ea26d4",
    ),
    Subsection("Conjugate symmetry"),
    Entries(
        "147db6",
        "6c6d3e",
    ),
    Section("Derivatives and differential equations"),
    Entries(
        "5babc2",
        "af31ae",
    ),
    Section("Representation by other functions"),
    Entries(
        "e05807",
    ),
    Section("Series and product representations"),
    Subsection("Taylor series"),
    Entries(
        "0ad263",
    ),
    Subsection("Weierstrass product"),
    Entries(
        "54d4e2",
    ),
    Subsection("Asymptotic expansion"),
    Entries(
        "752bde",
        "6f8e14",
        "b16d00",
        "092cee",
        "645c98",
        "1d4638",
    ),
    Section("Integral representations"),
    Entries(
        "8c96a5",
        "95f771",
        "b64782",
        "6395ee",
    ),
    Section("Bounds and inequalities"),
    Subsection("Upper and lower bounds"),
    Entries(
        "4a3612",
        "3544a0",
    ),
    Subsection("Monotonicity and convexity"),
    Entries(
        "7df1c4",
        "1c770c",
        "306699",
    ),
    Section("Matrix formulas"),
    Entries(
        "dc6806",
        "f4750b",
    ),
)

make_entry(ID("82a1b1"),
    SymbolDefinition(BarnesG, BarnesG(z), "Barnes G-function"),
    Description(SourceForm(BarnesG(z)), ", rendered as", BarnesG(z), ", represents the Barnes G-function of argument", z, "."))

make_entry(ID("da1509"),
    SymbolDefinition(LogBarnesG, LogBarnesG(z), "Logarithmic Barnes G-function"),
    Description(SourceForm(LogBarnesG(z)), ", rendered as", LogBarnesG(z), ", represents the logarithmic Barnes G-function of argument", z, "."))

make_entry(ID("488c5c"),
    Image(Description("Plot of", BarnesG(x), "on", Element(x, ClosedInterval(-4,6))),
        ImageSource("plot_barnes_g")),
    )

make_entry(ID("106bf7"),
    Image(Description("X-ray of", BarnesG(z), "on", Element(z, ClosedInterval(-4,6) + ClosedInterval(-5,5)*ConstI)),
        ImageSource("xray_barnes_g")),
    description_xray,
    )

make_entry(ID("e1497f"),
    Image(Description("X-ray of", LogBarnesG(z), "on", Element(z, ClosedInterval(-4,6) + ClosedInterval(-5,5)*ConstI)),
        ImageSource("xray_log_barnes_g")),
    description_xray,
    )

make_entry(ID("f3f0a7"),
    Formula(Implies(Element(x, RR), Element(BarnesG(x), RR))),
    Variables(x))

make_entry(ID("3d46ea"),
    Formula(Implies(Element(n, ZZ), Element(BarnesG(n), ZZGreaterEqual(0)))),
    Variables(n))

make_entry(ID("8ec739"),
    Formula(Implies(Element(z, CC), Element(BarnesG(z), CC))),
    Variables(z))

make_entry(ID("971881"),
    Formula(IsHolomorphic(BarnesG(z), ForElement(z, CC))))

make_entry(ID("19b40f"),
    Formula(Implies(Element(x, OpenInterval(0,Infinity)), Element(LogBarnesG(x), RR))),
    Variables(x))

make_entry(ID("a471d0"),
    Formula(Implies(Element(z, SetMinus(CC, ZZLessEqual(0))), Element(LogBarnesG(z), CC))),
    Variables(z))

make_entry(ID("037342"),
    Formula(IsHolomorphic(LogBarnesG(z), ForElement(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))),
    Variables(z))

make_entry(ID("62bdb8"),
    Formula(Implies(Element(z, ZZLessEqual(0)), Element(LogBarnesG(z), Set(-Infinity)))),
    Variables(z))

make_entry(ID("b4355e"),
    Formula(Equal(BarnesG(z), Exp(LogBarnesG(z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("5a11eb"),
    Formula(Equal(LogBarnesG(x), Where(Cases(Tuple(Log(BarnesG(x)), Greater(x, 0)),
        Tuple(Log(Abs(BarnesG(x))) + Div(1,2)*n*(n-1)*Pi*ConstI, Otherwise)), Equal(n, Floor(x))))),
    Variables(x),
    Assumptions(And(Element(x, RR), NotElement(x, ZZLessEqual(0)))))

make_entry(ID("d9a7a3"),
    Formula(Implies(Or(Element(z, OpenInterval(0, Infinity)), Less(Abs(z-Decimal("2.5")), Decimal("2.5"))),
        Equal(LogBarnesG(z), Log(BarnesG(z))))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("e488dc"),
    Formula(Equal(Zeros(BarnesG(z), ForElement(z, CC)), ZZLessEqual(0))))

make_entry(ID("f77124"),
    Formula(Equal(ComplexZeroMultiplicity(BarnesG(z), For(z, -n)), n+1)),
    Variables(n),
    Assumptions(And(Element(n, ZZGreaterEqual(0)))))

make_entry(ID("2b021c"),
    Formula(Equal(Zeros(LogBarnesG(z), ForElement(z, CC)), Set(1, 2, 3))))

make_entry(ID("c3e340"),
    Formula(Equal(BranchPoints(LogBarnesG(z), z, CC), ZZLessEqual(0))))

make_entry(ID("e1f73d"),
    Formula(Equal(BranchCuts(LogBarnesG(z), z, CC), Set(OpenInterval(-n-1,-n), ForElement(n, ZZGreaterEqual(0))))))

make_entry(ID("a044e1"),
    Formula(Equal(Im(LogBarnesG(x)), Where((n*(n-1))/2 * Pi, Equal(n, Floor(x))))),
    Variables(x),
    Assumptions(And(Element(x, RR), Less(x, 0), NotElement(x, ZZ))))

make_entry(ID("cc3a51"),
    Formula(Equal(RightLimit(Brackets(LogBarnesG(x+epsilon*ConstI)), For(epsilon, 0)), LogBarnesG(x))),
    Variables(x),
    Assumptions(And(Element(x, RR), Less(x, 0), NotElement(x, ZZ))))

make_entry(ID("d35c54"),
    Formula(Equal(RightLimit(Brackets(LogBarnesG(x-epsilon*ConstI)), For(epsilon, 0)), Conjugate(LogBarnesG(x)), Where(LogBarnesG(x) - n*(n-1)*Pi*ConstI, Equal(n, Floor(x))))),
    Variables(x),
    Assumptions(And(Element(x, RR), Less(x, 0), NotElement(x, ZZ))))

make_entry(ID("33f13a"),
    Formula(Equal(BarnesG(n), Cases(Tuple(Product(Factorial(k), For(k, 1, n-2)), GreaterEqual(n, 1)),
        Tuple(0, LessEqual(n, 0))))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("daef08"),
    Formula(Equal(LogBarnesG(n), Cases(Tuple(Log(BarnesG(n)), GreaterEqual(n, 1)),
        Tuple(-Infinity, LessEqual(n, 0))))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("5cb675"),
    Description("Table of", BarnesG(n), "for", LessEqual(0, n, 15)),
    Table(
      Var(n),
      TableValueHeadings(n, BarnesG(n)),
      TableSplit(1),
      List(
    Tuple(0, 0),
    Tuple(1, 1),
    Tuple(2, 1),
    Tuple(3, 1),
    Tuple(4, 2),
    Tuple(5, 12),
    Tuple(6, 288),
    Tuple(7, 34560),
    Tuple(8, 24883200),
    Tuple(9, 125411328000),
    Tuple(10, 5056584744960000),
    Tuple(11, 1834933472251084800000),
    Tuple(12, 6658606584104736522240000000),
    Tuple(13, 265790267296391946810949632000000000),
    Tuple(14, 127313963299399416749559771247411200000000000),
    Tuple(15, 792786697595796795607377086400871488552960000000000000),
    )))

make_entry(ID("dbc117"),
    Description("Table of", BarnesG(10**n), "to 50 digits for", LessEqual(0, n, 10)),
    Table(
      Var(n),
      TableValueHeadings(n, NearestDecimal(BarnesG(10**n), 50)),
      TableSplit(1),
      List(
    Tuple(0, Decimal("1")),
    Tuple(1, Decimal("5056584744960000")),
    Tuple(2, Decimal("3.1036100626369830847879402668101769402280611882492e+6626")),
    Tuple(3, Decimal("2.0045690761252153894020068969764708165025223902021e+1172113")),
    Tuple(4, Decimal("7.8913000980387915476627721291099032636382430763247e+167396248")),
    Tuple(5, Decimal("6.0203407218068785584794013164002058716523147916958e+21742374725")),
    Tuple(6, Decimal("1.0145655480290378725684376810089100792606395451713e+2674273971959")),
    Tuple(7, Decimal("5.2418488985408575463326646933057662934049190054866e+317427852191102")),
    Tuple(8, Decimal("5.7976150706924830557487583722980527113426519510559e+36742790669064055")),
    Tuple(9, Decimal("4.1978917865925966071745800658793636650835499429177e+4174279130405945548")),
    Tuple(10, Decimal("4.8323663133177075948431502316007152775466606093624e+467427913765589957090")),
    )))

make_entry(ID("8b7991"),
    Formula(Equal(BarnesG(Div(1,2)), (2**Div(1,24) * Exp(Div(1,8))) / (Pi**Div(1,4) * ConstGlaisher**Div(3,2)))))

make_entry(ID("ce66a9"),
    Formula(Equal(BarnesG(Div(1,4)), ConstE**(Div(3,32)-ConstCatalan/(4*Pi))/(ConstGlaisher**Div(9,8)*Gamma(Div(1,4))**Div(3,4)))))

make_entry(ID("dc507f"),
    Formula(Equal(BarnesG(Div(3,4)), (ConstE**(Div(3,32)+ConstCatalan/(4*Pi)) * Gamma(Div(1,4))**Div(1,4)) / (2**Div(1,8)*Pi**Div(1,4)*ConstGlaisher**Div(9,8)))))

make_entry(ID("90b367"),
    Formula(Equal(ComplexDerivative(BarnesG(z), For(z, 0)), 1)))

make_entry(ID("dbfd5b"),
    Formula(Equal(ComplexDerivative(BarnesG(z), For(z, 1)), (Log(2*Pi)-1)/2)))

make_entry(ID("a54fb0"),
    Formula(Equal(ComplexDerivative(BarnesG(z), For(z, 2)), (Log(2*Pi)-1)/2 - ConstGamma)))

make_entry(ID("f50c74"),
    Formula(Equal(ComplexDerivative(BarnesG(z), For(z, n)), Cases(
        Tuple(0, Less(n, 0)),
        Tuple(1, Equal(n, 0)),
        Tuple(Div(1,2)*(Log(2*Pi)-1), Equal(n, 1)),
        Tuple(BarnesG(n)*((Div(1,2)*Log(2*Pi)+(n-1)*(HarmonicNumber(n-2)-ConstGamma-1)+Div(1,2))), GreaterEqual(n, 2))))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("86b3ec"),
    Formula(Equal(BarnesG(z+1), Gamma(z) * BarnesG(z))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("5261e3"),
    Formula(Equal(LogBarnesG(z+1), LogGamma(z) + LogBarnesG(z))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("7a36e5"),
    Formula(Equal(BarnesG(z+n), Brackets(Product((z+k-1)**(n-k), For(k, 1, n))) * Gamma(z)**n * BarnesG(z))),
    Variables(z, n),
    Assumptions(And(Element(z, CC), NotElement(z, ZZLessEqual(0)), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("541e2e"),
    Formula(Equal(BarnesG(1-x), (-1)**(Floor((x-1)/2)+1) * BarnesG(1+x) * (Abs(Sin(Pi*x))/Pi)**x * Exp((1/(2*Pi)) * Im(PolyLog(2, Exp(2*Pi*ConstI*x)))))),
    Variables(x),
    Assumptions(And(Element(x, RR), NotElement(x, ZZLessEqual(-1)))),
    References("https://doi.org/10.1145/384101.384104"))

make_entry(ID("d1a0ec"),
    Formula(Equal(LogBarnesG(1-x), LogBarnesG(1+x) + x * Log(Abs(Sin(Pi*x))/Pi) + (1/(2*Pi)) * Im(PolyLog(2, Exp(2*Pi*ConstI*x)))
        + Where(Sign(x) * (n*(n+1)) * (Pi * ConstI / 2), Equal(n, Floor(x))))),
    Variables(x),
    Assumptions(And(Element(x, RR), NotElement(x, ZZ))))

make_entry(ID("b6017f"),
    Formula(Equal(LogBarnesG(1-z), LogBarnesG(1+z) - Log(2*Pi)*z + Integral(Pi*x*Cot(Pi*x), For(x, 0, z)))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, Union(OpenClosedInterval(-Infinity, -1), ClosedOpenInterval(1, Infinity))))))

make_entry(ID("23ed69"),
    Formula(Equal(LogBarnesG(1-z), LogBarnesG(1+z) - Log(2*Pi)*z + Cases(
        Tuple(Integral(Pi*x*Cot(Pi*x), For(x, 0, ConstI)) + Integral(Pi*x*Cot(Pi*x), For(x, ConstI, z)), Or(Less(-1, Re(z), 1), Greater(Im(z), 0), And(Equal(Im(z), 0), Less(Re(z), 1)))),
        Tuple(Integral(Pi*x*Cot(Pi*x), For(x, 0, -ConstI)) + Integral(Pi*x*Cot(Pi*x), For(x, -ConstI, z)), Or(Less(-1, Re(z), 1), Less(Im(z), 0), And(Equal(Im(z), 0), Greater(Re(z), -1)))))
    )),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, ZZ))))

make_entry(ID("82b410"),
    Formula(Equal(LogBarnesG(1-z), LogBarnesG(1+z) + Where(Cases(
        Tuple(F(z), Or(Less(0, Re(z), 1), Greater(Im(z), 0), And(Equal(Im(z), 0), Less(Re(z), 1)))),
        Tuple(-F(-z), Or(Less(-1, Re(z), 0), Less(Im(z), 0), And(Equal(Im(z), 0), Greater(Re(z), -1))))),
            Equal(F(z), ((Pi*ConstI)/2)*(z**2-z+Div(1,6)) - z*(LogGamma(z)+LogGamma(1-z)) - (ConstI/(2*Pi)) * PolyLog(2, Exp(2*Pi*ConstI*z)))),
    )),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, ZZ))))

make_entry(ID("ea26d4"),
    Formula(Equal(BarnesG(n*z), ConstE**((Log(ConstGlaisher)-Div(1,12))*(n**2-1))*n**(n**2*z**2/2-n*z+Div(5,12))*(2*Pi)**((n-1)*(1-n*z)/2) *
        Product(Product(BarnesG(z+(i+j)/n), For(j, 0, n-1)), For(i, 0, n-1)))),
    Variables(z, n),
    Assumptions(And(Element(z, CC), Element(n, ZZGreaterEqual(1)))),
    References("https://arxiv.org/abs/math/0308086"))

make_entry(ID("147db6"),
    Formula(Equal(BarnesG(Conjugate(z)), Conjugate(BarnesG(z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("6c6d3e"),
    Formula(Equal(LogBarnesG(Conjugate(z)), Cases(
        Tuple(LogBarnesG(z), Element(z, OpenClosedInterval(-Infinity, 0))),
        Tuple(Conjugate(LogBarnesG(z)), Otherwise)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("5babc2"),
    Formula(Equal(ComplexDerivative(BarnesG(z), For(z, z)), BarnesG(z) * ((z-1)*DigammaFunction(z) - z + (Log(2*Pi) + 1)/2))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("af31ae"),
    Formula(Equal(ComplexBranchDerivative(Brackets(LogBarnesG(z)), For(z, z)), (z-1)*DigammaFunction(z) - z + (Log(2*Pi) + 1)/2)),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("e05807"),
    Formula(Equal(LogBarnesG(z), (z-1)*LogGamma(z) - HurwitzZeta(-1,z,1) + ComplexDerivative(RiemannZeta(s), For(s,-1)))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("0ad263"),
    Formula(Equal(LogBarnesG(1+z), (Log(2*Pi)-1)/2 * z - (1+ConstGamma)/2 * z**2 + Sum((-1)**(n+1) * RiemannZeta(n-1) / n * z**n, For(n, 3, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Less(Abs(z), 1))))

make_entry(ID("54d4e2"),
    Formula(Equal(BarnesG(z+1), (2*Pi)**(z/2) * Exp(-((z+(ConstGamma+1)*z**2)/2)) * Product(Brackets((1+z/k)**k * Exp(z**2/(2*k)-z)), For(k, 1, Infinity)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("752bde"),
    SymbolDefinition(LogBarnesGRemainder, LogBarnesGRemainder(N, z), "Remainder term in asymptotic expansion of logarithmic Barnes G-function"))

make_entry(ID("6f8e14"),
    Formula(Equal(LogBarnesG(z+1), z**2/4 + z*LogGamma(z+1) - (z*(z+1)/2 + Div(1,12)) * Log(z) - Log(ConstGlaisher) + Sum(BernoulliB(2*n+2)/(2*n*(2*n+1)*(2*n+2)*z**(2*n)), For(n, 1, N-1))
        + LogBarnesGRemainder(N, z))),
    Variables(z, N),
    Assumptions(And(Element(z, CC), NotElement(z, OpenClosedInterval(-Infinity, 0)), Element(N, ZZGreaterEqual(1)))),
    References("https://dx.doi.org/10.1098/rspa.2014.0534"))

make_entry(ID("b16d00"),
    Formula(Equal(LogBarnesGRemainder(N, z),
        Integral(((t/2)*Coth(t/2) - Sum(BernoulliB(2*k) / Factorial(2*k) * t**(2*k), For(k, 0, N))) * (Exp(-(z*t))/t**3), For(t, 0, Infinity)))),
    Variables(z, N),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0), Element(N, ZZGreaterEqual(1)))),
    References("https://dx.doi.org/10.1098/rspa.2014.0534"))

make_entry(ID("092cee"),
    Formula(Equal(LogBarnesGRemainder(N, z),
        (1/z**(2*N)) * ((-1)**(N+1) / Pi) * Integral((t**(2*N-1)/(1+(t/z)**2)) * PolyLog(2, Exp(-(2*Pi*t))), For(t, 0, Infinity)))),
    Variables(z, N),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0), Element(N, ZZGreaterEqual(1)))),
    References("https://dx.doi.org/10.1098/rspa.2014.0534"))

make_entry(ID("645c98"),
    Formula(Equal(LogBarnesGRemainder(N, z),
        1/(2*N*(2*N+1)) * Integral(BernoulliPolynomial(2*N+1, t-Floor(t))/(t+z)**(2*N), For(t, 0, Infinity)))),
    Variables(z, N),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0), Element(N, ZZGreaterEqual(1)))),
    References("https://dx.doi.org/10.1098/rspa.2014.0534"))

make_entry(ID("1d4638"),
    Formula(LessEqual(Abs(LogBarnesGRemainder(N, z)),
        Abs(BernoulliB(2*N+2))/(2*N*(2*N+1)*(2*N+2)*Abs(z)**(2*N)) * Cases(Tuple(1, LessEqual(Abs(Arg(z)), Pi/4)), Tuple(Sec(Div(1,2)*Arg(z))**(2*N+1), Less(Abs(Arg(z)), Pi))))),
    Variables(z, N),
    Assumptions(And(Element(z, CC), NotElement(z, OpenClosedInterval(-Infinity, 0)), Element(N, ZZGreaterEqual(1)))),
    References("https://dx.doi.org/10.1098/rspa.2014.0534"))

make_entry(ID("8c96a5"),
    Formula(Equal(LogBarnesG(z+1), z*(1-z)/2 + z/2*Log(2*Pi) + z*LogGamma(z) - Integral(LogGamma(x), For(x, 0, z)))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, OpenClosedInterval(-Infinity, -1)))),
    References("https://arxiv.org/abs/math/0308086"))

make_entry(ID("95f771"),
    Formula(Equal(LogBarnesG(z+1), z*(1-z)/2 + z/2*Log(2*Pi) + Integral(x*DigammaFunction(x), For(x, 0, z)))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, OpenClosedInterval(-Infinity, -1)))),
    References("https://arxiv.org/abs/math/0308086"))

make_entry(ID("b64782"),
    Formula(Equal(LogBarnesG(z+1), z**2/4*(2*Log(z)-3)+z*Log(2*Pi)/2+Div(1,12)-Log(ConstGlaisher)-Integral(x*Log(x**2+z**2)/(Exp(2*Pi*x)-1), For(x, 0, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0))),
    References("https://arxiv.org/abs/math/0308086"))

make_entry(ID("6395ee"),
    Formula(Equal(LogBarnesG(z+1), z*LogGamma(z)+z**2/4-Log(z)/2*BernoulliPolynomial(2,z)-Log(ConstGlaisher)-Integral((Exp(-z*x)/x**2)*(1/(1-Exp(-x))-1/x-Div(1,2)-x/12), For(x, 0, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0))),
    References("https://arxiv.org/abs/math/0308086"))

make_entry(ID("4a3612"),
    Formula(Less(LogBarnesG(x+1), (x**2/2-Div(1,12))*Log(x) - 3*x**2/4 + (Log(2*Pi)/2)*x + Div(1,12) - Log(ConstGlaisher))),
    Variables(x),
    Assumptions(Element(x, OpenInterval(0, Infinity))),
    References("https://dx.doi.org/10.1098/rspa.2014.0534"))

make_entry(ID("3544a0"),
    Formula(Greater(LogBarnesG(x+1), (x**2/2-Div(1,12))*Log(x) - 3*x**2/4 + (Log(2*Pi)/2)*x + Div(1,12) - Log(ConstGlaisher) - 1/(240*x**2))),
    Variables(x),
    Assumptions(Element(x, OpenInterval(0, Infinity))),
    References("https://dx.doi.org/10.1098/rspa.2014.0534"))

make_entry(ID("7df1c4"),
    Formula(Greater(BarnesG(x), 0)),
    Variables(x),
    Assumptions(Element(x, OpenInterval(0, Infinity))))

make_entry(ID("1c770c"),
    Formula(Where(Implies(Greater(x, Subscript(x, 0)), Greater(RealDerivative(BarnesG(x), For(x, x, n)), 0)),
        Equal(Subscript(x, 0), Cases(
            Tuple(0, Equal(n, 0)),
            Tuple(Decimal("2.557664"), Equal(n, 1)),
            Tuple(Decimal("1.898850"), Equal(n, 2)),
            Tuple(Decimal("0.788740"), Equal(n, 3)))))),
    Variables(x, n),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(n, Set(0, 1, 2, 3)))))

make_entry(ID("306699"),
    Formula(Where(Implies(Greater(x, Subscript(x, 0)), Greater(RealDerivative(Brackets(LogBarnesG(x)), For(x, x, n)), 0)),
        Equal(Subscript(x, 0), Cases(
            Tuple(3, Equal(n, 0)),
            Tuple(Decimal("2.557664"), Equal(n, 1)),
            Tuple(Decimal("1.925864"), Equal(n, 2)),
            Tuple(0, Equal(n, 3)))))),
    Variables(x, n),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(n, Set(0, 1, 2, 3)))))

make_entry(ID("f4750b"),
    Formula(Equal(Det(HilbertMatrix(n)),
        BarnesG(n+1)**4 / BarnesG(2*n+1))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

def_Topic(
    Title("Bell numbers"),
    Section("Definitions"),
    Entries(
        "1706bb",
        "60dc3e",
    ),
    Section("Domain and codomain"),
    Entries(
        "16fe51",
    ),
    Section("Specific values"),
    Subsection("First cases as set partitions"),
    Entries(
        "4b4816",
        "534f7d",
        "3627de",
        "92cc17",
    ),
    Subsection("Tables"),
    Entries(
        "4c6267",
        "7466a2",
    ),
    Section("Infinite series representations"),
    Entries(
        "050c46",
    ),
    Section("Sum representations"),
    Entries(
        "948167",
        "4b65d0",
        "1026e3",
    ),
    Section("Generating functions"),
    Entries(
        "9d666f",
        "aab4e3",
    ),
    Section("Integral representations"),
    Entries(
        "f4e249",
        "a71381",
    ),
    Section("Asymptotics"),
    Entries(
        "343946",
        "589758",
    ),
    Section("Bounds and inequalities"),
    Subsection("Monotonicity and convexity"),
    Entries(
        "2e576e",
        "320dc9",
        "fb6ce2",
        "46bc62",
        "1e00d2",
        "d1438d",
    ),
    Subsection("Upper bounds"),
    Entries(
        "d1f218",
        "512beb",
    ),
    Subsection("Lower bounds"),
    Entries(
        "7e449a",
        "a747a4",
        "468def",
        "b29b24",
    ),
    Section("Divisibility properties"),
    Subsection("Touchard's congruence"),
    Entries(
        "60740b",
        "dd9d26",
        "b41c49",
    ),
    Subsection("Periodicity"),
    Entries(
        "050ee1",
        "a4d6fc",
        "b7e899",
    ),
    Subsection("Prime values"),
    Entries(
        "a1108d",
    ),
    Section("Matrix fomulas"),
    Entries(
        "b5a382",
        "dc6806",
    ),
    Section("Related topics"),
    Description("Restricted set partitions: ", TopicReference("Stirling numbers")),
    Description("Integer partitions: ", TopicReference("Partition function")),
)

make_entry(ID("1706bb"),
    SymbolDefinition(BellNumber, BellNumber(n), "Bell number"),
    Description(SourceForm(BellNumber(n)), ", rendered as", BellNumber(n),
        ", gives the ", n, ":th Bell number, counting the number of partitions of a set of size", n, "."),
    References("http://mathworld.wolfram.com/BellNumber.html",
        "https://en.wikipedia.org/wiki/Bell_number",
        SloaneA("A000110")))

make_entry(ID("16fe51"),
    Implies(Element(n, ZZGreaterEqual(0)), Element(BellNumber(n), ZZGreaterEqual(1))),
    Variables(n))

make_entry(ID("4b4816"),
    Equal(BellNumber(0), Cardinality(Set(
        Set(Set()))),
    1))

make_entry(ID("534f7d"),
    Equal(BellNumber(1), Cardinality(Set(
        Set(Set(1)))),
    1))

make_entry(ID("3627de"),
    Equal(BellNumber(2), Cardinality(Set(
        Set(Set(1), Set(2)),
        Set(Set(1, 2)))),
        2))

make_entry(ID("92cc17"),
    Equal(BellNumber(3), Cardinality(Set(
        Set(Set(1), Set(2), Set(3)),
        Set(Set(1), Set(2, 3)),
        Set(Set(2), Set(1, 3)),
        Set(Set(3), Set(1, 2)),
        Set(Set(1, 2, 3)))),
        5))

make_entry(ID("4c6267"),
    Description("Table of", BellNumber(n), "for", LessEqual(0, n, 40)),
    Table(
      Var(n),
      TableValueHeadings(n, BellNumber(n)),
      TableSplit(2),
      List(
    Tuple(0, 1),
    Tuple(1, 1),
    Tuple(2, 2),
    Tuple(3, 5),
    Tuple(4, 15),
    Tuple(5, 52),
    Tuple(6, 203),
    Tuple(7, 877),
    Tuple(8, 4140),
    Tuple(9, 21147),
    Tuple(10, 115975),
    Tuple(11, 678570),
    Tuple(12, 4213597),
    Tuple(13, 27644437),
    Tuple(14, 190899322),
    Tuple(15, 1382958545),
    Tuple(16, 10480142147),
    Tuple(17, 82864869804),
    Tuple(18, 682076806159),
    Tuple(19, 5832742205057),
    Tuple(20, 51724158235372),
    Tuple(21, 474869816156751),
    Tuple(22, 4506715738447323),
    Tuple(23, 44152005855084346),
    Tuple(24, 445958869294805289),
    Tuple(25, 4638590332229999353),
    Tuple(26, 49631246523618756274),
    Tuple(27, 545717047936059989389),
    Tuple(28, 6160539404599934652455),
    Tuple(29, 71339801938860275191172),
    Tuple(30, 846749014511809332450147),
    Tuple(31, 10293358946226376485095653),
    Tuple(32, 128064670049908713818925644),
    Tuple(33, 1629595892846007606764728147),
    Tuple(34, 21195039388640360462388656799),
    Tuple(35, 281600203019560266563340426570),
    Tuple(36, 3819714729894818339975525681317),
    Tuple(37, 52868366208550447901945575624941),
    Tuple(38, 746289892095625330523099540639146),
    Tuple(39, 10738823330774692832768857986425209),
    Tuple(40, 157450588391204931289324344702531067),
    )))

make_entry(ID("7466a2"),
    Description("Table of", BellNumber(10**n), "to 50 digits for", LessEqual(0, n, 20)),
    Table(
      Var(n),
      TableValueHeadings(n, NearestDecimal(BellNumber(10**n), 50)),
      TableSplit(1),
      List(
        Tuple(0, Decimal("1")),
        Tuple(1, Decimal("115975")),
        Tuple(2, Decimal("4.7585391276764833658790768841387207826363669686826e+115")),
        Tuple(3, Decimal("2.9899013356824084214804223538976464839473928098212e+1927")),
        Tuple(4, Decimal("1.5921722925574210311304813561932450033887865728335e+27664")),
        Tuple(5, Decimal("1.0433942425429389984540246838845160786245861774676e+364471")),
        Tuple(6, Decimal("6.9407979938401739982227098407865685636554898570286e+4547585")),
        Tuple(7, Decimal("4.3145155655649390291431304090943630466481496281332e+54670462")),
        Tuple(8, Decimal("1.0661323224103766871234871127158157404496071219044e+639838112")),
        Tuple(9, Decimal("2.6930773812723249433116475845718644555421493748165e+7338610158")),
        Tuple(10, Decimal("5.1453972928520420466420608273749029965573268638547e+82857366966")),
        Tuple(11, Decimal("2.1856659331923642401145024809343148851214345631527e+923836121336")),
        Tuple(12, Decimal("2.3531206591649838226542749070017497015282621676683e+10195466552696")),
        Tuple(13, Decimal("5.8027995692250857595662702057260821919793528709088e+111562912181760")),
        Tuple(14, Decimal("4.3473012694977341957607161339632765549165135069010e+1212025087283000")),
        Tuple(15, Decimal("1.2100916983919003930868324120105540724015107284657e+13086887678097716")),
        Tuple(16, Decimal("1.1988608581471804602537538050476211671930061609078e+140558364519453118")),
        Tuple(17, Decimal("2.9133991743205108132890536872295316466697644906027e+1502680138594030689")),
        Tuple(18, Decimal("1.1492776754825558262089653108689792631425178848431e+15999539613219703746")),
        Tuple(19, Decimal("3.5599898595325449556740567588576528872183367386397e+169738493504812320257")),
        Tuple(20, Decimal("5.3827011317628161073953431454940317253902192049701e+1794956117137290721328")))))

make_entry(ID("050c46"),
    Formula(Equal(BellNumber(n), (1/ConstE) * Sum(k**n / Factorial(k), For(k, 0, Infinity)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("948167"),
    Formula(Equal(BellNumber(n), Sum(StirlingS2(n,k), For(k, 0, n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("4b65d0"),
    Formula(Equal(BellNumber(n), Sum(k**n / Factorial(k) * Sum((-1)**j / Factorial(j), For(j, 0, n-k)), For(k, 1, n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("1026e3"),
    Formula(Equal(BellNumber(n+1), Sum(Binomial(n, k) * BellNumber(k), For(k, 0, n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("9d666f"),
    Formula(Equal(Sum(BellNumber(n) * x**n, For(n, 0, Infinity)), Sum(x**k/Product(Parentheses(1-j*x), For(j, 1, k)), For(k, 0, Infinity)))),
    Variables(x),
    Assumptions(Equal(x, 0)))

make_entry(ID("aab4e3"),
    Formula(Equal(Sum(BellNumber(n) / Factorial(n) * x**n, For(n, 0, Infinity)), Exp(Exp(x)-1))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("f4e249"),
    Formula(Equal(BellNumber(n), (2*Factorial(n))/(Pi*ConstE) * Im(Integral(ConstE**(ConstE**(ConstE**(ConstI*x))) * Sin(n*x), For(x, 0, Pi))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))),
    References("https://arxiv.org/abs/0708.3301"))

make_entry(ID("a71381"),
    Formula(Equal(BellNumber(n), (2*Factorial(n))/(Pi*ConstE) *
        Integral(ConstE**(ConstE**(Cos(x))*Cos(Sin(x))) * Sin(ConstE**(Cos(x))*Sin(Sin(x))) * Sin(n*x), For(x, 0, Pi)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))),
    References("https://arxiv.org/abs/0708.3301"))

make_entry(ID("343946"),
    Formula(AsymptoticTo(Log(BellNumber(n))/n, Log(n) - Log(Log(n)) - 1 + Log(Log(n))/Log(n) + 1/Log(n) + Div(1,2) * (Log(Log(n))/Log(n))**2, n, Infinity)))

make_entry(ID("589758"),
    Formula(AsymptoticTo(BellNumber(n), n**(-Div(1,2)) * (n/LambertW(n))**(n+Div(1,2)) * Exp(n/LambertW(n)-n-1), n, Infinity)))

make_entry(ID("2e576e"),
    Formula(GreaterEqual(BellNumber(n+1), BellNumber(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("320dc9"),
    Formula(Greater(BellNumber(n+1), BellNumber(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("fb6ce2"),
    Formula(Less(BellNumber(n+1), n * BellNumber(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(4))))

make_entry(ID("46bc62"),
    Formula(GreaterEqual(BellNumber(n+1), 2 * BellNumber(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("d1f218"),
    Formula(LessEqual(BellNumber(n), Factorial(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("512beb"),
    Formula(LessEqual(BellNumber(n), ((Decimal("0.792")*n)/Log(n+1))**n)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("7e449a"),
    Formula(GreaterEqual(BellNumber(n), Exp(n-2))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("a747a4"),
    Formula(GreaterEqual(BellNumber(n), k**(n-k))),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(k, ZZGreaterEqual(0)))),
    References("https://cs.stackexchange.com/q/93003"))

make_entry(ID("468def"),
    Formula(GreaterEqual(BellNumber(n), (n/(ConstE*Log(n)))**n)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(2))))

make_entry(ID("b29b24"),
    Formula(GreaterEqual(BellNumber(n), PartitionsP(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("1e00d2"),
    Formula(LessEqual(BellNumber(n)**2, BellNumber(n-1)*BellNumber(n+1), (1+1/n) * BellNumber(n)**2)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))),
    References("https://arxiv.org/abs/math/0104137"))

make_entry(ID("d1438d"),
    Formula(LessEqual(BellNumber(n)*BellNumber(m), BellNumber(n+m), Binomial(n+m,n)*BellNumber(n)*BellNumber(m))),
    Variables(n, m),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(m, ZZGreaterEqual(0)))),
    References("https://arxiv.org/abs/math/0104137"))

make_entry(ID("60740b"),
    Formula(CongruentMod(BellNumber(p), 2, p)),
    Variables(p),
    Assumptions(Element(p, PP)))

make_entry(ID("dd9d26"),
    Formula(CongruentMod(BellNumber(n+p), BellNumber(n) + BellNumber(n+1), p)),
    Variables(n, p),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(p, PP))))

make_entry(ID("b41c49"),
    Formula(CongruentMod(BellNumber(n+p**m), m*BellNumber(n) + BellNumber(n+1), p)),
    Variables(n, p, m),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(p, PP), Element(m, ZZGreaterEqual(1)))))

make_entry(ID("050ee1"),
    Formula(CongruentMod(BellNumber(n), Cases(Tuple(0, CongruentMod(n, 2, 3)), Tuple(1, Otherwise)), 2)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("a4d6fc"),
    Formula(Where(CongruentMod(BellNumber(n+a), BellNumber(n), m), Equal(a,
        Cases(Tuple(3, Equal(m, 2)), Tuple(13, Equal(m, 3)), Tuple(12, Equal(m, 4)), Tuple(781, Equal(m, 5)), Tuple(39, Equal(m, 6)))))),
    Variables(n, m),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(m, Range(2, 6)))))

make_entry(ID("b7e899"),
    Formula(Where(CongruentMod(BellNumber(n+a), BellNumber(n), m), Equal(a, SloaneA("A054767", m)))),
    Variables(n, m),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(m, ZZGreaterEqual(1)))))

make_entry(ID("a1108d"),
    Formula(Implies(Element(n, Set(2, 3, 7, 13, 42, 55, 2841)), Element(BellNumber(n), PP))),
    Variables(n),
    References(SloaneA("A051130")))

make_entry(ID("b5a382"),
    Formula(Equal(BellNumber(n), Item(Exp(Matrix(Binomial(i,j), For(i, 0, N), For(j, 0, N)) - IdentityMatrix(N+1)), Tuple(n+1, 1)))),
    Variables(N, n),
    Assumptions(And(Element(N, ZZGreaterEqual(0)), Element(n, Range(0, N)))))

make_entry(ID("dc6806"),
    Formula(Equal(Det(Matrix(BellNumber(i+j), For(i, 0, n), For(j, 0, n))), Product(Factorial(k), For(k, 1, n)), BarnesG(n+2))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

def_Topic(
    Title("Bernoulli numbers and polynomials"),
    Entries(
        "ac8eca",
        "1f88a4",
        "b6111c",
    ),
    Section("Tables"),
    Entries(
        "aed6bd",
        "588889",
    ),
    Section("Generating functions"),
    Entries(
        "522b04",
        "f79ff0",
    ),
    Section("Sum representations"),
    Entries(
        "555e10",
    ),
    Section("Representations by special functions"),
    Entries(
        "14ecc4",
        "4228cd",       ),
    Section("Specific values"),
    Entries(
        "a98234",
        "d10873",
        "a1d2d7",
        "829185",
        "03ee0b",
    ),
    Section("Functional equations"),
    Entries(
        "8b4f7f",
        "c2dcfa",
        "f80439",
    ),
    Section("Derivatives and integrals"),
    Entries(
        "7adfd6",
        "05202b",
        "e89eb5",
    ),
    Section("Summation"),
    Entries(
        "4aab8a",
    ),
    Section("Denominators"),
    Entries(
        "ff190c",
        "c33e2b",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "0f02a5",
        "3a1316",
        "1d2f4a",
        "69ca86",
        "292d70",
        "4246ae",
    ),
)

make_entry(ID("ac8eca"),
    SymbolDefinition(BernoulliB, BernoulliB(n), "Bernoulli number"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(Element(n, ZZGreaterEqual(0)), Element(BernoulliB(n), QQ)),
      )))

make_entry(ID("1f88a4"),
    SymbolDefinition(BernoulliPolynomial, BernoulliPolynomial(n, z), "Bernoulli polynomial"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(And(Element(n, ZZGreaterEqual(0)), Element(z, RR)), Element(BernoulliPolynomial(n, z), RR)),
        Tuple(And(Element(n, ZZGreaterEqual(0)), Element(z, CC)), Element(BernoulliPolynomial(n, z), CC)),
        Tuple(And(Element(n, ZZGreaterEqual(0)), Element(z, R), Element(R, Rings), SubsetEqual(QQ, R)), Element(BernoulliPolynomial(n, z), R)),
      )))

make_entry(ID("aed6bd"),
    Description("Table of", BernoulliB(n), "for", LessEqual(0, n, 50)),
    Table(
      Var(n),
      TableValueHeadings(n, BernoulliB(n), NearestDecimal(BernoulliB(n), 30)),
      TableSplit(1),
      List(
Tuple(0, 1, Decimal("1.00000000000000000000000000000")),
Tuple(1, -Div(1,2), Decimal("-0.500000000000000000000000000000")),
Tuple(2, Div(1,6), Decimal("0.166666666666666666666666666667")),
Tuple(3, 0, Decimal("0")),
Tuple(4, -Div(1,30), Decimal("-0.0333333333333333333333333333333")),
Tuple(5, 0, Decimal("0")),
Tuple(6, Div(1,42), Decimal("0.0238095238095238095238095238095")),
Tuple(7, 0, Decimal("0")),
Tuple(8, -Div(1,30), Decimal("-0.0333333333333333333333333333333")),
Tuple(9, 0, Decimal("0")),
Tuple(10, Div(5,66), Decimal("0.0757575757575757575757575757576")),
Tuple(11, 0, Decimal("0")),
Tuple(12, -Div(691,2730), Decimal("-0.253113553113553113553113553114")),
Tuple(13, 0, Decimal("0")),
Tuple(14, Div(7,6), Decimal("1.16666666666666666666666666667")),
Tuple(15, 0, Decimal("0")),
Tuple(16, -Div(3617,510), Decimal("-7.09215686274509803921568627451")),
Tuple(17, 0, Decimal("0")),
Tuple(18, Div(43867,798), Decimal("54.9711779448621553884711779449")),
Tuple(19, 0, Decimal("0")),
Tuple(20, -Div(174611,330), Decimal("-529.124242424242424242424242424")),
Tuple(21, 0, Decimal("0")),
Tuple(22, Div(854513,138), Decimal("6192.12318840579710144927536232")),
Tuple(23, 0, Decimal("0")),
Tuple(24, -Div(236364091,2730), Decimal("-86580.2531135531135531135531136")),
Tuple(25, 0, Decimal("0")),
Tuple(26, Div(8553103,6), Decimal("1425517.16666666666666666666667")),
Tuple(27, 0, Decimal("0")),
Tuple(28, -Div(23749461029,870), Decimal("-27298231.0678160919540229885057")),
Tuple(29, 0, Decimal("0")),
Tuple(30, Div(8615841276005,14322), Decimal("601580873.900642368384303868175")),
Tuple(31, 0, Decimal("0")),
Tuple(32, -Div(7709321041217,510), Decimal("-15116315767.0921568627450980392")),
Tuple(33, 0, Decimal("0")),
Tuple(34, Div(2577687858367,6), Decimal("429614643061.166666666666666667")),
Tuple(35, 0, Decimal("0")),
Tuple(36, -Div(26315271553053477373,1919190), Decimal("-13711655205088.3327721590879486")),
Tuple(37, 0, Decimal("0")),
Tuple(38, Div(2929993913841559,6), Decimal("488332318973593.166666666666667")),
Tuple(39, 0, Decimal("0")),
Tuple(40, -Div(261082718496449122051,13530), Decimal("-19296579341940068.1486326681449")),
Tuple(41, 0, Decimal("0")),
Tuple(42, Div(1520097643918070802691,1806), Decimal("841693047573682615.000553709856")),
Tuple(43, 0, Decimal("0")),
Tuple(44, -Div(27833269579301024235023,690), Decimal("-40338071854059455413.0768115942")),
Tuple(45, 0, Decimal("0")),
Tuple(46, Div(596451111593912163277961,282), Decimal("2115074863808199160560.14539007")),
Tuple(47, 0, Decimal("0")),
Tuple(48, -Div(5609403368997817686249127547,46410), Decimal("-120866265222965259346027.311937")),
Tuple(49, 0, Decimal("0")),
Tuple(50, Div(495057205241079648212477525,66), Decimal("7500866746076964366855720.07576")))))

make_entry(ID("588889"),
    Description("Table of", BernoulliPolynomial(n,x), "for", LessEqual(0, n, 10)),
    Table(TableRelation(Tuple(n, p), Equal(BernoulliPolynomial(n,x), p)),
      TableHeadings(n, BernoulliPolynomial(n,x)), TableSplit(1),
      List(
Tuple(0, 1),
Tuple(1, x - Div(1,2)),
Tuple(2, x**2 - x + Div(1,6)),
Tuple(3, x**3 - Div(3,2)*x**2 + Div(1,2)*x),
Tuple(4, x**4 - 2*x**3 + x**2 - Div(1,30)),
Tuple(5, x**5 - Div(5,2)*x**4 + Div(5,3)*x**3 - Div(1,6)*x),
Tuple(6, x**6 - 3*x**5 + Div(5,2)*x**4 - Div(1,2)*x**2 + Div(1,42)),
Tuple(7, x**7 - Div(7,2)*x**6 + Div(7,2)*x**5 - Div(7,6)*x**3 + Div(1,6)*x),
Tuple(8, x**8 - 4*x**7 + Div(14,3)*x**6 - Div(7,3)*x**4 + Div(2,3)*x**2 - Div(1,30)),
Tuple(9, x**9 - Div(9,2)*x**8 + 6*x**7 - Div(21,5)*x**5 + 2*x**3 - Div(3,10)*x),
Tuple(10, x**10 - 5*x**9 + Div(15,2)*x**8 - 7*x**6 + 5*x**4 - Div(3,2)*x**2 + Div(5,66)))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("522b04"),
    Formula(Equal(z/(Exp(z)-1),
        Sum(BernoulliB(n) * (z**n / Factorial(n)), For(n, 0, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Less(Abs(z), 2 * Pi), NotEqual(z, 0))))

make_entry(ID("f79ff0"),
    Formula(Equal(z*Exp(x*z)/(Exp(z)-1),
        Sum(BernoulliPolynomial(n,x) * (z**n / Factorial(n)), For(n, 0, Infinity)))),
    Variables(z, x),
    Assumptions(And(Element(x, CC), Element(z, CC), Less(Abs(z), 2 * Pi), NotEqual(z, 0))))

make_entry(ID("555e10"),
    Formula(Equal(BernoulliPolynomial(n,x), Sum(Binomial(n,k) * BernoulliB(n-k) * x**k, For(k, 0, n)))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(x, CC))))

make_entry(ID("14ecc4"),
    Formula(Equal(BernoulliB(2*n), (-1)**(n+1) * (2 * Factorial(2*n) * RiemannZeta(2*n) / (2 * Pi)**(2*n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("a98234"),
    Formula(Equal(BernoulliB(2*n+3), 0)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("d10873"),
    Formula(Greater((-1)**n * BernoulliB(2*n+2), 0)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("a1d2d7"),
    Formula(Equal(BernoulliPolynomial(n, 0), BernoulliB(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("829185"),
    Formula(Equal(BernoulliPolynomial(n, 1), (-1)**n * BernoulliB(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("03ee0b"),
    Formula(Equal(BernoulliPolynomial(n, Div(1,2)), (2**(1-n)-1) * BernoulliB(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("8b4f7f"),
    Formula(Equal(BernoulliPolynomial(n, x+1), BernoulliPolynomial(n, x) + n * x**(n-1))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(x, CC))))

make_entry(ID("c2dcfa"),
    Formula(Equal(BernoulliPolynomial(n, 1-x), (-1)**n * BernoulliPolynomial(n, x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(x, CC))))

make_entry(ID("f80439"),
    Formula(Equal(BernoulliPolynomial(n, -x), (-1)**n * (BernoulliPolynomial(n, x) + n * x**(n-1)))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(x, CC))))

make_entry(ID("7adfd6"),
    Formula(Equal(Integral(BernoulliPolynomial(n, t), For(t, a, b)), (BernoulliPolynomial(n+1,b) - BernoulliPolynomial(n+1,a)) / (n+1))),
    Variables(n, a, b),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(a, CC), Element(b, CC))))

make_entry(ID("05202b"),
    Formula(Equal(Integral(BernoulliPolynomial(n, t), For(t, z, z+1)), z**n)),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, CC))))

make_entry(ID("e89eb5"),
    Formula(Equal(ComplexDerivative(BernoulliPolynomial(n, x), For(x, x, 1)), n * BernoulliPolynomial(n-1, x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(x, CC))))

make_entry(ID("4aab8a"),
    Formula(Equal(Sum(k**n, For(k, 1, m)), (BernoulliPolynomial(n+1, m+1) - BernoulliB(m+1)) / (m+1))),
    Variables(n, m),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(m, ZZGreaterEqual(0)))))

make_entry(ID("0f02a5"),
    Formula(Less(Abs(BernoulliB(2*n)), (1 + 1/n) * (2 * Factorial(2*n) / ((2*Pi)**(2*n))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("3a1316"),
    Formula(Less(Abs(BernoulliB(2*n)), (1 + 1/n) * 4 * Sqrt(Pi * n) * (n / (Pi * ConstE))**(2*n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("1d2f4a"),
    Formula(Greater(Abs(BernoulliB(2*n)), 2 * Factorial(2*n) / (2*Pi)**(2*n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("69ca86"),
    Formula(Greater(Abs(BernoulliB(2*n)), 4 * Sqrt(Pi * n) * (n / (Pi * ConstE))**(2*n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("292d70"),
    Formula(LessEqual(Abs(BernoulliPolynomial(2*n, x)), Abs(BernoulliB(2*n)))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(x, ClosedInterval(0, 1)))))

make_entry(ID("4246ae"),
    Formula(Less(Abs(BernoulliPolynomial(2*n, x)), Abs(BernoulliB(2*n)))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(x, OpenInterval(0, 1)))))

make_entry(ID("ff190c"),
    Formula(Element(Parentheses(BernoulliB(2*n) + PrimeSum(1/p, For(p), Divides(Parentheses(p-1), 2*n))), ZZ)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("c33e2b"),
    Formula(Element(Parentheses(BernoulliB(2*n) * PrimeProduct(1/p, For(p), Divides(Parentheses(p-1), 2*n))), ZZ)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

def_Topic(
    Title("Bessel functions"),
    Entries(
        "b4165c",
        "5bb42e",
        "8ac81d",
        "ff93d0",
    ),
    Section("Differential equations"),
    Entries(
        "ad9caa",
        "62f23c",
        "95e561",
        "fd9add",
    ),
    Section("Derivatives and recurrence relations"),
    SeeTopics("Recurrence relations for Bessel functions"),
    Entries(
        "d56914",
        "b6d600",
        "4fb391",
        "9d98f8",
        "5aceb9",
        "40aeb6",
        "58d91f",
        "a0ff0b",
    ),
    Section("Hypergeometric representations"),
    SeeTopics("Hypergeometric representations of Bessel functions"),
    Entries(
        "ecd36f",
        "81eec6",
        "7efe21",
    ),
    Section("Connection formulas"),
    Entries(
        "54bce2",
        "afbd22",
        "86bc7d",
        "15bbb1",
        "2a4195",
        "d5b7e8",
    ),
    Section("Specific values"),
    SeeTopics("Specific values of Bessel functions"),
    Entries(
        "121b21",
        "d1f5c5",
    ),
    Section("Hankel functions"),
    Entries(
        "24d383",
        "d154dd",
        "6a6a09",
        "1dce21",
    ),
    Section("Integral representations"),
    Entries(
        "99c077",
        "cac83e",
        "7ae3ed",
        "c29d6f",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "3bffa9",
        "e7b5be",
        "7f3485",
        "0836b4",
        "cc4572",
    ),
)

def_Topic(
    Title("Recurrence relations for Bessel functions"),
    SeeTopics("Bessel functions"),
    Section("Consecutive orders"),
    Entries(
        "d56914",
        "b6d600",
        "4fb391",
        "9d98f8",
    ),
    Section("Derivatives in terms of the direct functions"),
    Entries(
        "f1afc0",
        "8b6264",
        "c0247f",
        "81ffcd",
        "5aceb9",
        "40aeb6",
        "58d91f",
        "a0ff0b",
        "2488bb",
        "68cc2f",
        "e284d7",
        "807f3f",
    ),
    Section("Consecutive derivatives"),
    Entries(
        "15ac84",
        "f303c9",
        "9b2f38",
        "e85dee",
        "e233b0",
        "7377c8",
    ),
)

def_Topic(
    Title("Hypergeometric representations of Bessel functions"),
    SeeTopics("Bessel functions", "Confluent hypergeometric functions"),
    Entries(
        "ecd36f",
        "81eec6",
        "b049dc",
        "7efe21",
        "98703d",
        "9ad254",
        "32e162",
        "127f05",
    ),
)

make_entry(ID("b4165c"),
    SymbolDefinition(BesselJ, BesselJ(nu, z), "Bessel function of the first kind"),
    Description(SourceForm(BesselJ(nu,z)), ", rendered as", BesselJ(nu,z), ", denotes the Bessel function of the first kind. "),
    Description("The input", nu, "is called the order. The input", z, "is called the argument."),
    Description("Called with three arguments, ", SourceForm(BesselJ(nu,z,r)), ", rendered as",
        BesselJ(nu,z,1), ", ",
        BesselJ(nu,z,2), ", ",
        BesselJ(nu,z,3), " (", LessEqual(1, r, 3), "), or",
        BesselJ(nu,z,r), ", represents the order", r, "derivative of the Bessel function with respect to the argument", z, "."),
    Description("The following table lists conditions such that", SourceForm(BesselJ(nu, z)), "or", SourceForm(BesselJ(nu, z, r)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(And(Element(nu, ZZ), Element(z, RR)), Element(BesselJ(nu, z), RR)),
        Tuple(And(Element(nu, RR), Element(z, OpenInterval(0, Infinity))), Element(BesselJ(nu, z), RR)),
        Tuple(And(Element(nu, ZZ), Element(z, CC)), Element(BesselJ(nu, z), CC)),
        Tuple(And(Element(nu, CC), Element(z, SetMinus(CC, Set(0)))), Element(BesselJ(nu, z), CC)),
        Tuple(And(Element(nu, ClosedOpenInterval(0, Infinity)), Element(z, CC)), Element(BesselJ(nu, z), CC)),
        Tuple(And(Element(nu, ZZ), Element(z, RR), Element(r, ZZGreaterEqual(0))), Element(BesselJ(nu, z, r), RR)),
        Tuple(And(Element(nu, RR), Element(z, OpenInterval(0, Infinity)), Element(r, ZZGreaterEqual(0))), Element(BesselJ(nu, z, r), RR)),
        Tuple(And(Element(nu, ZZ), Element(z, CC), Element(r, ZZGreaterEqual(0))), Element(BesselJ(nu, z, r), CC)),
        Tuple(And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))), Element(r, ZZGreaterEqual(0))), Element(BesselJ(nu, z, r), CC)),
      )),
    )

make_entry(ID("5bb42e"),
    SymbolDefinition(BesselY, BesselY(nu, z), "Bessel function of the second kind"),
    Description(SourceForm(BesselJ(nu,z)), ", rendered as", BesselY(nu,z), ", denotes the Bessel function of the second kind. "),
    Description("The input", nu, "is called the order. The input", z, "is called the argument."),
    Description("Called with three arguments, ", SourceForm(BesselY(nu,z,r)), ", rendered as",
        BesselY(nu,z,1), ", ",
        BesselY(nu,z,2), ", ",
        BesselY(nu,z,3), " (", LessEqual(1, r, 3), "), or",
        BesselY(nu,z,r), ", represents the order", r, "derivative of the Bessel function with respect to the argument", z, "."),
    Description("The following table lists conditions such that", SourceForm(BesselY(nu, z)), "or", SourceForm(BesselY(nu, z, r)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(And(Element(nu, RR), Element(z, OpenInterval(0, Infinity))), Element(BesselY(nu, z), RR)),
        Tuple(And(Element(nu, SetMinus(CC, Set(0))), Element(z, CC)), Element(BesselY(nu, z), CC)),
        Tuple(And(Element(nu, RR), Element(z, OpenInterval(0, Infinity)), Element(r, ZZGreaterEqual(0))), Element(BesselY(nu, z, r), RR)),
        Tuple(And(Element(nu, SetMinus(CC, Set(0))), Element(z, CC), Element(r, ZZGreaterEqual(0))), Element(BesselY(nu, z, r), CC)),
      )),
    )

make_entry(ID("8ac81d"),
    SymbolDefinition(BesselI, BesselI(nu, z), "Modified Bessel function of the first kind"),
    Description(SourceForm(BesselI(nu,z)), ", rendered as", BesselI(nu,z), ", denotes the modified Bessel function of the first kind. "),
    Description("The input", nu, "is called the order. The input", z, "is called the argument."),
    Description("Called with three arguments, ", SourceForm(BesselI(nu,z,r)), ", rendered as",
        BesselI(nu,z,1), ", ",
        BesselI(nu,z,2), ", ",
        BesselI(nu,z,3), " (", LessEqual(1, r, 3), "), or",
        BesselI(nu,z,r), ", represents the order", r, "derivative of the Bessel function with respect to the argument", z, "."),
    Description("The following table lists conditions such that", SourceForm(BesselI(nu, z)), "or", SourceForm(BesselI(nu, z, r)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(And(Element(nu, ZZ), Element(z, RR)), Element(BesselI(nu, z), RR)),
        Tuple(And(Element(nu, RR), Element(z, OpenInterval(0, Infinity))), Element(BesselI(nu, z), RR)),
        Tuple(And(Element(nu, ZZ), Element(z, CC)), Element(BesselI(nu, z), CC)),
        Tuple(And(Element(nu, CC), Element(z, SetMinus(CC, Set(0)))), Element(BesselI(nu, z), CC)),
        Tuple(And(Element(nu, ZZ), Element(z, RR), Element(r, ZZGreaterEqual(0))), Element(BesselI(nu, z, r), RR)),
        Tuple(And(Element(nu, RR), Element(z, OpenInterval(0, Infinity)), Element(r, ZZGreaterEqual(0))), Element(BesselI(nu, z, r), RR)),
        Tuple(And(Element(nu, ZZ), Element(z, CC), Element(r, ZZGreaterEqual(0))), Element(BesselI(nu, z, r), CC)),
        Tuple(And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))), Element(r, ZZGreaterEqual(0))), Element(BesselI(nu, z, r), CC)),
      )),
    )

make_entry(ID("ff93d0"),
    SymbolDefinition(BesselK, BesselK(nu, z), "Modified Bessel function of the second kind"),
    Description(SourceForm(BesselK(nu,z)), ", rendered as", BesselK(nu,z), ", denotes the modified Bessel function of the second kind. "),
    Description("The input", nu, "is called the order. The input", z, "is called the argument."),
    Description("Called with three arguments, ", SourceForm(BesselK(nu,z,r)), ", rendered as",
        BesselK(nu,z,1), ", ",
        BesselK(nu,z,2), ", ",
        BesselK(nu,z,3), " (", LessEqual(1, r, 3), "), or",
        BesselK(nu,z,r), ", represents the order", r, "derivative of the Bessel function with respect to the argument", z, "."),
    Description("The following table lists conditions such that", SourceForm(BesselK(nu, z)), "or", SourceForm(BesselK(nu, z, r)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(And(Element(nu, RR), Element(z, OpenInterval(0, Infinity))), Element(BesselK(nu, z), RR)),
        Tuple(And(Element(nu, SetMinus(CC, Set(0))), Element(z, CC)), Element(BesselK(nu, z), CC)),
        Tuple(And(Element(nu, RR), Element(z, OpenInterval(0, Infinity)), Element(r, ZZGreaterEqual(0))), Element(BesselK(nu, z, r), RR)),
        Tuple(And(Element(nu, SetMinus(CC, Set(0))), Element(z, CC), Element(r, ZZGreaterEqual(0))), Element(BesselK(nu, z, r), CC)),
      )),
    )

make_entry(ID("ad9caa"),
    Formula(Equal(z**2 * BesselJ(nu,z,2) + z * BesselJ(nu,z,1) + (z**2 - nu**2) * BesselJ(nu,z), 0)),
    Variables(nu,z),
    Assumptions(
        And(Element(nu, ZZ), Element(z, CC)),
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("62f23c"),
    Formula(Equal(z**2 * BesselY(nu,z,2) + z * BesselY(nu,z,1) + (z**2 - nu**2) * BesselY(nu,z), 0)),
    Variables(nu,z),
    Assumptions(
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("95e561"),
    Formula(Equal(z**2 * BesselI(nu,z,2) + z * BesselI(nu,z,1) - (z**2 + nu**2) * BesselI(nu,z), 0)),
    Variables(nu,z),
    Assumptions(
        And(Element(nu, ZZ), Element(z, CC)),
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("fd9add"),
    Formula(Equal(z**2 * BesselK(nu,z,2) + z * BesselK(nu,z,1) - (z**2 + nu**2) * BesselK(nu,z), 0)),
    Variables(nu,z),
    Assumptions(
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("f1afc0"),
    Formula(Equal(BesselJ(0,z,1), -BesselJ(1,z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("8b6264"),
    Formula(Equal(BesselY(0,z,1), -BesselY(1,z))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("5aceb9"),
    Formula(Equal(BesselJ(nu,z,1), (BesselJ(nu-1,z) - BesselJ(nu+1,z))/2)),
    Variables(nu,z),
    Assumptions(
        And(Element(nu, ZZ), Element(z, CC)),
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("40aeb6"),
    Formula(Equal(BesselY(nu,z,1), (BesselY(nu-1,z) - BesselY(nu+1,z))/2)),
    Variables(nu,z),
    Assumptions(
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("2488bb"),
    Formula(Equal(BesselJ(nu,z,r), Div(1,2**r) * Sum((-1)**k * Binomial(r,k) * BesselJ(nu+2*k-r,z), For(k, 0, r)))),
    Variables(nu,z,r),
    Assumptions(
        And(Element(nu, ZZ), Element(z, CC), Element(r, ZZGreaterEqual(0))),
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))), Element(r, ZZGreaterEqual(0))),
    ))

make_entry(ID("68cc2f"),
    Formula(Equal(BesselY(nu,z,r), Div(1,2**r) * Sum((-1)**k * Binomial(r,k) * BesselY(nu+2*k-r,z), For(k, 0, r)))),
    Variables(nu,z,r),
    Assumptions(
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))), Element(r, ZZGreaterEqual(0))),
    ))

make_entry(ID("d56914"),
    Formula(Equal(BesselJ(nu,z), (z/(2*nu))*(BesselJ(nu-1,z) + BesselJ(nu+1,z)))),
    Variables(nu,z),
    Assumptions(
        And(Element(nu, SetMinus(ZZ, Set(0))), Element(z, CC)),
        And(Element(nu, SetMinus(CC, Set(0))), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("b6d600"),
    Formula(Equal(BesselY(nu,z), (z/(2*nu))*(BesselY(nu-1,z) + BesselY(nu+1,z)))),
    Variables(nu,z),
    Assumptions(
        And(Element(nu, SetMinus(ZZ, Set(0))), Element(z, CC)),
        And(Element(nu, SetMinus(CC, Set(0))), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("15ac84"),
    Formula(Equal((r**2+4*r-n**2+4)*BesselJ(n,0,r+2) + (r+1)*(r+2)*BesselJ(n,0,r), 0)),
    Variables(n,r),
    Assumptions(And(Element(n,ZZ), Element(r, ZZGreaterEqual(0))))) 

make_entry(ID("9b2f38"),
    Formula(Equal(
        z**2*(r**2 + 7*r + 12) * (BesselJ(nu,z,r+4) / Factorial(r+4)) +
        z*(2*r**2+11*r+15) * (BesselJ(nu,z,r+3) / Factorial(r+3)) +
        (r*(r+4) + z**2 - nu**2 + 4) * (BesselJ(nu,z,r+2) / Factorial(r+2)) +
        2*z * (BesselJ(nu,z,r+1) / Factorial(r+1)) +
        (BesselJ(nu,z,r) / Factorial(r)), 0)),
    Variables(nu, z, r),
    Assumptions(
        And(Element(nu, ZZ), Element(z, CC), Element(r, ZZGreaterEqual(0))),
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))), Element(r, ZZGreaterEqual(0)))
    ))

make_entry(ID("e85dee"),
    Formula(Equal(
        z**2*(r**2 + 7*r + 12) * (BesselY(nu,z,r+4) / Factorial(r+4)) +
        z*(2*r**2+11*r+15) * (BesselY(nu,z,r+3) / Factorial(r+3)) +
        (r*(r+4) + z**2 - nu**2 + 4) * (BesselY(nu,z,r+2) / Factorial(r+2)) +
        2*z * (BesselY(nu,z,r+1) / Factorial(r+1)) +
        (BesselY(nu,z,r) / Factorial(r)), 0)),
    Variables(nu, z, r),
    Assumptions(
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))), Element(r, ZZGreaterEqual(0)))
    ))

make_entry(ID("c0247f"),
    Formula(Equal(BesselI(0,z,1), BesselI(1,z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("81ffcd"),
    Formula(Equal(BesselK(0,z,1), -BesselK(1,z))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("58d91f"),
    Formula(Equal(BesselI(nu,z,1), (BesselI(nu-1,z) + BesselI(nu+1,z))/2)),
    Variables(nu,z),
    Assumptions(
        And(Element(nu, ZZ), Element(z, CC)),
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("a0ff0b"),
    Formula(Equal(BesselK(nu,z,1), -((BesselK(nu-1,z) + BesselK(nu+1,z))/2))),
    Variables(nu,z),
    Assumptions(
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("e284d7"),
    Formula(Equal(BesselI(nu,z,r), Div(1,2**r) * Sum(Binomial(r,k) * BesselI(nu+2*k-r,z), For(k, 0, r)))),
    Variables(nu,z,r),
    Assumptions(
        And(Element(nu, ZZ), Element(z, CC), Element(r, ZZGreaterEqual(0))),
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))), Element(r, ZZGreaterEqual(0))),
    ))

make_entry(ID("807f3f"),
    Formula(Equal(BesselK(nu,z,r), Div((-1)**r,2**r) * Sum(Binomial(r,k) * BesselK(nu+2*k-r,z), For(k, 0, r)))),
    Variables(nu,z,r),
    Assumptions(
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))), Element(r, ZZGreaterEqual(0))),
    ))

make_entry(ID("4fb391"),
    Formula(Equal(BesselI(nu,z), (z/(2*nu))*(BesselI(nu-1,z) - BesselI(nu+1,z)))),
    Variables(nu,z),
    Assumptions(
        And(Element(nu, SetMinus(ZZ, Set(0))), Element(z, CC)),
        And(Element(nu, SetMinus(CC, Set(0))), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("9d98f8"),
    Formula(Equal(BesselK(nu,z), -((z/(2*nu))*(BesselK(nu-1,z) - BesselK(nu+1,z))))),
    Variables(nu,z),
    Assumptions(
        And(Element(nu, SetMinus(ZZ, Set(0))), Element(z, CC)),
        And(Element(nu, SetMinus(CC, Set(0))), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("f303c9"),
    Formula(Equal((r**2+4*r-n**2+4)*BesselI(n,0,r+2) - (r+1)*(r+2)*BesselI(n,0,r), 0)),
    Variables(n,r),
    Assumptions(And(Element(n,ZZ), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("e233b0"),
    Formula(Equal(
        z**2*(r**2 + 7*r + 12) * (BesselI(nu,z,r+4) / Factorial(r+4)) +
        z*(2*r**2+11*r+15) * (BesselI(nu,z,r+3) / Factorial(r+3)) +
        (r*(r+4) - z**2 - nu**2 + 4) * (BesselI(nu,z,r+2) / Factorial(r+2)) -
        2*z * (BesselI(nu,z,r+1) / Factorial(r+1)) -
        (BesselI(nu,z,r) / Factorial(r)), 0)),
    Variables(nu, z, r),
    Assumptions(
        And(Element(nu, ZZ), Element(z, CC), Element(r, ZZGreaterEqual(0))),
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))), Element(r, ZZGreaterEqual(0)))
    ))

make_entry(ID("7377c8"),
    Formula(Equal(
        z**2*(r**2 + 7*r + 12) * (BesselK(nu,z,r+4) / Factorial(r+4)) +
        z*(2*r**2+11*r+15) * (BesselK(nu,z,r+3) / Factorial(r+3)) +
        (r*(r+4) - z**2 - nu**2 + 4) * (BesselK(nu,z,r+2) / Factorial(r+2)) -
        2*z * (BesselK(nu,z,r+1) / Factorial(r+1)) -
        (BesselK(nu,z,r) / Factorial(r)), 0)),
    Variables(nu, z, r),
    Assumptions(
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))), Element(r, ZZGreaterEqual(0)))
    ))

make_entry(ID("ecd36f"),
    Formula(Equal(BesselJ(nu, z), (z/2)**nu * Hypergeometric0F1Regularized(nu+1, -(z**2/4)))),
    Variables(nu, z),
    Assumptions(
        And(Element(nu, ZZGreaterEqual(0)), Element(z, CC)),
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("81eec6"),
    Formula(Equal(BesselI(nu, z), (z/2)**nu * Hypergeometric0F1Regularized(nu+1, (z**2/4)))),
    Variables(nu, z),
    Assumptions(
        And(Element(nu, ZZGreaterEqual(0)), Element(z, CC)),
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("b049dc"),
    Formula(Equal(BesselY(nu, z),
        (1/Sin(Pi*nu)) * (Cos(Pi*nu) * (z/2)**nu * Hypergeometric0F1Regularized(nu+1, -(z**2/4))
            - (z/2)**(-nu) * Hypergeometric0F1Regularized(1-nu, -(z**2/4))))),
    Variables(nu, z),
    Assumptions(
        And(Element(nu, SetMinus(CC, ZZ)), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("7efe21"),
    Formula(Equal(BesselK(nu, z), ((2*z)/Pi)**(-Div(1,2)) * Exp(-z) * HypergeometricUStar(nu+Div(1,2), 2*nu+1, 2*z))),
    Variables(nu, z),
    Assumptions(
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("98703d"),
    Formula(Equal(BesselK(nu, z),
        Div(1,2) * (Pi/Sin(Pi*nu)) * (Div(z,2)**(-nu) * Hypergeometric0F1Regularized(1-nu, z**2/4)
            - Div(z,2)**nu * Hypergeometric0F1Regularized(1+nu, z**2/4)))),
    Variables(nu, z),
    Assumptions(
        And(Element(nu, SetMinus(CC, ZZ)), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("9ad254"),
    Formula(Equal(BesselJ(nu, z),
            (z/2)**nu * (Exp(-(ConstI*z)) / Gamma(nu+1)) * Hypergeometric1F1(nu+Div(1,2), 2*nu+1, 2*ConstI*z))),
    Variables(nu, z),
    Assumptions(
        And(Element(nu, ZZGreaterEqual(0)), Element(z, CC)),
        And(Element(nu, CC), NotElement(nu, ZZLessEqual(-1)), Element(z, SetMinus(CC, Set(0))))
    ))

_Ap = (ConstI*z)**(-Div(1,2)-nu)

_Am = (-(ConstI*z))**(-Div(1,2)-nu)

_Bp = Exp(ConstI*z) * HypergeometricUStar(nu+Div(1,2), 2*nu+1, -(2*ConstI*z))

_Bm = Exp(-(ConstI*z)) * HypergeometricUStar(nu+Div(1,2), 2*nu+1, (2*ConstI*z))

make_entry(ID("32e162"),
    Formula(Equal(BesselJ(nu, z), (z**nu / (2*Pi)**(Div(1,2))) * (_Ap*_Bp + _Am*_Bm))),
    Variables(nu, z),
    Assumptions(
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("127f05"),
    Formula(Where(Equal(BesselJ(nu, z),
        (2*Pi*z)**(-Div(1,2)) * (Exp(-(ConstI*theta)) * HypergeometricUStar(nu+Div(1,2), 2*nu+1, -(2*ConstI*z))
            + Exp(ConstI*theta) * HypergeometricUStar(nu+Div(1,2), 2*nu+1, (2*ConstI*z)))), Equal(theta, Pi*(2*nu+1)/4-z))),
    Variables(nu, z),
    Assumptions(
        And(Element(nu, CC), Element(z, CC), Greater(Re(z), 0)),
    ))

make_entry(ID("54bce2"),
    Formula(Equal(BesselJ(-n, z), (-1)**n * BesselJ(n, z))),
    Variables(n, z),
    Assumptions(
        And(Element(n, ZZ), Element(z, CC)),
    ))

make_entry(ID("afbd22"),
    Formula(Equal(BesselI(-n, z), BesselI(n, z))),
    Variables(n, z),
    Assumptions(
        And(Element(n, ZZ), Element(z, CC)),
    ))

make_entry(ID("86bc7d"),
    Formula(Equal(BesselI(nu, z), z**nu * (ConstI*z)**(-nu) * BesselJ(nu, ConstI*z))),
    Variables(nu, z),
    Assumptions(And(Element(nu, CC), Element(z, CC), Or(NotEqual(z, 0), Equal(nu, 0)))))

make_entry(ID("15bbb1"),
    Formula(Equal(BesselI(n, z), ConstI**(-n) * BesselJ(n, ConstI*z))),
    Variables(n, z),
    Assumptions(
        And(Element(n, ZZ), Element(z, CC)),
    ))

make_entry(ID("2a4195"),
    Formula(Equal(BesselY(nu, z), ((Cos(Pi*nu)*BesselJ(nu,z) - BesselJ(-nu,z))/Sin(Pi*nu)))),
    Variables(nu, z),
    Assumptions(
        And(Element(nu, SetMinus(CC, ZZ)), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("d5b7e8"),
    Formula(Equal(BesselY(n, z), -(2/Pi) * (ConstI**n * BesselK(n, ConstI*z) + (Log(ConstI*z)-Log(z))*BesselJ(n,z)))),
    Variables(n, z),
    Assumptions(
        And(Element(n, ZZ), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("24d383"),
    SymbolDefinition(HankelH1, HankelH1(nu, z), "Hankel function of the first kind"),
    Description("The following table lists all conditions such that", SourceForm(HankelH1(nu, z)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(And(Element(nu, CC), Element(z, SetMinus(CC, Set(0)))), Element(HankelH1(nu, z), CC)),
      )),
    )

make_entry(ID("d154dd"),
    SymbolDefinition(HankelH2, HankelH2(nu, z), "Hankel function of the second kind"),
    Description("The following table lists all conditions such that", SourceForm(HankelH2(nu, z)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(And(Element(nu, CC), Element(z, SetMinus(CC, Set(0)))), Element(HankelH2(nu, z), CC)),
      )),
    )

make_entry(ID("6a6a09"),
    Formula(Equal(HankelH1(nu, z), BesselJ(nu, z) + ConstI * BesselY(nu, z))),
    Variables(nu, z),
    Assumptions(
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("1dce21"),
    Formula(Equal(HankelH2(nu, z), BesselJ(nu, z) - ConstI * BesselY(nu, z))),
    Variables(nu, z),
    Assumptions(
        And(Element(nu, CC), Element(z, SetMinus(CC, Set(0))))
    ))

make_entry(ID("99c077"),
    Formula(Equal(BesselJ(n,z), (1/Pi) * Integral(Cos(n*t - z*Sin(t)), For(t, 0, Pi)))),
    Variables(n, z),
    Assumptions(
        And(Element(n, ZZ), Element(z, CC)),
    ))

make_entry(ID("cac83e"),
    Formula(Equal(BesselJ(nu,z), (1/Pi) * Integral(Cos(nu*t - z*Sin(t)), For(t, 0, Pi)) - Sin(Pi*nu)/Pi *
        Integral(Exp(-(z*Sinh(t))-nu*t), For(t, 0, Infinity)))),
    Variables(nu, z),
    Assumptions(
        And(Element(nu, CC), Element(z, CC), Greater(Re(z), 0)),
    ))

make_entry(ID("7ae3ed"),
    Formula(Equal(BesselI(nu,z), (1/Pi) * Integral(Exp(z*Cos(t))*Cos(nu*t), For(t, 0, Pi)) - Sin(Pi*nu)/Pi *
        Integral(Exp(-(z*Cosh(t))-nu*t), For(t, 0, Infinity)))),
    Variables(nu, z),
    Assumptions(
        And(Element(nu, CC), Element(z, CC), Greater(Re(z), 0)),
    ))

make_entry(ID("c29d6f"),
    Formula(Equal(BesselK(nu,z), Integral(Exp(-(z*Cosh(t)))*Cosh(nu*t), For(t, 0, Infinity)))),
    Variables(nu, z),
    Assumptions(
        And(Element(nu, CC), Element(z, CC), Greater(Re(z), 0)),
    ))

_landau_ref = "L. Landau. Monotonicity and bounds on Bessel functions. Proceedings of the Symposium on Mathematical Physics and Quantum Field Theory. Vol. 4. Southwest Texas State Univ. San Marcos, TX, 2000. http://emis.ams.org/journals/EJDE/conf-proc/04/l1/landau.pdf"

make_entry(ID("3bffa9"),
    Formula(LessEqual(Abs(BesselJ(nu,x)), 1)),
    Variables(nu, x),
    Assumptions(And(Element(nu, ClosedOpenInterval(0, Infinity)), Element(x, RR))))

make_entry(ID("e7b5be"),
    Formula(LessEqual(Abs(BesselJ(nu,x)), Decimal("0.6749") * Pow(nu, -Div(1,3)))),
    Variables(nu, x),
    Assumptions(And(Element(nu, OpenInterval(0, Infinity)), Element(x, ClosedOpenInterval(0, Infinity)))),
    References(_landau_ref))

make_entry(ID("7f3485"),
    Formula(LessEqual(Abs(BesselJ(nu,x)), Decimal("0.7858") * Pow(x, -Div(1,3)))),
    Variables(nu, x),
    Assumptions(And(Element(nu, ClosedOpenInterval(0, Infinity)), Element(x, OpenInterval(0, Infinity)))),
    References(_landau_ref))

make_entry(ID("0836b4"),
    Formula(LessEqual(Abs(BesselJ(n,z)), Exp(Abs(Im(z))))),
    Variables(n, z),
    Assumptions(And(Element(n, ZZ), Element(z, CC))))

make_entry(ID("cc4572"),
    Formula(LessEqual(Abs(BesselJ(nu,z)), (1/Gamma(nu+1)) * Abs(z/2)**nu * Exp(Abs(Im(z))))),
    Variables(nu, z),
    Assumptions(And(Element(nu, ClosedOpenInterval(-Div(1,2), Infinity)), Element(z, SetMinus(CC, Set(0))))))

def_Topic(
    Title("Specific values of Bessel functions"),
    SeeTopics("Bessel functions"),
    Section("Trigonometric cases"),
    Entries(
        "621a9b",
        "121b21",
        "a2a294",
        "5679f2",
        "4dfd41",
        "8472cc",
    ),
    Section("Hyperbolic cases"),
    Entries(
        "5d9c43",
        "a59981",
        "65647f",
        "7ac286",
        "d1f5c5",
        "0c09cc",
    ),
    Section("Airy function cases"),
    SeeTopics("Airy functions"),
    Entries(
        "685892",
        "d39c46",
        "e72e96",
        "fda595",
        "49d754",
        "c362e8",
    ),
)

make_entry(ID("621a9b"),
    Formula(Equal(BesselJ(-Div(1,2),z), Pow((2*z)/Pi, Div(1,2)) * (Cos(z) / z))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("121b21"),
    Formula(Equal(BesselJ(Div(1,2),z), Pow((2*z)/Pi, Div(1,2)) * (Sin(z) / z))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("a2a294"),
    Formula(Equal(BesselJ(Div(3,2),z), Pow((2*z)/Pi, Div(1,2)) * ((Sin(z)/z**2 - Cos(z)/z)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("5679f2"),
    Formula(Equal(BesselY(-Div(1,2),z), Pow((2*z)/Pi, Div(1,2)) * (Sin(z) / z))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("4dfd41"),
    Formula(Equal(BesselY(Div(1,2),z), -(Pow((2*z)/Pi, Div(1,2)) * (Cos(z) / z)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("8472cc"),
    Formula(Equal(BesselY(Div(3,2),z), -(Pow((2*z)/Pi, Div(1,2)) * (Cos(z)/z**2 + Sin(z)/z)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("5d9c43"),
    Formula(Equal(BesselI(-Div(1,2),z), Pow((2*z)/Pi, Div(1,2)) * (Cosh(z) / z))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("a59981"),
    Formula(Equal(BesselI(Div(1,2),z), Pow((2*z)/Pi, Div(1,2)) * (Sinh(z) / z))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("65647f"),
    Formula(Equal(BesselI(Div(3,2),z), Pow((2*z)/Pi, Div(1,2)) * ((Cosh(z)/z - Sinh(z)/z**2)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("7ac286"),
    Formula(Equal(BesselK(-Div(1,2),z), Pow((Pi*z)/2, Div(1,2)) * (Exp(-z) / z))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("d1f5c5"),
    Formula(Equal(BesselK(Div(1,2),z), Pow((Pi*z)/2, Div(1,2)) * (Exp(-z) / z))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("0c09cc"),
    Formula(Equal(BesselK(Div(3,2),z), Pow((Pi*z)/2, Div(1,2)) * (Exp(-z) * (1/z + 1/z**2)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("685892"),
    Formula(Equal(BesselJ(-Div(1,3),z), Where((1/(2*omega)) * (3 * AiryAi(-omega**2) + Sqrt(3) * AiryBi(-omega**2)), Equal(omega, (3*z/2)**Div(1,3))))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("d39c46"),
    Formula(Equal(BesselJ(Div(1,3),z), Where((1/(2*omega)) * (3 * AiryAi(-omega**2) - Sqrt(3) * AiryBi(-omega**2)), Equal(omega, (3*z/2)**Div(1,3))))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("e72e96"),
    Formula(Equal(BesselJ(Div(2,3),z), Where((1/(2*omega**2)) * (3 * AiryAi(-omega**2,1) + Sqrt(3) * AiryBi(-omega**2,1)), Equal(omega, (3*z/2)**Div(1,3))))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("fda595"),
    Formula(Equal(BesselK(-Div(1,3),z), Where((Sqrt(3)*Pi/omega) * AiryAi(omega**2), Equal(omega, (3*z/2)**Div(1,3))))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("49d754"),
    Formula(Equal(BesselK(Div(1,3),z), Where((Sqrt(3)*Pi/omega) * AiryAi(omega**2), Equal(omega, (3*z/2)**Div(1,3))))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("c362e8"),
    Formula(Equal(BesselK(Div(2,3),z), Where(-((Sqrt(3)*Pi/omega**2) * AiryAi(omega**2,1)), Equal(omega, (3*z/2)**Div(1,3))))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

def_Topic(
    Title("Beta function"),
    Section("Definitions"),
    Entries(
        "1c46fa",
        "795fe5",
        "6bd011",
    ),
    Section("Main formulas"),
    Entries(
        "888581",
        "c92da4",
        "ba7baf",
        "3141e4",
        "ff613a",
        "6bcfa6",
    ),
    Section("Integral representations"),
    Entries(
        "542cf7",
        "48910b",
        "3e08b6",
        "a1941b",
    ),
    Section("Hypergeometric representations"),
    Entries(
        "5ec9c0",
    ),
    Section("Symmetry"),
    Entries(
        "cc2ebb",
        "315b3d",
        "fd0e48",
    ),
    Section("Integer parameters"),
    Entries(
        "082a69",
        "bb4f41",
        "72db94",
        "a7dbf6",
        "1f72e9",
    ),
    Section("Recurrence relations"),
    Entries(
        "bdea17",
        "e9f966",
    ),
)

make_entry(ID("1c46fa"),
    SymbolDefinition(BetaFunction, BetaFunction(a, b), "Beta function"))

make_entry(ID("795fe5"),
    SymbolDefinition(IncompleteBeta, IncompleteBeta(x, a, b), "Incomplete beta function"))

make_entry(ID("6bd011"),
    SymbolDefinition(IncompleteBetaRegularized, IncompleteBetaRegularized(x, a, b), "Regularized incomplete beta function"))

make_entry(ID("888581"),
    Formula(Equal(BetaFunction(a, b), (Gamma(a) * Gamma(b)) / Gamma(a + b))),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(CC, ZZLessEqual(0))), Element(b, SetMinus(CC, ZZLessEqual(0))))))

make_entry(ID("ba7baf"),
    Formula(Equal(IncompleteBeta(0, a, b), 0)),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(CC, ZZLessEqual(0))), Element(b, SetMinus(CC, ZZLessEqual(0))))))

make_entry(ID("3141e4"),
    Formula(Equal(IncompleteBeta(1, a, b), BetaFunction(a, b))),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(CC, ZZLessEqual(0))), Element(b, SetMinus(CC, ZZLessEqual(0))))))

make_entry(ID("c92da4"),
    Formula(Equal(IncompleteBetaRegularized(x, a, b), IncompleteBeta(x, a, b) / BetaFunction(a, b))),
    Variables(x, a, b),
    Assumptions(And(Element(x, CC), Element(a, SetMinus(CC, ZZLessEqual(0))), Element(b, SetMinus(CC, ZZLessEqual(0))), NotElement(a+b, ZZLessEqual(0)))))

make_entry(ID("ff613a"),
    Formula(Equal(IncompleteBetaRegularized(0, a, b), 0)),
    Variables(x, a, b),
    Assumptions(And(Element(x, CC), Element(a, SetMinus(CC, ZZLessEqual(0))), Element(b, SetMinus(CC, ZZLessEqual(0))), NotElement(a+b, ZZLessEqual(0)))))

make_entry(ID("6bcfa6"),
    Formula(Equal(IncompleteBetaRegularized(1, a, b), 1)),
    Variables(x, a, b),
    Assumptions(And(Element(x, CC), Element(a, SetMinus(CC, ZZLessEqual(0))), Element(b, SetMinus(CC, ZZLessEqual(0))), NotElement(a+b, ZZLessEqual(0)))))

make_entry(ID("542cf7"),
    Formula(Equal(BetaFunction(a, b), Integral(t**(a-1) * (1-t)**(b-1), For(t, 0, 1)))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC), Greater(Re(a), 0), Greater(Re(b), 0))))

make_entry(ID("48910b"),
    Formula(Equal(BetaFunction(a, b), 2 * Integral(Sin(t)**(2*a-1) * Cos(t)**(2*b-1), For(t, 0, Pi / 2)))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC), Greater(Re(a), 0), Greater(Re(b), 0))))

make_entry(ID("3e08b6"),
    Formula(Equal(IncompleteBeta(x, a, b), Integral(t**(a-1) * (1-t)**(b-1), For(t, 0, x)))),
    Variables(x, a, b),
    Assumptions(And(Element(x, ClosedInterval(0,1)), Element(a, CC), Element(b, CC), Greater(Re(a), 0), Greater(Re(b), 0))))

make_entry(ID("a1941b"),
    Formula(Equal(IncompleteBetaRegularized(x, a, b), (1/BetaFunction(a,b)) * Integral(t**(a-1) * (1-t)**(b-1), For(t, 0, x)))),
    Variables(x, a, b),
    Assumptions(And(Element(x, ClosedInterval(0,1)), Element(a, CC), Element(b, CC), Greater(Re(a), 0), Greater(Re(b), 0))))

make_entry(ID("5ec9c0"),
    Formula(Equal(IncompleteBeta(x, a, b), (x**a / a) * Hypergeometric2F1(a, 1-b, a+1, x))),
    Variables(x, a, b),
    Assumptions(And(Element(a, SetMinus(CC, ZZLessEqual(0))), Element(b, CC), Element(x, SetMinus(CC, Set(1))), Or(NotEqual(x, 0), Greater(Re(a), 0)))))

make_entry(ID("cc2ebb"),
    Formula(Equal(BetaFunction(a, b), BetaFunction(b, a))),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(CC, ZZLessEqual(0))), Element(b, SetMinus(CC, ZZLessEqual(0))))))

make_entry(ID("315b3d"),
    Formula(Equal(IncompleteBetaRegularized(x, a, b), 1 - IncompleteBetaRegularized(1 - x, b, a))),
    Variables(a, b, x),
    Assumptions(And(Element(x, CC), Element(a, SetMinus(CC, ZZLessEqual(0))), Element(b, SetMinus(CC, ZZLessEqual(0))), NotElement(a+b, ZZLessEqual(0)))))

make_entry(ID("fd0e48"),
    Formula(Equal(BetaFunction(a,b) * BetaFunction(a+b,c), BetaFunction(b,c)*BetaFunction(a,b+c))),
    Variables(a, b, c),
    Assumptions(And(Element(a, SetMinus(CC, ZZLessEqual(0))), Element(b, SetMinus(CC, ZZLessEqual(0))), Element(c, SetMinus(CC, ZZLessEqual(0))),
        NotElement(a+b, ZZLessEqual(0)), NotElement(b+c, ZZLessEqual(0)))))

make_entry(ID("082a69"),
    Formula(Equal(BetaFunction(m, n), (Factorial(m-1) * Factorial(n-1)) / Factorial(m+n-1))),
    Variables(m, n),
    Assumptions(And(Element(m, ZZGreaterEqual(1)), Element(n, ZZGreaterEqual(1)))))

make_entry(ID("bb4f41"),
    Formula(Equal(BetaFunction(m, n), 1/(m * Binomial(m+n-1,m)))),
    Variables(m, n),
    Assumptions(And(Element(m, ZZGreaterEqual(1)), Element(n, ZZGreaterEqual(1)))))

make_entry(ID("72db94"),
    Formula(Equal(BetaFunction(n, b), Cases(Tuple(UnsignedInfinity, Element(-b, Range(0, n-1))),
            Tuple(1/(n * Binomial(n+b-1,n)), Otherwise)))),
    Variables(n, b),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(b, CC))))

make_entry(ID("a7dbf6"),
    Formula(Equal(BetaFunction(-n, b), Cases(Tuple((-1)**b / (b * Binomial(n,b)), Element(b, Range(1, n))), Tuple(UnsignedInfinity, Otherwise)))),
    Variables(n, b),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(b, CC))))

make_entry(ID("1f72e9"),
    Formula(Equal(Residue(BetaFunction(z, b), For(z, a)),
        Where(Cases(Tuple(Binomial(n-b, n), Element(n, ZZGreaterEqual(0))),
              Tuple(0, Otherwise)), Equal(n, -a)))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, SetMinus(CC, ZZLessEqual(0))))))

make_entry(ID("bdea17"),
    Formula(Equal((a+b) * BetaFunction(a+1,b), a * BetaFunction(a, b))),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(CC, ZZLessEqual(0))), Element(b, SetMinus(CC, ZZLessEqual(0))))))

make_entry(ID("e9f966"),
    Formula(Equal(BetaFunction(a,b), BetaFunction(a+1,b) + BetaFunction(a, b+1))),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(CC, ZZLessEqual(0))), Element(b, SetMinus(CC, ZZLessEqual(0))))))

def_Topic(
    Title("Carlson symmetric elliptic integrals"),
    Section("Definitions"),
    Entries(
        "5cd377",
        "8f7c2a",
        "bac745",
        "663d75",
        "132ec5",
    ),
    Section("Illustrations"),
    Entries(
        "b0921b",
        "6ae152",
        "cc234c",
    ),
    Section("Integral representations"),
    Subsection("Defining algebraic integrals"),
    Entries(
        "9357b9",
        "dab889",
        "02a8d7",
        "944a14",
        "f3b8dc",
    ),
    Subsection("Trigonometric integrals"),
    Entries
    (
        "da16db",
        "7fbbe8",
        "9a0bc8",
        "8f0a91",
        "0d8639",
    ),
    Section("Connection formulas"),
    Subsection("Degenerate cases"),
    Entries(
        "61f98d",
        "409873",
    ),
    Subsection("Connection formula for RF, RG and RD"),
    Entries(
        "7609c8",
    ),
    Section("Symmetry"),
    Entries(
        "f29729",
        "b478a1",
        "655a2b",
        "1e8061",
    ),
    Section("Scale invariance"),
    Entries(
        "7a168a",
        "f9ca94",
        "4e21c7",
        "197a91",
        "a839d5",
    ),
    Section("Domain"),
    Subsection("Complex variables"),
    Entries(
        "655f6b",
        "c90834",
        "8bac89",
        "ba7b32",
        "7aa9be",
    ),
    Subsection("Real variables"),
    Entries(
        "cc4cd8",
        "9c9173",
        "671fcb",
        "8236ff",
        "da33ce",
    ),
    Subsection("Holomorphicity and branch cuts"),
    Entries(
        "0ba30f",
        "c56825",
        "583c27",
        "114f9e",
        "73cf98",
    ),
    Subsection("Continuity on branch cuts"),
    Entries(
        "0d3186",
        "f9b773",
        "b8ca70",
        "9673f7",
        "6923d5",
    ),    
    Section("Representation of other functions"),
    SeeTopics("Legendre elliptic integrals"),
    Subsection("Legendre complete elliptic integrals"),
    Entries(
        "0cc11f",
        "6520e7",
        "9ccaef",
        "41cf8e",
        "94f646",
        "55d23d",
    ),
    Subsection("Legendre incomplete elliptic integrals"),
    Entries(
        "e2445d",
        "f48f54",
        "8f4e31",
    ),
    Subsection("Elementary functions"),
    Entries(
        "398bb7",
        "7a9dad",
        "2cdd2f",
        "584a61",
        "423b36",
        "33e034",
        "d9765b",
    ),
    Subsection("Inverse Weierstrass elliptic function"),
    SeeTopics("Weierstrass elliptic functions"),
    Entries(
        "124339",
    ),
    Section("Specific values"),
    SeeTopics("Specific values of Carlson symmetric elliptic integrals"),
    Subsection("The degenerate integral of the first kind"),
    Entries(
        "e464ec",
        "d38c27",
        "eac389",
        "a15c03",
        "7b5755",
    ),
    Subsection("The integral of the first kind"),
    Entries(
        "8bb972",
        "c166ca",
        "4cd504",
        "0bf328",
        "28237a",
        "9b0388",
        "ebaa1a",
        "649dc0",
        "415ff0",
    ),
    Subsection("The integral of the second kind"),
    Entries(
        "bcc121",
        "d5ff09",
        "cd55cf",
        "250ff1",
        "4d7098",
        "d51efc",
        "84f403",
        "990145",
        "d829be",
        "120284",
        "7cddc6",
    ),
    Subsection("The degenerate integral of the third kind"),
    Entries(
        "1c0fee",
        "84ea08",
        "63644d",
        "f47947",
        "ccb4d1",
        "8d0629",
        "c85c2f",
        "771801",
    ),
    Subsection("The integral of the third kind"),
    Entries(
        "e9d5a9",
        "6e9544",
        "1eaaed",
        "4c882a",
        "d4b12e",
        "f6b4a2",
        "3dd30a",
        "5c6f10",
    ),
    Section("Functional equations"),
    Subsection("Duplication theorems"),
    Entries(
        "2499cd",
        "8e6189",
        "47cf5d",
        "31a3ba",
        "791c44",
        "8f5d76",
    ),
    Subsection("Addition theorems"),
    Entries(
        "6dda7a",
        "38fa65",
        "4eac3f",
        "a203e9",
    ),
    Section("Derivatives and differential equations"),
    Entries(
        "5f0adb",
        "638fa6",
        "ce327b",
        "3e1435",
        "644d75",
        "de8485",
        "741859",
    ),
    Section("Series representations"),
    SeeTopics("Series representations of Carlson symmetric elliptic integrals"),
    Subsection("Cases reducible to the Gauss hypergeometric function"),
    Entries(
        "72b5bd",
        "b2fdfe",
        "e98dd0",
    ),
    Subsection("Multivariate hypergeometric series representations"),
    Entries(
        "b576e6",
        "8f71cb",
        "fda084",
        "b2cd79",
    ),
    Subsection("Explicit truncated series approximations"),
    Entries(
        "799894",
    ),
    Section("Bounds and inequalities"),
    Subsection("Real variables"),
    Entries(
        "c03f78",
        "1d2811",
        "07584a",
        "edcf6c",
        "a4e47f",
        "d3b39c",
        "230a49",
        "34e932",
        "688efb",
        "978287",
    ),
    Subsection("Real variables, complete integrals"),
    Entries(
        "0e209c",
        "2e40b8",
        "62eade",
        "36ae10",
        "add3ea",
        "60541a",
        "d70b12",
        "255142",
    ),
)

def_Topic(
    Title("Specific values of Carlson symmetric elliptic integrals"),
    SeeTopics("Carlson symmetric elliptic integrals"),
    Section("The elementary integral RC"),
    Subsection("Scale invariance"),
    Entries(
        "a839d5",
    ),
    Subsection("Particular constant values"),
    Entries(
        "5c2b08",
        "1acb07",
        "e464ec",
        "d38c27",
        "eac389",
        "a15c03",
        "35cb93",
        "56d1bc",
        "25435b",
        "7ea1ad",
    ),
    Subsection("Specialized values"),
    Entries(
        "7cbe17",
        "ff58cf",
        "ad96f4",
        "09a494",
        "b136bd",
    ),
    Subsection("General formulas for real variables"),
    Entries(
        "5ada5f",
        "718f3a",
        "de0638",
        "00cdb7",
        "bc2f88",
        "4becdd",
    ),
    Subsection("General formulas for one or more complex variables"),
    Entries(
        "7b5755",
        "0cf60d",
        "8c9ba1",
        "7348e3",
        "eb1d4f",
        "157ebb",
    ),
    Section("The integral of the first kind RF"),
    Subsection("Symmetry and scale invariance"),
    Entries(
        "f29729",
        "7a168a",
    ),
    Subsection("Particular constant values"),
    Entries(
        "e39456",
        "9a95a5",
        "8bb972",
        "c166ca",
        "4cd504",
        "0bf328",
        "28237a",
        "f1dd8a",
        "4c1988",
        "6c4567",
        "90af98",
        "3a84d6",
        "6674bb",
        "5c178f",
        "e30d7e",
        "cf5caa",
        "67e015",
        "8519dd",
    ),
    Subsection("Special parametric cases"),
    Entries(
        "13a092",
        "53d869",
        "ab5af3",
        "415ff0",
        "0ed5e2",
        "e54e61",
        "538c8c",
        "271b73",
        "63d11e",
        "ebaa1a",
        "649dc0",
        "9b0388",
        "5ab6bf",
        "23e0a7",
    ),
    Section("The integral of the second kind RG"),
    Subsection("Symmetry and scale invariance"),
    Entries(
        "b478a1",
        "f9ca94",
    ),
    Subsection("Particular constant values"),
    Entries(
        "bcc121",
        "d5ff09",
        "cd55cf",
        "250ff1",
        "4d7098",
        "d51efc",
        "84f403",
        "9e30e7",
        "c5a9cf",
    ),
    Subsection("Special parametric cases"),
    Entries(
        "d829be",
        "3f6d40",
        "cdb587",
        "7cddc6",
        "3f1547",
        "7c50d1",
        "a2e9dd",
        "48333c",
        "5d0c95",
        "120284",
        "990145",
        "092716",
        "4091ad",
    ),
    Section("The degenerate integral of the third kind RD"),
    Subsection("Symmetry and scale invariance"),
    Entries(
        "1e8061",
        "197a91",
    ),
    Subsection("Particular constant values"),
    Entries(
        "980014",
        "dbe634",
        "748131",
        "84ea08",
        "1c0fee",
        "f47947",
        "4d2c10",
        "eda57d",
        "060366",
        "63644d",
        "14a365",
        "2dcf0c",
        "d52bda",
        "545e8b",
        "3047b1",
        "4a2403",
    ),
    Subsection("Special parametric cases"),
    Entries(
        "f07e9d",
        "3e05c6",
        "61c002",
        "4e4380",
        "8d0629",
        "c85c2f",
        "771801",
        "ccb4d1",
        "f68409",
        "12b1d0",
    ),
    Section("The integral of the third kind RJ"),
    Subsection("Symmetry and scale invariance"),
    Entries(
        "655a2b",
        "4e21c7",
    ),
    Subsection("Particular constant values"),
    Entries(
        "55cd70",
        "f1fd51",
        "b891d1",
        "64a808",
        "e9d5a9",
        "b07652",
        "e60205",
        "522f54",
        "b1c84e",
        "a9f190",
        "397051",
        "6e9544",
        "a1414f",
        "9f2b18",
        "c05ed8",
        "7f8a58",
        "44d300",
        "1b6362",
        "fd3017",
        "3567c5",
        "62b0c4",
        "b468f3",
        "78131f",
        "cdee01",
        "e04867",
        "534335",
        "303827",
        "a091d1",
        "4c1db8",
        "1eaaed",
    ),
    Subsection("Special parametric cases"),
    Entries(
        "e1a3cb",
        "3dd30a",
        "5c6f10",
        "d4b12e",
        "1faf7a",
        "0aa9ac",
        "f6b4a2",
        "3b6175",
        "4c882a",
        "64d87a",
        "849751",
    ),
)

def_Topic(
    Title("Series representations of Carlson symmetric elliptic integrals"),
    SeeTopics("Carlson symmetric elliptic integrals"),
    Section("Definitions"),
    Entries(
        "b576e6",
        "a82bd6",
    ),
    Section("Cases reducible to the Gauss hypergeometric function"),
    SeeTopics("Gauss hypergeometric function"),
    Entries(
        "72b5bd",
        "b2fdfe",
        "e98dd0",
        "9bfd88",
        "bbf003",
    ),
    Section("Incomplete integrals"),
    Entries(
        "8f71cb",
        "fda084",
        "b2cd79",
        "e93f43",
        "8d304b",
        "e1a3fb",
        "7ded8f",
        "42c7f1",
    ),
    Section("Complete integrals"),
    Entries(
        "cbcad9",
        "d0c9ff",
        "00c331",
        "37ffb7",
        "5a8f57",
        "7314c4",
        "b4a735",
    ),
    Section("General formulas for the series"),
    Entries(
        "da47f6",
        "4cb707",
        "2443de",
    ),
    Section("Symmetric formulas"),
    Entries(
        "13f252",
        "a21395",
        "0a7f30",
        "2c1df7",
        "b81ca0",
    ),
    Section("Approximations by truncated series"),
    Entries(
        "926b36",
        "799894",
        "618a9f",
    ),
    Section("Integral representations"),
    Entries(
        "a1f7ea",
        "c5d388",
    ),
    Section("Gauss hypergeometric series"),
    Entries(
        "157ebb",
    ),
)

make_entry(ID("5cd377"),
    SymbolDefinition(CarlsonRF, CarlsonRF(x, y, z), "Carlson symmetric elliptic integral of the first kind"))

make_entry(ID("8f7c2a"),
    SymbolDefinition(CarlsonRG, CarlsonRG(x, y, z), "Carlson symmetric elliptic integral of the second kind"))

make_entry(ID("bac745"),
    SymbolDefinition(CarlsonRJ, CarlsonRJ(x, y, z, w), "Carlson symmetric elliptic integral of the third kind"))

make_entry(ID("132ec5"),
    SymbolDefinition(CarlsonRC, CarlsonRC(x, y), "Degenerate Carlson symmetric elliptic integral of the first kind"))

make_entry(ID("663d75"),
    SymbolDefinition(CarlsonRD, CarlsonRD(x, y, z), "Degenerate Carlson symmetric elliptic integral of the third kind"))

make_entry(ID("b0921b"),
    Image(Description("Plot of", CarlsonRF(x, y, 1), "on", Element(x, ClosedInterval(0,4)), "for", Element(y, Set(Decimal("0.1"), 1, 10))),
        ImageSource("plot_carlson_rf")),
    )

make_entry(ID("6ae152"),
    Image(Description("Plot of", CarlsonRG(x, y, 1), "on", Element(x, ClosedInterval(0,4)), "for", Element(y, Set(Decimal("0.1"), 1, 10))),
        ImageSource("plot_carlson_rg")),
    )

make_entry(ID("cc234c"),
    Image(Description("X-ray of", CarlsonRF(z, 1, 2), "on", Element(z, ClosedInterval(-4,4) + ClosedInterval(-4,4)*ConstI)),
        ImageSource("xray_carlson_rf")),
    description_xray,
    )

make_entry(ID("61f98d"),
    Formula(Equal(CarlsonRC(x, y), CarlsonRF(x, y, y))),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC))))

make_entry(ID("409873"),
    Formula(Equal(CarlsonRD(x, y, z), CarlsonRJ(x, y, z, z))),
    Variables(x, y, z),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC))))

make_entry(ID("655f6b"),
    Formula(Implies(And(Element(x, CC), Element(y, CC), Element(z, CC),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0)))),
        Element(CarlsonRF(x, y, z), CC))),
    Variables(x, y, z))

make_entry(ID("cc4cd8"),
    Formula(Implies(And(Element(x, ClosedOpenInterval(0, Infinity)),
                    Element(y, ClosedOpenInterval(0, Infinity)),
                    Element(z, ClosedOpenInterval(0, Infinity)),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0)))),
        Element(CarlsonRF(x, y, z), OpenInterval(0, Infinity)))),
    Variables(x, y, z))

make_entry(ID("c90834"),
    Formula(Implies(And(Element(x, CC), Element(y, CC), Element(z, CC)),
        Element(CarlsonRG(x, y, z), CC))),
    Variables(x, y, z))

make_entry(ID("9c9173"),
    Formula(Implies(And(Element(x, ClosedOpenInterval(0, Infinity)),
                    Element(y, ClosedOpenInterval(0, Infinity)),
                    Element(z, ClosedOpenInterval(0, Infinity))),
        Element(CarlsonRG(x, y, z), ClosedOpenInterval(0, Infinity)))),
    Variables(x, y, z))

make_entry(ID("8bac89"),
    Formula(Implies(And(
        Element(x, CC),
        Element(y, CC),
        Element(z, CC),
        Element(w, SetMinus(CC, Set(0))),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0)))),
        Element(CarlsonRJ(x, y, z, w), CC))),
    Variables(x, y, z, w))

make_entry(ID("671fcb"),
    Formula(Implies(And(
        Element(x, ClosedOpenInterval(0, Infinity)),
        Element(y, ClosedOpenInterval(0, Infinity)),
        Element(z, ClosedOpenInterval(0, Infinity)),
        Element(w, OpenInterval(0, Infinity)),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0)))),
        Element(CarlsonRJ(x, y, z, w), OpenInterval(0, Infinity)))),
    Variables(x, y, z, w))

make_entry(ID("7aa9be"),
    Formula(Implies(And(
        Element(x, CC),
        Element(y, SetMinus(CC, Set(0)))),
        Element(CarlsonRC(x, y), CC))),
    Variables(x, y))

make_entry(ID("da33ce"),
    Formula(Implies(And(
        Element(x, ClosedOpenInterval(0, Infinity)),
        Element(y, OpenInterval(0, Infinity))),
        Element(CarlsonRC(x, y), OpenInterval(0, Infinity)))),
    Variables(x, y))

make_entry(ID("ba7b32"),
    Formula(Implies(And(
        Element(x, CC),
        Element(y, CC),
        Element(z, SetMinus(CC, Set(0))),
        Or(NotEqual(x, 0), NotEqual(y, 0))),
        Element(CarlsonRD(x, y, z), CC))),
    Variables(x, y, z))

make_entry(ID("8236ff"),
    Formula(Implies(And(
        Element(x, ClosedOpenInterval(0, Infinity)),
        Element(y, ClosedOpenInterval(0, Infinity)),
        Element(z, OpenInterval(0, Infinity)),
        Or(NotEqual(x, 0), NotEqual(y, 0))),
        Element(CarlsonRD(x, y, z), OpenInterval(0, Infinity)))),
    Variables(x, y, z))

make_entry(ID("0ba30f"),
    Formula(All(IsHolomorphic(f(alpha), ForElement(alpha, SetMinus(CC, OpenClosedInterval(-Infinity, 0)))),
        ForElement(f, Set(Fun(alpha, CarlsonRF(alpha, y, z)), Fun(alpha, CarlsonRF(x, alpha, z)), Fun(alpha, CarlsonRF(x, y, alpha)))))),
    Variables(x, y, z),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0))))))

make_entry(ID("c56825"),
    Formula(All(IsHolomorphic(f(alpha), ForElement(alpha, SetMinus(CC, OpenClosedInterval(-Infinity, 0)))),
        ForElement(f, Set(Fun(alpha, CarlsonRG(alpha, y, z)), Fun(alpha, CarlsonRG(x, alpha, z)), Fun(alpha, CarlsonRG(x, y, alpha)))))),
    Variables(x, y, z),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC))))

make_entry(ID("583c27"),
    Formula(All(IsHolomorphic(f(alpha), ForElement(alpha, SetMinus(CC, OpenClosedInterval(-Infinity, 0)))),
        ForElement(f, Set(Fun(alpha, CarlsonRJ(alpha, y, z, w)), Fun(alpha, CarlsonRJ(x, alpha, z, w)), Fun(alpha, CarlsonRJ(x, y, alpha, w)), Fun(alpha, CarlsonRJ(x, y, w, alpha)))))),
    Variables(x, y, z, w),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC), Element(w, SetMinus(CC, Set(0))),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0))))))

make_entry(ID("114f9e"),
    Formula(All(IsHolomorphic(f(alpha), ForElement(alpha, SetMinus(CC, OpenClosedInterval(-Infinity, 0)))),
        ForElement(f, Set(Fun(alpha, CarlsonRD(alpha, y, z)), Fun(alpha, CarlsonRD(x, alpha, z)), Fun(alpha, CarlsonRD(x, y, alpha)))))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, CC),
        Element(y, CC),
        Element(z, SetMinus(CC, Set(0))),
        Or(NotEqual(x, 0), NotEqual(y, 0)))))

make_entry(ID("73cf98"),
    Formula(All(IsHolomorphic(f(alpha), ForElement(alpha, SetMinus(CC, OpenClosedInterval(-Infinity, 0)))),
        ForElement(f, Set(Fun(alpha, CarlsonRC(alpha, y)), Fun(alpha, CarlsonRC(x, alpha)))))),
    Variables(x, y),
    Assumptions(And(
        Element(x, CC),
        Element(y, SetMinus(CC, Set(0))))))

make_entry(ID("0d3186"),
    Formula(Equal(CarlsonRF(x, y, z), RightLimit(CarlsonRF(x + epsilon*ConstI, y + epsilon*ConstI, z + epsilon*ConstI), For(epsilon, 0)))),
    Variables(x, y, z),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0))))))

make_entry(ID("f9b773"),
    Formula(Equal(CarlsonRG(x, y, z), RightLimit(CarlsonRG(x + epsilon*ConstI, y + epsilon*ConstI, z + epsilon*ConstI), For(epsilon, 0)))),
    Variables(x, y, z),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC))))

make_entry(ID("b8ca70"),
    Formula(Equal(CarlsonRJ(x, y, z, w), RightLimit(CarlsonRJ(x + epsilon*ConstI, y + epsilon*ConstI, z + epsilon*ConstI, w + epsilon*ConstI), For(epsilon, 0)))),
    Variables(x, y, z, w),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC), Element(w, SetMinus(CC, Set(0))),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0))))))

make_entry(ID("9673f7"),
    Formula(Equal(CarlsonRD(x, y, z), RightLimit(CarlsonRD(x + epsilon*ConstI, y + epsilon*ConstI, z + epsilon*ConstI), For(epsilon, 0)))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, CC),
        Element(y, CC),
        Element(z, SetMinus(CC, Set(0))),
        Or(NotEqual(x, 0), NotEqual(y, 0)))))

make_entry(ID("6923d5"),
    Formula(Equal(CarlsonRC(x, y), RightLimit(CarlsonRC(x + epsilon*ConstI, y + epsilon*ConstI), For(epsilon, 0)))),
    Variables(x, y),
    Assumptions(And(
        Element(x, CC),
        Element(y, SetMinus(CC, Set(0))))))

make_entry(ID("f29729"),
    Formula(Equal(CarlsonRF(x, y, z), CarlsonRF(x, z, y),
            CarlsonRF(y, x, z), CarlsonRF(y, z, x),
            CarlsonRF(z, x, y), CarlsonRF(z, y, x))),
    Variables(x, y, z),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC))))

make_entry(ID("b478a1"),
    Formula(Equal(CarlsonRG(x, y, z), CarlsonRG(x, z, y),
            CarlsonRG(y, x, z), CarlsonRG(y, z, x),
            CarlsonRG(z, x, y), CarlsonRG(z, y, x))),
    Variables(x, y, z),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC))))

make_entry(ID("655a2b"),
    Formula(Equal(CarlsonRJ(x, y, z, w), CarlsonRJ(x, z, y, w),
            CarlsonRJ(y, x, z, w), CarlsonRJ(y, z, x, w),
            CarlsonRJ(z, x, y, w), CarlsonRJ(z, y, x, w))),
    Variables(x, y, z, w),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC), Element(w, CC))))

make_entry(ID("1e8061"),
    Formula(Equal(CarlsonRD(x, y, z), CarlsonRD(y, x, z))),
    Variables(x, y, z),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC))))

make_entry(ID("7a168a"),
    Formula(Equal(CarlsonRF(lamda * x, lamda * y, lamda * z), lamda**(-Div(1,2)) * CarlsonRF(x, y, z))),
    Variables(x, y, z, lamda),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC), Element(lamda, OpenInterval(0, Infinity)))))

make_entry(ID("f9ca94"),
    Formula(Equal(CarlsonRG(lamda * x, lamda * y, lamda * z), lamda**(Div(1,2)) * CarlsonRG(x, y, z))),
    Variables(x, y, z, lamda),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC), Element(lamda, OpenInterval(0, Infinity)))))

make_entry(ID("4e21c7"),
    Formula(Equal(CarlsonRJ(lamda * x, lamda * y, lamda * z, lamda * w), lamda**(-Div(3,2)) * CarlsonRJ(x, y, z, w))),
    Variables(x, y, z, w, lamda),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC), Element(w, CC), Element(lamda, OpenInterval(0, Infinity)))))

make_entry(ID("197a91"),
    Formula(Equal(CarlsonRD(lamda * x, lamda * y, lamda * z), lamda**(-Div(3,2)) * CarlsonRD(x, y, z))),
    Variables(x, y, z, lamda),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC), Element(lamda, OpenInterval(0, Infinity)))))

make_entry(ID("a839d5"),
    Formula(Equal(CarlsonRC(lamda * x, lamda * y), lamda**(-Div(1,2)) * CarlsonRC(x, y))),
    Variables(x, y, lamda),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(lamda, OpenInterval(0, Infinity)))))

make_entry(ID("2499cd"),
    Formula(Equal(CarlsonRF(x, y, z), Where(2 * CarlsonRF(x+lamda, y+lamda, z+lamda), Def(lamda, Sqrt(x)*Sqrt(y) + Sqrt(y)*Sqrt(z) + Sqrt(x)*Sqrt(z))))),
    Variables(x, y, z),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC))))

make_entry(ID("8e6189"),
    Formula(Equal(CarlsonRF(x, y, z), Where(CarlsonRF((x+lamda)/4, (y+lamda)/4, (z+lamda)/4), Def(lamda, Sqrt(x)*Sqrt(y) + Sqrt(y)*Sqrt(z) + Sqrt(x)*Sqrt(z))))),
    Variables(x, y, z),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC))))

make_entry(ID("47cf5d"),
    Formula(Equal(CarlsonRG(x, y, z), Where(2 * CarlsonRG(x+lamda, y+lamda, z+lamda) - Div(1,2)*(lamda*CarlsonRF(x,y,z) + Sqrt(x) + Sqrt(y) + Sqrt(z)), Def(lamda, Sqrt(x)*Sqrt(y) + Sqrt(y)*Sqrt(z) + Sqrt(x)*Sqrt(z))))),
    Variables(x, y, z),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC), Or(And(NotEqual(x, 0), NotEqual(y, 0)), And(NotEqual(x, 0), NotEqual(z, 0)), And(NotEqual(y, 0), NotEqual(z, 0))))))

make_entry(ID("31a3ba"),
    Formula(Equal(CarlsonRD(x, y, z), Where(2 * CarlsonRD(x+lamda, y+lamda, z+lamda) + 3/(Sqrt(z)*(z+lamda)), Def(lamda, Sqrt(x)*Sqrt(y) + Sqrt(y)*Sqrt(z) + Sqrt(x)*Sqrt(z))))),
    Variables(x, y, z),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC), NotEqual(z, 0))))

make_entry(ID("791c44"),
    Formula(Equal(CarlsonRJ(x, y, z, w), Where(2 * CarlsonRJ(x+lamda, y+lamda, z+lamda, w+lamda) + (6/d)*CarlsonRC(1, 1+delta/d**2),
        Def(lamda, Sqrt(x)*Sqrt(y) + Sqrt(y)*Sqrt(z) + Sqrt(x)*Sqrt(z)),
        Def(delta, (w-x)*(w-y)*(w-z)),
        Def(d, (Sqrt(w)+Sqrt(x))*(Sqrt(w)+Sqrt(y))*(Sqrt(w)+Sqrt(z)))))),
    Variables(x, y, z, w),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC), Element(w, CC),
        GreaterEqual(Re(x), 0),
        GreaterEqual(Re(y), 0),
        GreaterEqual(Re(z), 0),
        Greater(Re(w), 0),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)), And(NotEqual(x, 0), NotEqual(z, 0)), And(NotEqual(y, 0), NotEqual(z, 0))))))

make_entry(ID("8f5d76"),
    Formula(Equal(CarlsonRC(x, y), Where(2 * CarlsonRC(x+lamda, y+lamda), Def(lamda, y + 2*Sqrt(x)*Sqrt(y))))),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC))))

make_entry(ID("7609c8"),
    Formula(Equal(2*CarlsonRG(x, y, z), z*CarlsonRF(x,y,z) - ((x-z)*(y-z))/3 * CarlsonRD(x, y, z) + (Sqrt(x)*Sqrt(y)) / Sqrt(z))),
    Variables(x, y, z),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC), Or(NotEqual(x, 0), NotEqual(y, 0)), NotEqual(z, 0))))

make_entry(ID("6dda7a"),
    Formula(Equal(CarlsonRD(x,y,z) + CarlsonRD(y,z,x) + CarlsonRD(z,x,y), 3/(Sqrt(x)*Sqrt(y)*Sqrt(z)))),
    Variables(x, y, z),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC), NotEqual(x, 0), NotEqual(y, 0)), NotEqual(z, 0)))

make_entry(ID("38fa65"),
    Formula(Where(Equal(CarlsonRF(x+lamda, y+lamda, lamda) + CarlsonRF(x+mu, y+mu, mu), CarlsonRF(x, y, 0)),
        Def(mu, (x*y)/lamda))),
    Variables(x, y, lamda),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(y, OpenInterval(0, Infinity)),
        Element(lamda, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("4eac3f"),
    Formula(Where(Equal(CarlsonRJ(x+lamda, y+lamda, lamda, w+lamda) + CarlsonRJ(x+mu, y+mu, mu, w+mu), CarlsonRJ(x, y, 0, w)
            - 3*CarlsonRC(w**2*(lamda+mu+x+y), w*(w+lamda)*(w+mu))),
        Def(mu, (x*y)/lamda))),
    Variables(x, y, w, lamda),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(y, OpenInterval(0, Infinity)), Element(w, OpenInterval(0, Infinity)),
        Element(lamda, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("a203e9"),
    Formula(Where(Equal(CarlsonRD(lamda, x+lamda, y+lamda) + CarlsonRD(mu, x+mu, y+mu), CarlsonRD(0, x, y) - 3/(y*Sqrt(x+y+lamda+mu))),
        Def(mu, (x*y)/lamda))),
    Variables(x, y, lamda),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(y, OpenInterval(0, Infinity)),
        Element(lamda, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("9357b9"),
    Formula(Equal(CarlsonRF(x, y, z), Div(1,2) * Integral(1/(Sqrt(t+x)*Sqrt(t+y)*Sqrt(t+z)), For(t, 0, Infinity)))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0)))
    )))

make_entry(ID("dab889"),
    Formula(Equal(CarlsonRG(x, y, z), Div(1,4) * Integral(t/(Sqrt(t+x)*Sqrt(t+y)*Sqrt(t+z)) * (x/(t+x)+y/(t+y)+z/(t+z)), For(t, 0, Infinity)))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenInterval(-Infinity, 0))),
    )))

make_entry(ID("02a8d7"),
    Formula(Equal(CarlsonRJ(x, y, z, w), Div(3,2) * Integral(1/((t+w)*Sqrt(t+x)*Sqrt(t+y)*Sqrt(t+z)), For(t, 0, Infinity)))),
    Variables(x, y, z, w),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(w, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0)))
    )))

make_entry(ID("f3b8dc"),
    Formula(Equal(CarlsonRC(x, y), Div(1,2) * Integral(1/((t+y)*Sqrt(t+x)), For(t, 0, Infinity)))),
    Variables(x, y),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenClosedInterval(-Infinity, 0)))
    )))

make_entry(ID("944a14"),
    Formula(Equal(CarlsonRD(x, y, z), Div(3,2) * Integral(1/((t+x)*(t+y)*(t+z)**Div(3,2)), For(t, 0, Infinity)))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Or(NotEqual(x, 0), NotEqual(y, 0))
    )))

make_entry(ID("da16db"),
    Formula(Equal(CarlsonRF(0, y, z), Integral(1/Sqrt(y*Cos(theta)**2 + z*Sin(theta)**2), For(theta, 0, Pi/2)))),
    Variables(y, z),
    Assumptions(And(
        Element(y, CC),
        Element(z, CC),
        Greater(Re(y), 0),
        Greater(Re(z), 0),
    )))

make_entry(ID("7fbbe8"),
    Formula(Equal(CarlsonRG(0, y, z), Div(1,2) * Integral(Sqrt(y*Cos(theta)**2 + z*Sin(theta)**2), For(theta, 0, Pi/2)))),
    Variables(y, z),
    Assumptions(And(
        Element(y, CC),
        Element(z, CC),
        GreaterEqual(Re(y), 0),
        GreaterEqual(Re(z), 0),
    )))

make_entry(ID("9a0bc8"),
    Formula(Equal(CarlsonRD(0, y, z), 3 * Integral(Sin(theta)**2/(y*Cos(theta)**2 + z*Sin(theta)**2)**Div(3,2), For(theta, 0, Pi/2)))),
    Variables(y, z),
    Assumptions(And(
        Element(y, CC),
        Element(z, CC),
        Greater(Re(y), 0),
        Greater(Re(z), 0),
    )))

make_entry(ID("8f0a91"),
    Formula(Equal(CarlsonRF(x, y, z), Div(1,4*Pi) * Integral(
        Integral(Sin(theta) / Sqrt(x*Sin(theta)**2*Cos(phi)**2 + y*Sin(theta)**2*Sin(phi)**2 + z*Cos(theta)**2), For(theta, 0, Pi)),
        For(phi, 0, 2*Pi)))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, CC),
        Element(y, CC),
        Element(z, CC),
        GreaterEqual(Re(x), 0),
        GreaterEqual(Re(y), 0),
        GreaterEqual(Re(z), 0),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0)))
    )))

make_entry(ID("0d8639"),
    Formula(Equal(CarlsonRG(x, y, z), Div(1,4*Pi) * Integral(
        Integral(Sqrt(x*Sin(theta)**2*Cos(phi)**2 + y*Sin(theta)**2*Sin(phi)**2 + z*Cos(theta)**2) * Sin(theta), For(theta, 0, Pi)),
        For(phi, 0, 2*Pi)))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, CC),
        Element(y, CC),
        Element(z, CC),
        GreaterEqual(Re(x), 0),
        GreaterEqual(Re(y), 0),
        GreaterEqual(Re(z), 0),
    )))

make_entry(ID("5f0adb"),
    Equal(ComplexDerivative(CarlsonRF(x, y, z), For(x, x)), -(Div(1,6) * CarlsonRD(y, z, x))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("638fa6"),
    Equal(ComplexDerivative(CarlsonRG(x+t, y+t, z+t), For(t, t)), Div(1,2) * CarlsonRF(x + t, y + t, z + t)),
    Variables(x, y, z, t),
    Assumptions(And(
        Element(x, CC),
        Element(y, CC),
        Element(z, CC),
        Element(t, CC),
        NotElement(x + t, OpenClosedInterval(-Infinity, 0)),
        NotElement(y + t, OpenClosedInterval(-Infinity, 0)),
        NotElement(z + t, OpenClosedInterval(-Infinity, 0)))))

make_entry(ID("ce327b"),
    Equal(ComplexDerivative(CarlsonRF(x, y, z), For(x, x)) + ComplexDerivative(CarlsonRF(x, y, z), For(y, y)) + ComplexDerivative(CarlsonRF(x, y, z), For(z, z)),
        -Div(1, Sqrt(x)*Sqrt(y)*Sqrt(z))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("3e1435"),
    Equal(ComplexDerivative(CarlsonRG(x, y, z), For(x, x)) + ComplexDerivative(CarlsonRG(x, y, z), For(y, y)) + ComplexDerivative(CarlsonRG(x, y, z), For(z, z)),
        Div(1,2) * CarlsonRF(x, y, z)),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("644d75"),
    Equal(x * ComplexDerivative(CarlsonRF(x, y, z), For(x, x)) + y * ComplexDerivative(CarlsonRF(x, y, z), For(y, y)) + z * ComplexDerivative(CarlsonRF(x, y, z), For(z, z)),
        -(Div(1,2) * CarlsonRF(x, y, z))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("de8485"),
    Equal(ComplexDerivative(CarlsonRC(x, y), For(x, x)), Cases(
        Tuple(1/(2*(y-x)) * (CarlsonRC(x,y) - 1/(Sqrt(x))), NotEqual(x, y)),
        Tuple(-(Div(1,6) * x**(-Div(3,2))), Equal(x, y)))),
    Variables(x, y),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("741859"),
    Equal(ComplexDerivative(CarlsonRC(x, y), For(y, y)), Cases(
        Tuple(1/(2*(x-y)) * (CarlsonRC(x,y) - Sqrt(x)/y), NotEqual(x, y)),
        Tuple(-(Div(1,3) * x**(-Div(3,2))), Equal(x, y)))),
    Variables(x, y),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        NotEqual(x, y))))

make_entry(ID("b576e6"),
    SymbolDefinition(CarlsonHypergeometricR, CarlsonHypergeometricR(-a, b, z), "Carlson multivariate hypergeometric function"),
    References("https://dlmf.nist.gov/19.19",
        "https://doi.org/10.6028/jres.107.034"
    ))

make_entry(ID("a82bd6"),
    SymbolDefinition(CarlsonHypergeometricT, CarlsonHypergeometricT(N, b, z), "Term in expansion of Carlson multivariate hypergeometric function"))

make_entry(ID("72b5bd"),
    Formula(Equal(CarlsonRC(1, x), Hypergeometric2F1(1, Div(1,2), Div(3,2), 1-x))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("b2fdfe"),
    Formula(Equal(CarlsonRF(0, x, 1), (Pi/2) * Hypergeometric2F1(Div(1,2), Div(1,2), 1, 1-x))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("e98dd0"),
    Formula(Equal(CarlsonRG(0, x, 1), (Pi/4) * Hypergeometric2F1(-Div(1,2), Div(1,2), 1, 1-x))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("9bfd88"),
    Formula(Equal(CarlsonRD(0, x, 1), (3*Pi/4) * Hypergeometric2F1(Div(1,2), Div(3,2), 2, 1-x))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("bbf003"),
    Formula(Equal(CarlsonRD(0, 1, x), (3*Pi/(4*x)) * Hypergeometric2F1(Div(1,2), Div(1,2), 2, 1-x))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("13f252"),
    Formula(Where(Equal(CarlsonHypergeometricR(-a, List(Repeat(beta, n)), List(z_(k), For(k, 1, n))),
        A**(-a) * CarlsonHypergeometricR(-a, List(Repeat(beta, n)), List(z_(k) / A, For(k, 1, n)))),
        Def(A, (1/n) * Sum(z_(k), For(k, 1, n))))),
    Variables(a, beta, z_, n),
    Assumptions(And(Element(a, RR),
        Element(beta, OpenInterval(0, Infinity)),
        Element(n, ZZGreaterEqual(1)),
        All(And(Element(z_(k), CC), Less(Abs(1 - n * z_(k) / Sum(z_(j), For(j, 1, n))), 1)), ForElement(k, Range(1, n))),
        All(Greater(Re(z_(k)), 0), ForElement(k, Range(1, n))),      )))

make_entry(ID("4cb707"),
    Formula(Where(Equal(CarlsonHypergeometricR(-a, List(b_(k), For(k, 1, n)), List(z_(k), For(k, 1, n))),
        Sum(RisingFactorial(a, N) / RisingFactorial(c, N) * CarlsonHypergeometricT(N, List(b_(k), For(k, 1, n)), List(1 - z_(k), For(k, 1, n))),
            For(N, 0, Infinity))), Def(c, Sum(b_(k), For(k, 1, n))))),
    Variables(a, b_, z_, n),
    Assumptions(And(Element(a, RR), Element(n, ZZGreaterEqual(1)),
        All(Element(b_(k), RR), ForElement(k, Range(1, n))),
        All(And(Element(z_(k), CC), Less(Abs(1 - z_(k)), 1)), ForElement(k, Range(1, n))),
        Greater(Sum(b_(k), For(k, 1, n)), 0),
        All(Greater(Re(z_(k)), 0), ForElement(k, Range(1, n))),      )))

make_entry(ID("2443de"),
    Formula(Where(Equal(CarlsonHypergeometricR(-a, List(b_(k), For(k, 1, n)), List(z_(k), For(k, 1, n))),
        z_(n)**(-a) * 
        Sum(RisingFactorial(a, N) / RisingFactorial(c, N) * CarlsonHypergeometricT(N, List(b_(k), For(k, 1, n - 1)), List(1 - z_(k) / z_(n), For(k, 1, n - 1))),
            For(N, 0, Infinity))), Def(c, Sum(b_(k), For(k, 1, n))))),
    Variables(a, b_, z_, n),
    Assumptions(And(Element(a, RR), Element(n, ZZGreaterEqual(1)),
        All(Element(b_(k), RR), ForElement(k, Range(1, n))),
        Element(z_(n), SetMinus(CC, Set(0))),
        All(And(Element(z_(k), CC), Less(Abs(1 - z_(k) / z_(n)), 1)), ForElement(k, Range(1, n - 1))),
        Greater(Sum(b_(k), For(k, 1, n)), 0),
        All(Greater(Re(z_(k)), 0), ForElement(k, Range(1, n))),      )))

make_entry(ID("a21395"),
    Formula(Where(Equal(CarlsonHypergeometricR(-a, List(Repeat(beta, n)), List(z_(k), For(k, 1, n))),
        A**(-a) * 
        Sum(RisingFactorial(a, N) / RisingFactorial(n*beta, N) * CarlsonHypergeometricT(N, List(Repeat(beta, n)), List(1 - z_(k) / A, For(k, 1, n))),
            For(N, 0, Infinity))),
        Def(A, (1/n) * Sum(z_(k), For(k, 1, n))))),
    Variables(a, beta, z_, n),
    Assumptions(And(Element(a, RR),
        Element(beta, OpenInterval(0, Infinity)),
        Element(n, ZZGreaterEqual(1)),
        All(And(Element(z_(k), CC), Less(Abs(1 - n * z_(k) / Sum(z_(j), For(j, 1, n))), 1)), ForElement(k, Range(1, n))),
        All(Greater(Re(z_(k)), 0), ForElement(k, Range(1, n))),      )))

make_entry(ID("da47f6"),
    Formula(Equal(CarlsonHypergeometricT(N, List(b_(k), For(k, 1, n)), List(z_(k), For(k, 1, n))),
        Sum(Product(RisingFactorial(b_(k), m_(k)) / Factorial(m_(k)) * z_(k)**m_(k), For(k, 1, n)),
            ForElement(Tuple(m_(k), For(k, 1, n)), CartesianPower(Parentheses(ZZGreaterEqual(0)), n)), Equal(Sum(m_(k), For(k, 1, n)), N)))),
    Variables(n, N, b_, z_),
    Assumptions(And(Element(n, ZZGreaterEqual(1)),
        Element(N, ZZGreaterEqual(0)),
        All(Element(b_(k), CC), ForElement(k, Range(1, n))),
        All(Element(z_(k), CC), ForElement(k, Range(1, n))))))

make_entry(ID("0a7f30"),
    Formula(Equal(CarlsonHypergeometricT(N, List(Repeat(beta, n)), List(z_(k), For(k, 1, n))),
        Sum(Where((-1)**(M+N) * RisingFactorial(beta, M) * Product(SymmetricPolynomial(k, List(z_(k), For(k, 1, n)))**m_(k) / Factorial(m_(k)), For(k, 1, n)),
                Def(M, Sum(m_(k), For(k, 1, n)))),
            ForElement(Tuple(m_(k), For(k, 1, n)), CartesianPower(Parentheses(ZZGreaterEqual(0)), n)), Equal(Sum(k * m_(k), For(k, 1, n)), N)))),
    Variables(n, beta, N, z_),
    Assumptions(And(Element(n, ZZGreaterEqual(1)),
        Element(beta, OpenInterval(0, Infinity)),
        Element(N, ZZGreaterEqual(0)),
        All(Element(z_(k), CC), ForElement(k, Range(1, n))))))

make_entry(ID("8f71cb"),
    Formula(Equal(CarlsonRF(x, y, z), CarlsonHypergeometricR(-Div(1,2), [Div(1,2), Div(1,2), Div(1,2)], [x, y, z]))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0)))
    )))

make_entry(ID("fda084"),
    Formula(Equal(CarlsonRG(x, y, z), CarlsonHypergeometricR(Div(1,2), [Div(1,2), Div(1,2), Div(1,2)], [x, y, z]))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenInterval(-Infinity, 0))),
    )))

make_entry(ID("b2cd79"),
    Formula(Equal(CarlsonRJ(x, y, z, w), CarlsonHypergeometricR(-Div(3,2), [Div(1,2), Div(1,2), Div(1,2), 1], [x, y, z, w]))),
    Variables(x, y, z, w),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(w, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0)))
    )))

make_entry(ID("e93f43"),
    Formula(Equal(CarlsonRJ(x, y, z, w), CarlsonHypergeometricR(-Div(3,2), [Div(1,2), Div(1,2), Div(1,2), Div(1,2), Div(1, 2)], [x, y, z, w, w]))),
    Variables(x, y, z, w),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(w, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0)))
    )))

make_entry(ID("7ded8f"),
    Formula(Equal(CarlsonRC(x, y), CarlsonHypergeometricR(-Div(1,2), [Div(1,2), 1], [x, y]))),
    Variables(x, y),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenClosedInterval(-Infinity, 0)))
    )))

make_entry(ID("42c7f1"),
    Formula(Equal(CarlsonRC(x, y), CarlsonHypergeometricR(-Div(1,2), [Div(1,2), Div(1, 2), Div(1, 2)], [x, y, y]))),
    Variables(x, y),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenClosedInterval(-Infinity, 0)))
    )))

make_entry(ID("8d304b"),
    Formula(Equal(CarlsonRD(x, y, z), CarlsonHypergeometricR(-Div(3,2), [Div(1,2), Div(1,2), Div(3,2)], [x, y, z]))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Or(NotEqual(x, 0), NotEqual(y, 0))
    )))

make_entry(ID("e1a3fb"),
    Formula(Equal(CarlsonRD(x, y, z), CarlsonHypergeometricR(-Div(3,2), [Div(1,2), Div(1,2), Div(1,2), Div(1,2), Div(1,2)], [x, y, z, z, z]))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(y, SetMinus(CC, OpenInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Or(NotEqual(x, 0), NotEqual(y, 0))
    )))

make_entry(ID("cbcad9"),
    Formula(Equal(CarlsonHypergeometricR(-a, List(b_(k), For(k, 1, n)),
        List(0, Step(z_(k), For(k, 2, n)))),
        Where(
            BetaFunction(a, c - b_(1)) / BetaFunction(a, c) *
            CarlsonHypergeometricR(-a, List(b_(k), For(k, 2, n)),
                List(z_(k), For(k, 2, n))),
            Def(c, -a + Sum(b_(k), For(k, 1, n)))))),
    Variables(a, b_, z_, n),
    Assumptions(And(
        Element(a, RR),
        Element(n, ZZGreaterEqual(1)),
        All(Element(b_(k), RR), ForElement(k, Range(1, n))),
        All(Element(z_(k), CC), ForElement(k, Range(2, n))),
        Greater(Sum(b_(k), For(k, 1, n)), 0),
        Greater(Sum(b_(k), For(k, 2, n)), a))),
    References("https://dlmf.nist.gov/19.16"))

make_entry(ID("d0c9ff"),
    Formula(Equal(CarlsonRF(0, y, z), (Pi / 2) * CarlsonHypergeometricR(-Div(1,2), [Div(1,2), Div(1,2)], [y, z]))),
    Variables(y, z),
    Assumptions(And(
        Element(y, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("00c331"),
    Formula(Equal(CarlsonRD(0, y, z), (3 * Pi / 4) * CarlsonHypergeometricR(-Div(3,2), [Div(1,2), Div(3,2)], [y, z]))),
    Variables(y, z),
    Assumptions(And(
        Element(y, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("37ffb7"),
    Formula(Equal(CarlsonRD(0, y, z), (3 * Pi / 4) * CarlsonHypergeometricR(-Div(3,2), [Div(1,2), Div(1,2), Div(1, 2), Div(1, 2)], [y, z, z, z]))),
    Variables(y, z),
    Assumptions(And(
        Element(y, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("5a8f57"),
    Formula(Equal(CarlsonRJ(0, y, z, w), (3 * Pi / 4) * CarlsonHypergeometricR(-Div(3,2), [Div(1,2), Div(1,2), 1], [y, z, w]))),
    Variables(y, z, w),
    Assumptions(And(
        Element(y, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(w, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("7314c4"),
    Formula(Equal(CarlsonRJ(0, y, z, w), (3 * Pi / 4) * CarlsonHypergeometricR(-Div(3,2), [Div(1,2), Div(1,2), Div(1, 2), Div(1, 2)], [y, z, w, w]))),
    Variables(y, z, w),
    Assumptions(And(
        Element(y, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(w, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("b4a735"),
    Formula(Equal(CarlsonRG(0, y, z), (Pi / 4) * CarlsonHypergeometricR(Div(1,2), [Div(1,2), Div(1,2)], [y, z]))),
    Variables(y, z),
    Assumptions(And(
        Element(y, SetMinus(CC, OpenClosedInterval(-Infinity, 0))),
        Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("a1f7ea"),
    Formula(Equal(CarlsonHypergeometricR(-a, List(b_(k), For(k, 1, n)), List(z_(k), For(k, 1, n))),
        Where(
            (1/BetaFunction(a,c)) * Integral(t**(c-1) * Product((t + z_(k))**(-b_(k)), For(k, 1, n)), For(t, 0, Infinity)),
        Def(c, -a+Sum(b_(j), For(j, 1, n)))))),
    Variables(a, b_, z_, n),
    Assumptions(And(Element(a, RR),
        Element(n, ZZGreaterEqual(1)),
        All(Element(b_(k), RR), ForElement(k, Range(1, n))),
        All(Element(z_(k), SetMinus(CC, OpenClosedInterval(-Infinity, 0))), ForElement(k, Range(1, n))),
        Greater(Sum(b_(k), For(k, 1, n)), a, 0))))

make_entry(ID("c5d388"),
    Formula(Equal(CarlsonHypergeometricR(-a, List(b_(k), For(k, 1, n)), List(z_(k), For(k, 1, n))),
        Where(
            (1/BetaFunction(a,c)) * Integral(t**(a-1) * Product((1 + t * z_(k))**(-b_(k)), For(k, 1, n)), For(t, 0, Infinity)),
        Def(c, -a+Sum(b_(j), For(j, 1, n)))))),
    Variables(a, b_, z_, n),
    Assumptions(And(Element(a, RR),
        Element(n, ZZGreaterEqual(1)),
        All(Element(b_(k), RR), ForElement(k, Range(1, n))),
        All(Element(z_(k), SetMinus(CC, OpenClosedInterval(-Infinity, 0))), ForElement(k, Range(1, n))),
        Greater(Sum(b_(k), For(k, 1, n)), a, 0))))

make_entry(ID("2c1df7"),
    Formula(Equal(CarlsonHypergeometricR(-a, List(b_(k), For(k, 1, n)), List(lamda * z_(k), For(k, 1, n))),
        lamda**(-a) * CarlsonHypergeometricR(-a, List(b_(k), For(k, 1, n)), List(z_(k), For(k, 1, n))))),
    Variables(a, b_, z_, n, lamda),
    Assumptions(And(Element(a, RR),
        Element(n, ZZGreaterEqual(1)),
        All(Element(b_(k), RR), ForElement(k, Range(1, n))),
        All(Element(z_(k), SetMinus(CC, OpenClosedInterval(-Infinity, 0))), ForElement(k, Range(1, n))),
        Greater(Sum(b_(k), For(k, 1, n)), a, 0),
        Element(lamda, OpenInterval(0, Infinity)))))

make_entry(ID("b81ca0"),
    Formula(Equal(CarlsonHypergeometricR(-a, List(b_(k), For(k, 1, n)), List(Repeat(z, n))),
        z**(-a))),
    Variables(a, b_, n, z),
    Assumptions(And(Element(a, RR),
        All(Element(b_(k), RR), ForElement(k, Range(1, n))),
        Greater(Sum(b_(k), For(k, 1, n)), a, 0),
        Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("926b36"),
    Formula(Where(LessEqual(Abs(CarlsonHypergeometricR(-a, List(Repeat(beta, n)), List(z_(k), For(k, 1, n))) -
        A**(-a) * Sum(RisingFactorial(a, N) / RisingFactorial(n * beta, N) * CarlsonHypergeometricT(N, List(Repeat(beta, n)), List(z_(k), For(k, 1, n))),
            For(N, 0, K - 1))),
                Abs(A**(-a)) * RisingFactorial(Abs(a), K) * M**K / (Factorial(K) * (1 - M)**Max(Abs(a), 1))),
        Def(A, (1/n) * Sum(z_(k), For(k, 1, n))),
        Def(Z_(k), 1 - z_(k) / A),
        Def(M, Max(Step(Abs(Z_(k)), For(k, 1, n)))))),
    Variables(a, beta, z_, n, K),
    Assumptions(And(Element(a, RR),
        Element(beta, OpenInterval(0, Infinity)),
        Element(n, ZZGreaterEqual(1)),
        Element(K, ZZGreaterEqual(1)),
        All(And(Element(z_(k), CC), Less(Abs(1 - n * z_(k) / Sum(z_(j), For(j, 1, n))), 1)), ForElement(k, Range(1, n))),
        All(Greater(Re(z_(k)), 0), ForElement(k, Range(1, n))),      )),
    References("https://doi.org/10.6028/jres.107.034"))

make_entry(ID("799894"),
    Formula(Where(LessEqual(Abs(CarlsonRF(x, y, z) -
         A**(-Div(1,2)) * (1 - E/10 + F/14 + E**2/24 - 3*E*F/44 - 5*E**3/208 + 3*F**2/104 + E**2*F/16)),
            Decimal("0.2") * Abs(A**(-Div(1,2))) * M**8 / (1 - M)),
        Def(A, (x+y+z)/3),
        Def(X, 1-x/A),
        Def(Y, 1-y/A),
        Def(Z, 1-z/A),
        Def(E, X*Y + X*Z + Y*Z),
        Def(F, X*Y*Z),
        Def(M, Max(Abs(X), Abs(Y), Abs(Z))))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, CC),
        Element(y, CC),
        Element(z, CC),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0))),
        Less(Max(Abs(Arg(x)-Arg(y)), Abs(Arg(x)-Arg(z)), Abs(Arg(y)-Arg(z))), Pi),
        Less(Abs(1-3*x/(x+y+z)), 1),
        Less(Abs(1-3*y/(x+y+z)), 1),
        Less(Abs(1-3*z/(x+y+z)), 1))),
    References("https://doi.org/10.6028/jres.107.034"))

make_entry(ID("618a9f"),
    Formula(Where(LessEqual(Abs(CarlsonRJ(x, y, z, w) -
         A**(-Div(3,2)) * (1 - 3*E/14 + F/6 + 9*E**2/88 - 3*G/22 - 9*E*F/52 + 3*H/26 - E**3/16 + 3*F**2/40 + 3*E*G/20 + 45*E**2*F/272 - 9*F*G/68 - 9*E*H/68)),
            Decimal("3.4") * Abs(A**(-Div(3,2))) * M**8 / (1 - M)**Div(3,2)),
        Def(A, (x+y+z+2*w)/5),
        Def(X, 1-x/A),
        Def(Y, 1-y/A),
        Def(Z, 1-z/A),
        Def(W, Parentheses(-X-Y-Z)/2),           Def(E, X*Y + X*Z + Y*Z - 3*W**2),
        Def(F, X*Y*Z + 2*E*W + 4*W**3),
        Def(G, (2*X*Y*Z + E*W + 3*W**3)*W),
        Def(H, X*Y*Z*W**2),
        Def(M, Max(Abs(X), Abs(Y), Abs(Z), Abs(W))))),
    Variables(x, y, z, w),
    Assumptions(And(
        Element(x, CC),
        Element(y, CC),
        Element(z, CC),
        Element(w, CC),
        GreaterEqual(Re(x), 0),
        GreaterEqual(Re(y), 0),
        GreaterEqual(Re(z), 0),
        Greater(Re(w), 0),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0))),
        Less(Abs(1-5*x/(x+y+z+2*w)), 1),
        Less(Abs(1-5*y/(x+y+z+2*w)), 1),
        Less(Abs(1-5*z/(x+y+z+2*w)), 1),
        Less(Abs(1-5*z/(x+y+z+2*w)), 1))),
    References("https://doi.org/10.6028/jres.107.034"))

make_entry(ID("c03f78"),
    Formula(LessEqual(CarlsonRF(x, y, z), 1/(x*y*z)**Div(1,6))),
    Variables(x, y, z),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)),
        Element(y, OpenInterval(0, Infinity)),
        Element(z, OpenInterval(0, Infinity)))),
    References("https://dlmf.nist.gov/19.24"))

make_entry(ID("1d2811"),
    Formula(GreaterEqual(CarlsonRF(x, y, z), 3/(Sqrt(x)+Sqrt(y)+Sqrt(z)))),
    Variables(x, y, z),
    Assumptions(And(Element(x, ClosedOpenInterval(0, Infinity)),
        Element(y, ClosedOpenInterval(0, Infinity)),
        Element(z, ClosedOpenInterval(0, Infinity))),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0)))))

make_entry(ID("07584a"),
    Formula(LessEqual(CarlsonRG(x, y, z), Min(Sqrt((x+y+z)/3), (x**2+y**2+z**2)/(3*Sqrt(x*y*z))))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, ClosedOpenInterval(0, Infinity)),
        Element(y, ClosedOpenInterval(0, Infinity)),
        Element(z, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("edcf6c"),
    Formula(GreaterEqual(CarlsonRG(x, y, z), (Sqrt(x)+Sqrt(y)+Sqrt(z))/3)),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, ClosedOpenInterval(0, Infinity)),
        Element(y, ClosedOpenInterval(0, Infinity)),
        Element(z, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("a4e47f"),
    Formula(LessEqual(CarlsonRJ(x, y, z, w), (x*y*z*w**2)**(-Div(3,10)))),
    Variables(x, y, z, w),
    Assumptions(And(
        Element(x, OpenInterval(0, Infinity)),
        Element(y, OpenInterval(0, Infinity)),
        Element(z, OpenInterval(0, Infinity)),
        Element(w, OpenInterval(0, Infinity)))))

make_entry(ID("d3b39c"),
    Formula(GreaterEqual(CarlsonRJ(x, y, z, w), (5/(Sqrt(x)+Sqrt(y)+Sqrt(z)+2*Sqrt(w)))**3)),
    Variables(x, y, z, w),
    Assumptions(And(
        Element(x, ClosedOpenInterval(0, Infinity)),
        Element(y, ClosedOpenInterval(0, Infinity)),
        Element(z, ClosedOpenInterval(0, Infinity)),
        Element(w, OpenInterval(0, Infinity)),
        Or(And(NotEqual(x, 0), NotEqual(y, 0)),
           And(NotEqual(x, 0), NotEqual(z, 0)),
           And(NotEqual(y, 0), NotEqual(z, 0))))))

make_entry(ID("230a49"),
    Formula(LessEqual(CarlsonRD(x, y, z), (x*y*z**3)**(-Div(3,10)))),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, OpenInterval(0, Infinity)),
        Element(y, OpenInterval(0, Infinity)),
        Element(z, OpenInterval(0, Infinity)))))

make_entry(ID("34e932"),
    Formula(GreaterEqual(CarlsonRD(x, y, z), (5/(Sqrt(x)+Sqrt(y)+3*Sqrt(z)))**3)),
    Variables(x, y, z),
    Assumptions(And(
        Element(x, ClosedOpenInterval(0, Infinity)),
        Element(y, ClosedOpenInterval(0, Infinity)),
        Element(z, OpenInterval(0, Infinity)))))

make_entry(ID("688efb"),
    Formula(LessEqual(CarlsonRC(x, y), 1/(x*y**2)**Div(1,6))),
    Variables(x, y),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)),
        Element(y, OpenInterval(0, Infinity)))))

make_entry(ID("978287"),
    Formula(GreaterEqual(CarlsonRC(x, y), 3/(Sqrt(x)+2*Sqrt(y)))),
    Variables(x, y),
    Assumptions(And(Element(x, ClosedOpenInterval(0, Infinity)),
        Element(y, OpenInterval(0, Infinity)))))

make_entry(ID("0e209c"),
    Formula(LessEqual(CarlsonRF(0, y, z), Div(1, 2 * Sqrt(Max(y, z))) * (Pi + Abs(Log(y/z))))),
    Variables(y, z),
    Assumptions(And(Element(y, OpenInterval(0, Infinity)), Element(z, OpenInterval(0, Infinity)))))

make_entry(ID("2e40b8"),
    Formula(GreaterEqual(CarlsonRF(0, y, z), (2*Log(2))/Sqrt(Max(y, z)))),
    Variables(y, z),
    Assumptions(And(Element(y, OpenInterval(0, Infinity)), Element(z, OpenInterval(0, Infinity)))))

make_entry(ID("62eade"),
    Formula(LessEqual(CarlsonRG(0, y, z), Pi*Sqrt(Max(y, z))/4)),
    Variables(y, z),
    Assumptions(And(Element(y, ClosedOpenInterval(0, Infinity)), Element(z, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("36ae10"),
    Formula(GreaterEqual(CarlsonRG(0, y, z), Sqrt(Max(y, z))/2)),
    Variables(y, z),
    Assumptions(And(Element(y, ClosedOpenInterval(0, Infinity)), Element(z, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("add3ea"),
    Formula(LessEqual(CarlsonRJ(0, y, z, w), (3*Pi/4) * (y*z*w**2)**(-Div(3,8)))),
    Variables(y, z, w),
    Assumptions(And(Element(y, OpenInterval(0, Infinity)), Element(z, OpenInterval(0, Infinity)), Element(w, OpenInterval(0, Infinity)))))

make_entry(ID("60541a"),
    Formula(GreaterEqual(CarlsonRJ(0, y, z, w), (3*Pi)/(2*Sqrt(w*(2*y*z+y*w+z*w))))),
    Variables(y, z, w),
    Assumptions(And(Element(y, OpenInterval(0, Infinity)), Element(z, OpenInterval(0, Infinity)), Element(w, OpenInterval(0, Infinity)))))

make_entry(ID("d70b12"),
    Formula(LessEqual(CarlsonRD(0, y, z), (3*Pi/4) * (y*z**3)**(-Div(3,8)))),
    Variables(y, z),
    Assumptions(And(Element(y, OpenInterval(0, Infinity)), Element(z, OpenInterval(0, Infinity)))))

make_entry(ID("255142"),
    Formula(GreaterEqual(CarlsonRD(0, y, z), (3*Pi)/(2*z*Sqrt((3*y+y+z))))),
    Variables(y, z),
    Assumptions(And(Element(y, OpenInterval(0, Infinity)), Element(z, OpenInterval(0, Infinity)))))

make_entry(ID("398bb7"),
    Formula(Equal(Log(x / y), (x-y)*CarlsonRC((x+y)**2/4, x*y))),
    Variables(x, y),
    Assumptions(And(Element(y, OpenInterval(0, Infinity)), Element(x, OpenInterval(0, Infinity)))))

make_entry(ID("7a9dad"),
    Formula(Equal(Atan(x / y), x * CarlsonRC(y**2, y**2+x**2))),
    Variables(x, y),
    Assumptions(And(Element(y, OpenInterval(0, Infinity)), Element(x, RR))))

make_entry(ID("2cdd2f"),
    Formula(Equal(Atanh(x / y), x * CarlsonRC(y**2, y**2 - x**2))),
    Variables(x, y),
    Assumptions(And(Element(y, OpenInterval(0, Infinity)), Element(x, OpenInterval(-y, y)))))

make_entry(ID("584a61"),
    Formula(Equal(Asin(x / y), x * CarlsonRC(y**2 - x**2, y**2))),
    Variables(x, y),
    Assumptions(And(Element(y, OpenInterval(0, Infinity)), Element(x, ClosedInterval(-y, y)))))

make_entry(ID("423b36"),
    Formula(Equal(Asinh(x / y), x * CarlsonRC(y**2 + x**2, y**2))),
    Variables(x, y),
    Assumptions(And(Element(y, OpenInterval(0, Infinity)), Element(x, RR))))

make_entry(ID("33e034"),
    Formula(Equal(Acos(x / y), Sqrt(y**2-x**2) * CarlsonRC(x**2, y**2))),
    Variables(x, y),
    Assumptions(And(Element(y, OpenInterval(0, Infinity)), Element(x, ClosedInterval(0, y)))))

make_entry(ID("d9765b"),
    Formula(Equal(Acosh(x / y), Sqrt(x**2-y**2) * CarlsonRC(x**2, y**2))),
    Variables(x, y),
    Assumptions(And(Element(y, OpenInterval(0, Infinity)), Element(x, ClosedOpenInterval(y, Infinity)))))

make_entry(ID("124339"),
    Formula(Where(Equal(WeierstrassP(f(z), tau), z), Def(f(z), CarlsonRF(z - EllipticRootE(1, tau), z - EllipticRootE(2, tau), z - EllipticRootE(3, tau))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("5c2b08"),
    Formula(Equal(CarlsonRC(0, 0), UnsignedInfinity)))

make_entry(ID("1acb07"),
    Formula(Equal(CarlsonRC(1, 0), Infinity)))

make_entry(ID("e464ec"),
    Formula(Equal(CarlsonRC(0, 1), Pi / 2)))

make_entry(ID("d38c27"),
    Formula(Equal(CarlsonRC(1, 1), 1)))

make_entry(ID("eac389"),
    Formula(Equal(CarlsonRC(1, 2), Pi / 4)))

make_entry(ID("a15c03"),
    Formula(Equal(CarlsonRC(2, 1), Log(1 + Sqrt(2)))))

make_entry(ID("35cb93"),
    Formula(Equal(CarlsonRC(0, -1), -((Pi * ConstI) / 2))))

make_entry(ID("56d1bc"),
    Formula(Equal(CarlsonRC(-1, 0), -(ConstI * Infinity))))

make_entry(ID("25435b"),
    Formula(Equal(CarlsonRC(1, -1), ((Sqrt(2) * Log(1+Sqrt(2)))/2 - (Pi*Sqrt(2)/4)*ConstI))))

make_entry(ID("7ea1ad"),
    Formula(Equal(CarlsonRC(-1, 1), (Pi*Sqrt(2)/4 - ((Sqrt(2) * Log(1+Sqrt(2))) / 2) * ConstI))))

make_entry(ID("7cbe17"),
    Formula(Equal(CarlsonRC(x, 0), Cases(
        Tuple(Sign(1/Sqrt(x)) * Infinity, NotEqual(x, 0)),
        Tuple(UnsignedInfinity, Equal(x, 0))))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("ff58cf"),
    Formula(Equal(CarlsonRC(0, y), Cases(
        Tuple(Pi / (2 * Sqrt(y)), NotEqual(y, 0)),
        Tuple(UnsignedInfinity, Equal(y, 0))))),
    Variables(y),
    Assumptions(Element(y, CC)))

make_entry(ID("ad96f4"),
    Formula(Equal(CarlsonRC(x, x), 1/Sqrt(x))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("09a494"),
    Formula(Equal(CarlsonRC(x, 2*x), Pi/(4*Sqrt(x)))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("b136bd"),
    Formula(Equal(CarlsonRC(2*x, x), Log(1+Sqrt(2))/Sqrt(x))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("8c9ba1"),
    Formula(Equal(CarlsonRC(x, c*x), Cases(
        (Atan(Sqrt(c-1)) / Sqrt((c-1)*x), Greater(c, 1)),
        (1/Sqrt(x), Equal(c, 1)),
        (Atanh(Sqrt(1-c)) / Sqrt((1-c)*x), Less(c, 1))))),
    Variables(x, c),
    Assumptions(And(Element(x, CC), Element(c, OpenInterval(0, Infinity)))))

make_entry(ID("7348e3"),
    Formula(Equal(CarlsonRC(x, -(c*x)), 1/Sqrt((c+1)*x) * Cases(
        (Atanh(Sqrt(c+1)), Or(Less(Im(x), 0), And(Equal(Im(x), 0), GreaterEqual(Re(x), 0)))),
        (Atanh(Sqrt(c+1)) + Pi * ConstI, Otherwise)))),
    Variables(x, c),
    Assumptions(And(Element(x, CC), Element(c, OpenInterval(0, Infinity)))))

make_entry(ID("5ada5f"),
    Formula(Equal(CarlsonRC(x, y),
        Cases((Atan(Sqrt(y/x-1)) / Sqrt(y-x), Less(x, y)),
            (1/Sqrt(x), Equal(x, y)),
            (Atanh(Sqrt(1-y/x)) / Sqrt(x-y), Greater(x, y))))),
    Variables(x, y),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(y, OpenInterval(0, Infinity)))))

make_entry(ID("718f3a"),
    Formula(Equal(CarlsonRC(x, y),
        Cases((Acos(Sqrt(x/y)) / Sqrt(y-x), Less(x, y)),
            (1/Sqrt(x), Equal(x, y)),
            (Acosh(Sqrt(x/y)) / Sqrt(x-y), Greater(x, y))))),
    Variables(x, y),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(y, OpenInterval(0, Infinity)))))

make_entry(ID("de0638"),
    Formula(Equal(CarlsonRC(-x, -y), -(ConstI * CarlsonRC(x, y)))),
    Variables(x, y),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(y, OpenInterval(0, Infinity)))))

make_entry(ID("00cdb7"),
    Formula(Equal(CarlsonRC(x, -y), 1/Sqrt(x+y) * (Atanh(Sqrt(x/(x+y))) - Pi*ConstI/2))),
    Variables(x, y),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(y, OpenInterval(0, Infinity)))))

make_entry(ID("bc2f88"),
    Formula(Equal(CarlsonRC(-x, y), (1/Sqrt(x+y)) * (Pi/2 - Atanh(Sqrt(x/(x+y))) * ConstI))),
    Variables(x, y),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(y, OpenInterval(0, Infinity)))))

make_entry(ID("4becdd"),
    Formula(Equal(CarlsonRC(-x, y), Conjugate(ConstI * CarlsonRC(x, -y)))),
    Variables(x, y),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(y, OpenInterval(0, Infinity)))))

make_entry(ID("7b5755"),
    Formula(Equal(CarlsonRC(x, y), Cases(
        (Atan(Sqrt(y/x-1)) / Sqrt(y-x), NotEqual(x, y)),
        (1/Sqrt(x), Equal(x, y))))),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC), Or(Element(x, OpenInterval(0, Infinity)), And(Element(y, OpenInterval(0, Infinity)), NotElement(x, OpenInterval(-Infinity, 0)))))))

make_entry(ID("0cf60d"),
    Formula(Equal(CarlsonRC(x, y), Cases(
        (Atanh(Sqrt(1-y/x)) / Sqrt(x-y), NotEqual(x, y)),
        (1/Sqrt(x), Equal(x, y))))),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC), Or(Element(x, OpenInterval(0, Infinity)), And(Element(y, OpenInterval(0, Infinity)), NotElement(x, OpenInterval(-Infinity, 0)))))))

make_entry(ID("eb1d4f"),
    Formula(Equal(CarlsonRC(1, 1+y), Cases(
        (Atan(Sqrt(y)) / Sqrt(y), NotEqual(y, 0)),
        (1, Equal(y, 0))))),
    Variables(y),
    Assumptions(Element(y, CC)))

make_entry(ID("157ebb"),
    Formula(Equal(CarlsonRC(1, 1+y), Hypergeometric2F1(1, Div(1,2), Div(3,2), -y))),
    Variables(y),
    Assumptions(Element(y, CC)))

make_entry(ID("e39456"),
    Formula(Equal(CarlsonRF(0, 0, 0), UnsignedInfinity)))

make_entry(ID("9a95a5"),
    Formula(Equal(CarlsonRF(0, 0, 1), Infinity)))

make_entry(ID("8bb972"),
    Formula(Equal(CarlsonRF(0, 1, 1), Pi / 2)))

make_entry(ID("c166ca"),
    Formula(Equal(CarlsonRF(1, 1, 1), 1)))

make_entry(ID("4cd504"),
    Formula(Equal(CarlsonRF(1, 1, 2), Log(1 + Sqrt(2)))))

make_entry(ID("0bf328"),
    Formula(Equal(CarlsonRF(1, 2, 2), Pi / 4)))

make_entry(ID("28237a"),
    Formula(Equal(CarlsonRF(0, 1, 2), Gamma(Div(1,4))**2 / (4*Sqrt(2*Pi)))))

make_entry(ID("f1dd8a"),
    Formula(Equal(CarlsonRF(0, 1, -1), (Gamma(Div(1,4))**2 / (4*Sqrt(2*Pi)) * (1 - ConstI)))))

make_entry(ID("4c1988"),
    Formula(Equal(CarlsonRF(0, 2, 4), (Gamma(Div(1,4))**2 / (8*Sqrt(Pi))))))

make_entry(ID("6c4567"),
    Formula(Equal(CarlsonRF(0, Div(1, 2), 1), (Gamma(Div(1,4))**2 / (4*Sqrt(Pi))))))

make_entry(ID("90af98"),
    Formula(Equal(CarlsonRF(0, 0, -1), -(ConstI * Infinity))))

make_entry(ID("3a84d6"),
    Formula(Equal(CarlsonRF(0, -1, -1), -(Pi * ConstI) / 2)))

make_entry(ID("6674bb"),
    Formula(Equal(CarlsonRF(-1, -1, -1), -ConstI)))

make_entry(ID("5c178f"),
    Formula(Equal(CarlsonRF(0, -1, -2), -((Gamma(Div(1,4))**2 / (4*Sqrt(2*Pi)))*ConstI))))

make_entry(ID("e30d7e"),
    Formula(Equal(CarlsonRF(0, 1, 12*Sqrt(2)-16), (2+Sqrt(2)) * Gamma(Div(1,4))**2 / (16 * Sqrt(Pi)))))

make_entry(ID("67e015"),
    Formula(Equal(CarlsonRF(0, Gamma(Div(1,4))**4/(16*Pi), Gamma(Div(1,4))**4/(32*Pi)), 1)))

make_entry(ID("8519dd"),
    Formula(Equal(CarlsonRF(0, Gamma(Div(1,4))**4/(32*Pi), -Gamma(Div(1,4))**4/(32*Pi)), 1-ConstI)))

make_entry(ID("cf5caa"),
    Formula(Equal(CarlsonRF(0, ConstI, -ConstI), Gamma(Div(1, 4))**2 / (4 * Sqrt(Pi)))))

make_entry(ID("13a092"),
    Formula(Equal(CarlsonRF(0, 0, x), Cases(
        (Infinity, NotEqual(x, 0)),
        (UnsignedInfinity, Equal(x, 0))))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("53d869"),
    Formula(Equal(CarlsonRF(0, 1, x), EllipticK(1-x))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("ab5af3"),
    Formula(Equal(CarlsonRF(0, x, x), Pi / (2*Sqrt(x)))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("415ff0"),
    Formula(Equal(CarlsonRF(0, x, y), EllipticK(1-y/x) / Sqrt(x))),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC), Less(Abs(Arg(x)-Arg(y)), Pi))))

make_entry(ID("0ed5e2"),
    Formula(Equal(CarlsonRF(0, x, 2*x), (1/Sqrt(x)) * (Gamma(Div(1,4))**2 / (4 * Sqrt(2 * Pi))))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("e54e61"),
    Formula(Equal(CarlsonRF(0, x, -x), 1/Sqrt(x)) * (Gamma(Div(1,4))**2 / (4*Sqrt(2*Pi))) * Cases((1-ConstI, Or(Less(Im(x), 0), And(Equal(Im(x), 0), GreaterEqual(Re(x), 0)))), (1+ConstI, Otherwise))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("538c8c"),
    Formula(Equal(CarlsonRF(0, x, c*x), EllipticK(1-c) / Sqrt(x))),
    Variables(x, c),
    Assumptions(And(Element(x, CC), Element(c, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("271b73"),
    Formula(Equal(CarlsonRF(0, x, -(c*x)), (1/Sqrt(x)) * Cases((EllipticK(1+c), Or(Less(Im(x), 0), And(Equal(Im(x), 0), GreaterEqual(Re(x), 0)))), ((EllipticK(1+c) + 2 * ConstI * EllipticK(-c)), Otherwise)))),
    Variables(x, c),
    Assumptions(And(Element(x, CC), Element(c, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("63d11e"),
    Formula(Equal(CarlsonRF(x, y, y), CarlsonRC(x, y))),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC))))

make_entry(ID("ebaa1a"),
    Formula(Equal(CarlsonRF(x, x, y), CarlsonRC(y, x))),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC))))

make_entry(ID("649dc0"),
    Formula(Equal(CarlsonRF(x, x, y), Cases(
        (Atan(Sqrt(x/y-1)) / Sqrt(x-y), NotEqual(x, y)),
        (1/Sqrt(x), Equal(x, y))))),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC), Or(Element(y, OpenInterval(0, Infinity)), And(Element(x, OpenInterval(0, Infinity)), NotElement(y, OpenInterval(-Infinity, 0)))))))

make_entry(ID("9b0388"),
    Formula(Equal(CarlsonRF(x, x, x), 1/Sqrt(x))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("5ab6bf"),
    Formula(Equal(CarlsonRF(-x, -y, -z), -(ConstI * CarlsonRF(x, y, z)))),
    Variables(x, y, z),
    Assumptions(And(Element(x, ClosedOpenInterval(0, Infinity)), Element(y, ClosedOpenInterval(0, Infinity)), Element(z, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("23e0a7"),
    Formula(Equal(CarlsonRF(-x, -y, z), Conjugate(ConstI * CarlsonRF(x, y, -z)))),
    Variables(x, y, z),
    Assumptions(And(Element(x, ClosedOpenInterval(0, Infinity)), Element(y, ClosedOpenInterval(0, Infinity)), Element(z, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("bcc121"),
    Formula(Equal(CarlsonRG(0, 0, 0), 0)))

make_entry(ID("d5ff09"),
    Formula(Equal(CarlsonRG(0, 0, 1), Div(1, 2))))

make_entry(ID("cd55cf"),
    Formula(Equal(CarlsonRG(0, 1, 1), Pi / 4)))

make_entry(ID("250ff1"),
    Formula(Equal(CarlsonRG(1, 1, 1), 1)))

make_entry(ID("4d7098"),
    Formula(Equal(CarlsonRG(1, 1, 2), Sqrt(2)/2 + Log(1+Sqrt(2))/2)))

make_entry(ID("d51efc"),
    Formula(Equal(CarlsonRG(1, 2, 2), (Pi/4+1/2))))

make_entry(ID("84f403"),
    Formula(Equal(CarlsonRG(0, 1, 2), Gamma(Div(1,4))**2/(8*Sqrt(2*Pi)) + Pi**Div(3,2) / (Sqrt(2)*Gamma(Div(1,4))**2))))

make_entry(ID("9e30e7"),
    Formula(Equal(CarlsonRG(0, 1, -1), Sqrt(2)*Pi**Div(3,2)/(2*Gamma(Div(1,4))**2) * (1+ConstI))))

make_entry(ID("c5a9cf"),
    Formula(Equal(CarlsonRG(0, 16, 16), Pi)))

make_entry(ID("d829be"),
    Formula(Equal(CarlsonRG(0, 0, x), Sqrt(x) / 2)),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("3f6d40"),
    Formula(Equal(CarlsonRG(0, 1, x), EllipticE(1-x)/2)),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("cdb587"),
    Formula(Equal(CarlsonRG(0, x, x), Pi * Sqrt(x) / 4)),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("7cddc6"),
    Formula(Equal(CarlsonRG(0, x, y), Sqrt(x) * EllipticE(1-y/x) / 2)),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC), Less(Abs(Arg(x)-Arg(y)), Pi))))

make_entry(ID("3f1547"),
    Formula(Equal(CarlsonRG(0, x, 2*x), Sqrt(x) * Mul(Add(Div(Pow(Gamma(Div(1, 4)), 2), Mul(8, Sqrt(2*Pi))), Div(Pow(Pi, Div(3, 2)), (Sqrt(2) * Pow(Gamma(Div(1, 4)), 2))))))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("7c50d1"),
    Formula(Equal(CarlsonRG(0, x, -x), Sqrt(x) * Div(Mul(Sqrt(2), Pow(Pi, Div(3, 2))), 2 * Pow(Gamma(Div(1, 4)), 2)) * Cases((1+ConstI, Or(Less(Im(x), 0), And(Equal(Im(x), 0), GreaterEqual(Re(x), 0)))), (1-ConstI, Otherwise)))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("a2e9dd"),
    Formula(Equal(CarlsonRG(0, x, c*x), Sqrt(x) * EllipticE(1-c) / 2)),
    Variables(x, c),
    Assumptions(And(Element(x, CC), Element(c, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("48333c"),
    Formula(Equal(CarlsonRG(0, x, -(c*x)), Sqrt(x) / 2 * Cases((EllipticE(1+c), Or(Less(Im(x), 0), And(Equal(Im(x), 0), GreaterEqual(Re(x), 0)))), (EllipticE(1+c) + 2*ConstI*(EllipticK(-c) - EllipticE(-c)), Otherwise)))),
    Variables(x, c),
    Assumptions(And(Element(x, CC), Element(c, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("5d0c95"),
    Formula(Equal(CarlsonRG(x, y, y), Div(1,2) * Cases((y * CarlsonRC(x, y) + Sqrt(x), NotEqual(y, 0)), (Sqrt(x), Equal(y, 0))))),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC))))

make_entry(ID("120284"),
    Formula(Equal(CarlsonRG(x, x, y), Div(1,2) * Cases((x * CarlsonRC(y, x) + Sqrt(y), NotEqual(x, 0)), (Sqrt(y), Equal(x, 0))))),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC))))

make_entry(ID("990145"),
    Formula(Equal(CarlsonRG(x, x, x), Sqrt(x))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("092716"),
    Formula(Equal(CarlsonRG(-x, -y, -z), ConstI * CarlsonRG(x, y, z))),
    Variables(x, y, z),
    Assumptions(And(Element(x, ClosedOpenInterval(0, Infinity)), Element(y, ClosedOpenInterval(0, Infinity)), Element(z, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("4091ad"),
    Formula(Equal(CarlsonRG(-x, -y, z), -Conjugate(ConstI * CarlsonRG(x, y, -z)))),
    Variables(x, y, z),
    Assumptions(And(Element(x, ClosedOpenInterval(0, Infinity)), Element(y, ClosedOpenInterval(0, Infinity)), Element(z, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("55cd70"),
    Formula(Equal(CarlsonRJ(0, 0, 0, 0), UnsignedInfinity)))

make_entry(ID("f1fd51"),
    Formula(Equal(CarlsonRJ(0, 0, 0, 1), UnsignedInfinity)))

make_entry(ID("b891d1"),
    Formula(Equal(CarlsonRJ(0, 0, 1, 1), Infinity)))

make_entry(ID("64a808"),
    Formula(Equal(CarlsonRJ(0, 1, 1, 1), 3*Pi/4)))

make_entry(ID("e9d5a9"),
    Formula(Equal(CarlsonRJ(1, 1, 1, 1), 1)))

make_entry(ID("b07652"),
    Formula(Equal(CarlsonRJ(1, 1, 1, 0), Infinity)))

make_entry(ID("e60205"),
    Formula(Equal(CarlsonRJ(0, 1, 1, 0), UnsignedInfinity)))

make_entry(ID("522f54"),
    Formula(Equal(CarlsonRJ(0, 1, 1, 2), ((3*Pi)/((4+2*Sqrt(2)))))))

make_entry(ID("b1c84e"),
    Formula(Equal(CarlsonRJ(1, 1, 1, 2), (3-3*Pi/4))))

make_entry(ID("a9f190"),
    Formula(Equal(CarlsonRJ(1, 1, 2, 2), 3*Log(1+Sqrt(2)) - 3*Sqrt(2)/2)))

make_entry(ID("397051"),
    Formula(Equal(CarlsonRJ(1, 2, 2, 2), 3*Pi/8 - Div(3,4))))

make_entry(ID("6e9544"),
    Formula(Equal(CarlsonRJ(1, 1, 2, 4), (Log(1+Sqrt(2)) - Sqrt(2)*Pi/8))))

make_entry(ID("a1414f"),
    Formula(Equal(CarlsonRJ(1, 2, 2, 1), (3-3*Pi/4))))

make_entry(ID("9f2b18"),
    Formula(Equal(CarlsonRJ(0, 1, 2, 1), ((3 * Sqrt(2) * Pi**Div(3,2)) / Gamma(Div(1,4))**2))))

make_entry(ID("c05ed8"),
    Formula(Equal(CarlsonRJ(0, 1, 2, 2), 3*Sqrt(2)*Gamma(Div(1,4))**2/(16*Sqrt(Pi))  - 3*Sqrt(2)*Pi**Div(3,2)/(2*Gamma(Div(1,4))**2))))

make_entry(ID("7f8a58"),
    Formula(Equal(CarlsonRJ(0, 1, 2, Sqrt(2)), Div(Mul(3, Pow(Gamma(Div(1, 4)), 2)), Mul(16, Sqrt(Pi))))))

make_entry(ID("44d300"),
    Formula(Equal(CarlsonRJ(1, 2, 2, 4), (((9-4*Sqrt(3))*Pi)/24))))

make_entry(ID("1b6362"),
    Formula(Equal(CarlsonRJ(0, 0, 1, -1), -Infinity)))

make_entry(ID("fd3017"),
    Formula(Equal(CarlsonRJ(0, 0, -1, 1), -(ConstI*Infinity))))

make_entry(ID("3567c5"),
    Formula(Equal(CarlsonRJ(0, 0, -1, -1), ConstI*Infinity)))

make_entry(ID("62b0c4"),
    Formula(Equal(CarlsonRJ(0, -1, 1, 1),
        (3*Gamma(Div(1,4))**2) / (8 * Sqrt(2*Pi)) * (1-ConstI) - 3*Sqrt(2)*Pi**Div(3,2) / (2*Gamma(Div(1,4))**2) * (1+ConstI))))

make_entry(ID("b468f3"),
    Formula(Equal(CarlsonRJ(0, 1, 1, -1), -(3*Pi/4 * (1+ConstI)))))

make_entry(ID("78131f"),
    Formula(Equal(CarlsonRJ(0, -1, -1, 1), -(3*Pi/4 * (1+ConstI)))))

make_entry(ID("cdee01"),
    Formula(Equal(CarlsonRJ(0, -1, -1, -1), (3*Pi/4 * ConstI))))

make_entry(ID("e04867"),
    Formula(Equal(CarlsonRJ(1, 1, 1, -1), 3*Sqrt(2)*Log(1+Sqrt(2))/4 - Div(3,2) - 3*Sqrt(2)*Pi*ConstI/8)))

make_entry(ID("534335"),
    Formula(Equal(CarlsonRJ(1, 1, -1, -1), -(3*Sqrt(2)*Pi/8) + (3*Sqrt(2)*Log(1+Sqrt(2))/4 - Div(3,2))*ConstI)))

make_entry(ID("303827"),
    Formula(Equal(CarlsonRJ(1, -1, -1, -1), -Div(3,4)-3*Sqrt(2)*Log(1+Sqrt(2))/8 + 3*Sqrt(2)*Pi*ConstI/16)))

make_entry(ID("a091d1"),
    Formula(Equal(CarlsonRJ(-1, -1, -1, -1), ConstI)))

make_entry(ID("4c1db8"),
    Formula(Equal(CarlsonRJ(1, -1, -1, 1), 3*Sqrt(2)*Log(1+Sqrt(2))/4 - Div(3,2) - 3*Sqrt(2)*Pi*ConstI/8)))

make_entry(ID("1eaaed"),
    Formula(Equal(CarlsonRJ(0, ConstI, -ConstI, 1), 3*Gamma(Div(1,4))**2/(8*Sqrt(Pi)))))

make_entry(ID("e1a3cb"),
    Formula(Equal(CarlsonRJ(0, 0, z, w), Cases((Sign(1/(Sqrt(z)*w)) * Infinity, And(NotEqual(z, 0), NotEqual(w, 0))), (UnsignedInfinity, Otherwise)))),
    Variables(z, w),
    Assumptions(And(Element(z, CC), Element(w, CC))))

make_entry(ID("3dd30a"),
    Formula(Equal(CarlsonRJ(x, y, z, z), CarlsonRD(x, y, z))),
    Variables(x, y, z),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(z, CC))))

make_entry(ID("5c6f10"),
    Formula(Equal(CarlsonRJ(x, x, x, w), CarlsonRD(w, w, x))),
    Variables(x, w),
    Assumptions(And(Element(x, CC), Element(w, CC))))

make_entry(ID("d4b12e"),
    Formula(Equal(CarlsonRJ(x, y, y, w), Cases(
                        (3/(w-y) * (CarlsonRC(x,y) - CarlsonRC(x,w)), NotEqual(y, w)),
                        (3/(2*(y-x)) * (CarlsonRC(x, y) - Sqrt(x)/y), And(Equal(y, w), NotEqual(x, y))),
                        (x**(-Div(3,2)), Equal(x, y, w))))),
    Variables(x, y, w),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(w, CC))))

make_entry(ID("1faf7a"),
    Formula(Equal(CarlsonRJ(x, x, x, w), Cases((3/(x-w) * (CarlsonRC(x,w) - 1/Sqrt(x)), NotEqual(x, w)), (w**(-Div(3,2)), Equal(x, w))))),
    Variables(x, w),
    Assumptions(And(Element(x, CC), Element(w, CC))))

make_entry(ID("0aa9ac"),
    Formula(Equal(CarlsonRJ(x, w, w, w), Cases((3/(2*(w-x)) * (CarlsonRC(x,w) - Sqrt(x)/w), NotEqual(x, w)), (x**(-Div(3,2)), Equal(x, w))))),
    Variables(x, w),
    Assumptions(And(Element(x, CC), Element(w, CC))))

make_entry(ID("4c882a"),
    Formula(Equal(CarlsonRJ(x, x, x, x), x**(-Div(3,2)))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("f6b4a2"),
    Formula(Equal(CarlsonRJ(0, x, x, w), 3*Pi/(2*(x*Sqrt(w) + w*Sqrt(x))))),
    Variables(x, w),
    Assumptions(And(Element(x, CC), Element(w, CC), Or(NotElement(x, OpenInterval(-Infinity, 0)), GreaterEqual(Im(w), 0)))))

make_entry(ID("3b6175"),
    Formula(Equal(CarlsonRJ(0, y, z, Sqrt(y)*Sqrt(z)), 3/(2*(Sqrt(y)*Sqrt(z))) * CarlsonRF(0, y, z))),
    Variables(y, z),
    Assumptions(And(Element(y, CC), Element(z, CC))))

make_entry(ID("64d87a"),
    Formula(Equal(CarlsonRJ(-x, -y, -z, -w), ConstI * CarlsonRJ(x, y, z, w))),
    Variables(x, y, z, w),
    Assumptions(And(Element(x, OpenClosedInterval(0, Infinity)), Element(y, OpenClosedInterval(0, Infinity)), Element(z, OpenClosedInterval(0, Infinity)), Element(w, OpenClosedInterval(0, Infinity)))))

make_entry(ID("849751"),
    Formula(Equal(CarlsonRJ(-x, -y, -z, w), -Conjugate(ConstI * CarlsonRJ(x, y, z, -w)))),
    Variables(x, y, z, w),
    Assumptions(And(Element(x, OpenClosedInterval(0, Infinity)), Element(y, OpenClosedInterval(0, Infinity)), Element(z, OpenClosedInterval(0, Infinity)), Element(w, OpenClosedInterval(0, Infinity)))))

make_entry(ID("980014"),
    Formula(Equal(CarlsonRD(0, 0, 0), UnsignedInfinity)))

make_entry(ID("dbe634"),
    Formula(Equal(CarlsonRD(0, 1, 0), UnsignedInfinity)))

make_entry(ID("748131"),
    Formula(Equal(CarlsonRD(0, 0, 1), Infinity)))

make_entry(ID("84ea08"),
    Formula(Equal(CarlsonRD(0, 1, 1), 3*Pi/4)))

make_entry(ID("1c0fee"),
    Formula(Equal(CarlsonRD(1, 1, 1), 1)))

make_entry(ID("f47947"),
    Formula(Equal(CarlsonRD(1, 1, 2), 3*Log(1+Sqrt(2)) - 3*Sqrt(2)/2)))

make_entry(ID("4d2c10"),
    Formula(Equal(CarlsonRD(1, 2, 2), 3*Pi/8 - Div(3,4))))

make_entry(ID("eda57d"),
    Formula(Equal(CarlsonRD(2, 2, 1), (3-3*Pi/4))))

make_entry(ID("060366"),
    Formula(Equal(CarlsonRD(0, 1, 2), 3*Sqrt(2)*Gamma(Div(1,4))**2/(16*Sqrt(Pi))  - 3*Sqrt(2)*Pi**Div(3,2)/(2*Gamma(Div(1,4))**2))))

make_entry(ID("63644d"),
    Formula(Equal(CarlsonRD(0, 2, 1), ((3 * Sqrt(2) * Pi**Div(3,2)) / Gamma(Div(1,4))**2))))

make_entry(ID("14a365"),
    Formula(Equal(CarlsonRD(0, 0, -1), ConstI*Infinity)))

make_entry(ID("2dcf0c"),
    Formula(Equal(CarlsonRD(0, -1, 1),
        (3*Gamma(Div(1,4))**2) / (8 * Sqrt(2*Pi)) * (1-ConstI) - 3*Sqrt(2)*Pi**Div(3,2) / (2*Gamma(Div(1,4))**2) * (1+ConstI))))

make_entry(ID("d52bda"),
    Formula(Equal(CarlsonRD(0, -1, -1), (3*Pi/4 * ConstI))))

make_entry(ID("545e8b"),
    Formula(Equal(CarlsonRD(1, 1, -1), -(3*Sqrt(2)*Pi/8) + (3*Sqrt(2)*Log(1+Sqrt(2))/4 - Div(3,2))*ConstI)))

make_entry(ID("3047b1"),
    Formula(Equal(CarlsonRD(1, -1, -1), -Div(3,4)-3*Sqrt(2)*Log(1+Sqrt(2))/8 + 3*Sqrt(2)*Pi*ConstI/16)))

make_entry(ID("4a2403"),
    Formula(Equal(CarlsonRD(-1, -1, -1), ConstI)))

make_entry(ID("f07e9d"),
    Formula(Equal(CarlsonRD(0, 0, z), Cases((Sign(1/z**Div(3,2)) * Infinity, NotEqual(z, 0)), (UnsignedInfinity, Otherwise)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("3e05c6"),
    Formula(Equal(CarlsonRD(0, y, 1), Cases((3*(EllipticK(1-y) - EllipticE(1-y))/(1-y), NotEqual(y, 1)), (3*Pi/4, Equal(y, 1))))),
    Variables(y),
    Assumptions(Element(y, CC)))

make_entry(ID("61c002"),
    Formula(Equal(CarlsonRD(0, 1, z), Cases((3 * (EllipticE(1-z) - z*EllipticK(1-z)) / (z*(1-z)), And(NotEqual(z, 0), NotEqual(z, 1))), (3*Pi/4, Equal(z, 1)), (UnsignedInfinity, Equal(z, 0))))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("4e4380"),
    Formula(Equal(CarlsonRD(0, y, z), y**(-Div(3,2)) * Cases((3 * (EllipticE(1-z/y) - (z/y)*EllipticK(1-z/y)) / ((z/y)*(1-z/y)), And(NotEqual(z, 0), NotEqual(z, y))), (3*Pi/4, Equal(z, y)), (UnsignedInfinity, Equal(z, 0))))),
    Variables(y, z),
    Assumptions(And(Element(y, SetMinus(CC, Set(0))), Element(z, CC), Less(Abs(Arg(y)-Arg(z)), Pi))))

make_entry(ID("8d0629"),
    Formula(Equal(CarlsonRD(0, y, z), z**(-Div(3,2)) * Cases((3*(EllipticK(1-y/z) - EllipticE(1-y/z))/(1-y/z), NotEqual(y, z)), (3*Pi/4, Equal(y, z))))),
    Variables(y, z),
    Assumptions(And(Element(z, SetMinus(CC, Set(0))), Element(y, CC), Less(Abs(Arg(y)-Arg(z)), Pi))))

make_entry(ID("c85c2f"),
    Formula(Equal(CarlsonRD(x, y, y), Cases((3/(2*(y-x)) * (CarlsonRC(x,y) - Sqrt(x)/y), NotEqual(x, y)), (x**(-Div(3,2)), Equal(x, y))))),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC))))

make_entry(ID("771801"),
    Formula(Equal(CarlsonRD(x, x, y), Cases((3/(y-x) * (CarlsonRC(y,x) - 1/Sqrt(y)), NotEqual(x, y)), (x**(-Div(3,2)), Equal(x, y))))),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC))))

make_entry(ID("ccb4d1"),
    Formula(Equal(CarlsonRD(x, x, x), x**(-Div(3,2)))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("f68409"),
    Formula(Equal(CarlsonRD(-x, -y, -z), ConstI * CarlsonRD(x, y, z))),
    Variables(x, y, z),
    Assumptions(And(Element(x, OpenClosedInterval(0, Infinity)), Element(y, OpenClosedInterval(0, Infinity)), Element(z, OpenClosedInterval(0, Infinity)))))

make_entry(ID("12b1d0"),
    Formula(Equal(CarlsonRD(-x, -y, z), -Conjugate(ConstI * CarlsonRD(x, y, -z)))),
    Variables(x, y, z),
    Assumptions(And(Element(x, OpenClosedInterval(0, Infinity)), Element(y, OpenClosedInterval(0, Infinity)), Element(z, OpenClosedInterval(0, Infinity)))))

def_Topic(
    Title("Chebyshev polynomials"),
    Section("Definitions"),
    Entries(
        "1a0c43",
        "d4e9aa",
    ),
    Section("Tables"),
    Entries(
        "85e42e",
        "fd8310",
    ),
    Section("Specific values"),
    Entries(
        "c76e72",
        "be5652",
        "48765b",
        "75eacb",
        "9001e6",
        "fc5d42",
        "2760e7",
        "a46d91",
        "42102c",
        "e03fa4",
        "be9a45",
        "2a5337",
        "7d111e",
    ),
    Section("Zeros and extrema"),
    Entries(
        "7a7d1d",
        "ce39ac",
        "3d25dd",
        "b5a25e",
        "db2b0a",
    ),
    Section("Symmetries"),
    Entries(
        "6a24ab",
        "88aeb6",
        "9093a3",
        "78f5bb",
    ),
    Section("Orthogonality"),
    Entries(
        "2c26a1",
        "473c36",
        "3d77ab",
    ),
    Section("Differential equations"),
    Entries(
        "0ed026",
        "30b67b",
    ),
    Section("Recurrence relations"),
    Entries(
        "faeed9",
        "d1ef91",
        "8a785a",
        "303204",
        "7b2c26",
        "ce5e03",
        "0649c9",
        "844561",
    ),
    Section("Order transformations"),
    Entries(
        "7e882c",
        "ed5222",
        "4b83c6",
        "de0968",
        "82288c",
        "5f09f4",
    ),
    Section("Trigonometric formulas"),
    Entries(
        "fda800",
        "2fc479",
        "b8fdcd",
        "f4b3fa",
        "4c7aeb",
        "9789ee",
    ),
    Section("Power formulas"),
    Entries(
        "0cbe75",
        "61375f",
        "fdf80d",
        "42eb01",
        "5bd0ec",
    ),
    Section("Product representations"),
    Entries(
        "305a29",
        "f5fa23",
    ),
    Section("Sum representations"),
    Entries(
        "99aa38",
        "50cb6b",
        "ae791d",
        "4f3e30",
        "e9232b",
        "4e914f",
        "a9077a",
    ),
    Section("Hypergeometric representations"),
    Entries(
        "382679",
        "ce9a39",
    ),
    Section("Generating functions"),
    Entries(
        "685d1a",
        "b5049d",
        "27b2bb",
        "9d7c61",
        "fff8ff",
    ),
    Section("Derivatives"),
    Entries(
        "1a0d11",
        "05fe07",
        "35e13b",
        "12ce84",
        "9d66de",
        "a68f0e",
        "b6b014",
        "6582c4",
        "e1797b",
    ),
    Section("Bounds and inequalities"),
    Subsection("Upper bounds"),
    Entries(
        "15dd69",
        "3c662e",
        "c718ea",
        "0b3fd6",
        "443759",
        "2a4b9d",
    ),
    Subsection("Turán's inequalities"),
    Entries(
        "b0c84b",
        "2ada0f",
    ),
    Subsection("Inequalities for real x not in the interval [-1, 1]"),
    Entries(
        "54be3e",
        "f61927",
    ),
)

make_entry(ID("1a0c43"),
    SymbolDefinition(ChebyshevT, ChebyshevT(n,x), "Chebyshev polynomial of the first kind"))

make_entry(ID("d4e9aa"),
    SymbolDefinition(ChebyshevU, ChebyshevU(n,x), "Chebyshev polynomial of the second kind"))

make_entry(ID("85e42e"),
    Description("Table of", ChebyshevT(n,x), "for", LessEqual(0, n, 15)),
    Table(TableRelation(Tuple(n, p), Equal(ChebyshevT(n,x), p)),
      TableHeadings(n, ChebyshevT(n,x)), TableSplit(1),
      List(
Tuple(0, 1),
Tuple(1, x),
Tuple(2, 2*x**2 - 1),
Tuple(3, 4*x**3 - 3*x),
Tuple(4, 8*x**4 - 8*x**2 + 1),
Tuple(5, 16*x**5 - 20*x**3 + 5*x),
Tuple(6, 32*x**6 - 48*x**4 + 18*x**2 - 1),
Tuple(7, 64*x**7 - 112*x**5 + 56*x**3 - 7*x),
Tuple(8, 128*x**8 - 256*x**6 + 160*x**4 - 32*x**2 + 1),
Tuple(9, 256*x**9 - 576*x**7 + 432*x**5 - 120*x**3 + 9*x),
Tuple(10, 512*x**10 - 1280*x**8 + 1120*x**6 - 400*x**4 + 50*x**2 - 1),
Tuple(11, 1024*x**11 - 2816*x**9 + 2816*x**7 - 1232*x**5 + 220*x**3 - 11*x),
Tuple(12, 2048*x**12 - 6144*x**10 + 6912*x**8 - 3584*x**6 + 840*x**4 - 72*x**2 + 1),
Tuple(13, 4096*x**13 - 13312*x**11 + 16640*x**9 - 9984*x**7 + 2912*x**5 - 364*x**3 + 13*x),
Tuple(14, 8192*x**14 - 28672*x**12 + 39424*x**10 - 26880*x**8 + 9408*x**6 - 1568*x**4 + 98*x**2 - 1),
Tuple(15, 16384*x**15 - 61440*x**13 + 92160*x**11 - 70400*x**9 + 28800*x**7 - 6048*x**5 + 560*x**3 - 15*x))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("fd8310"),
    Description("Table of", ChebyshevU(n,x), "for", LessEqual(0, n, 15)),
    Table(TableRelation(Tuple(n, p), Equal(ChebyshevU(n,x), p)),
      TableHeadings(n, ChebyshevU(n,x)), TableSplit(1),
      List(
Tuple(0, 1),
Tuple(1, 2*x),
Tuple(2, 4*x**2 - 1),
Tuple(3, 8*x**3 - 4*x),
Tuple(4, 16*x**4 - 12*x**2 + 1),
Tuple(5, 32*x**5 - 32*x**3 + 6*x),
Tuple(6, 64*x**6 - 80*x**4 + 24*x**2 - 1),
Tuple(7, 128*x**7 - 192*x**5 + 80*x**3 - 8*x),
Tuple(8, 256*x**8 - 448*x**6 + 240*x**4 - 40*x**2 + 1),
Tuple(9, 512*x**9 - 1024*x**7 + 672*x**5 - 160*x**3 + 10*x),
Tuple(10, 1024*x**10 - 2304*x**8 + 1792*x**6 - 560*x**4 + 60*x**2 - 1),
Tuple(11, 2048*x**11 - 5120*x**9 + 4608*x**7 - 1792*x**5 + 280*x**3 - 12*x),
Tuple(12, 4096*x**12 - 11264*x**10 + 11520*x**8 - 5376*x**6 + 1120*x**4 - 84*x**2 + 1),
Tuple(13, 8192*x**13 - 24576*x**11 + 28160*x**9 - 15360*x**7 + 4032*x**5 - 448*x**3 + 14*x),
Tuple(14, 16384*x**14 - 53248*x**12 + 67584*x**10 - 42240*x**8 + 13440*x**6 - 2016*x**4 + 112*x**2 - 1),
Tuple(15, 32768*x**15 - 114688*x**13 + 159744*x**11 - 112640*x**9 + 42240*x**7 - 8064*x**5 + 672*x**3 - 16*x))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("c76e72"),
    Formula(Equal(ChebyshevT(0,x), 1)),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("be5652"),
    Formula(Equal(ChebyshevT(1,x), x)),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("48765b"),
    Formula(Equal(ChebyshevU(0,x), 1)),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("75eacb"),
    Formula(Equal(ChebyshevU(1,x), 2*x)),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("9001e6"),
    Formula(Equal(ChebyshevU(-1,x), 0)),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("fc5d42"),
    Formula(Equal(ChebyshevT(n,1), 1)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("2760e7"),
    Formula(Equal(ChebyshevT(n,-1), (-1)**n)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("a46d91"),
    Formula(Equal(ChebyshevT(2*n,0), (-1)**n)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("42102c"),
    Formula(Equal(ChebyshevT(2*n+1,0), 0)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("e03fa4"),
    Formula(Equal(ChebyshevU(n,1), n+1)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("be9a45"),
    Formula(Equal(ChebyshevU(n,-1), (-1)**n * (n+1))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("2a5337"),
    Formula(Equal(ChebyshevU(2*n,0), (-1)**n)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("7d111e"),
    Formula(Equal(ChebyshevU(2*n+1,0), 0)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("7a7d1d"),
    Formula(Equal(Zeros(ChebyshevT(n,x), ForElement(x, CC)), Set(Cos(((2*k-1)/(2*n))*Pi), ForElement(k, Range(1, n))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("ce39ac"),
    Formula(Equal(Zeros(ChebyshevU(n,x), ForElement(x, CC)), Set(Cos((k/(n+1))*Pi), ForElement(k, Range(1, n))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("3d25dd"),
    Formula(Equal(Solutions(Brackets(Element(ChebyshevT(n,x), Set(-1,1))), ForElement(x, CC)), Set(Cos((k/n)*Pi), ForElement(k, Range(0, n))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("b5a25e"),
    Formula(Equal(Solutions(Brackets(Equal(ChebyshevT(n,x), 1)), ForElement(x, CC)), Set(Cos((2*k/n)*Pi), ForElement(k, Range(0, Floor(n/2)))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("db2b0a"),
    Formula(Equal(Solutions(Brackets(Equal(ChebyshevT(n,x), -1)), ForElement(x, CC)), Set(Cos(((2*k-1)/n)*Pi), ForElement(k, Range(1, Floor((n+1)/2)))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("6a24ab"),
    Formula(Equal(ChebyshevT(n,-x), (-1)**n * ChebyshevT(n,x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("88aeb6"),
    Formula(Equal(ChebyshevU(n,-x), (-1)**n * ChebyshevU(n,x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("9093a3"),
    Formula(Equal(ChebyshevT(-n,x), ChebyshevT(n,x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("78f5bb"),
    Formula(Equal(ChebyshevU(-n,x), -ChebyshevU(n-2,x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("2c26a1"),
    Formula(Equal(Integral((ChebyshevT(n,x)*ChebyshevT(m,x)) * (1/Sqrt(1-x**2)), For(x,-1,1)),
        Cases(Tuple(0, NotEqual(n, m)), Tuple(Pi, Equal(n, m, 0)), Tuple(Pi/2, And(Equal(n, m), NotEqual(n, 0)))))),
    Variables(n, m),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(m, ZZGreaterEqual(0)))))

make_entry(ID("473c36"),
    Formula(Equal(Integral((ChebyshevU(n,x)*ChebyshevU(m,x)) * Sqrt(1-x**2), For(x,-1,1)), Cases(Tuple(0, NotEqual(n, m)), Tuple(Pi/2, Equal(n, m))))),
    Variables(n, m),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(m, ZZGreaterEqual(0)))))

make_entry(ID("3d77ab"),
    Formula(Equal(Integral((ChebyshevT(n,x)*x**m) * (1/Sqrt(1-x**2)), For(x,-1,1)), 0)),
    Variables(n, m),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(m, Range(0, n-1)))))

c1 = Subscript(c,1)

c2 = Subscript(c,2)

make_entry(ID("0ed026"),
    Formula(Where(Equal((1-x**2) * ComplexDerivative(y(x), For(x, x, 2)) - x * ComplexDerivative(y(x), For(x, x, 1)) + n**2 * y(x), 0),
        Equal(y(x), c1 * ChebyshevT(n,x) + c2 * ChebyshevU(n-1,x) * Sqrt(1-x**2)))),
    Variables(n, x, c1, c2),
    Assumptions(And(Element(n, ZZ), Element(x, CC), Element(c1, CC), Element(c2, CC),
        Or(Equal(c2, 0), NotElement(x, Union(OpenClosedInterval(-Infinity,1), ClosedOpenInterval(1,Infinity)))))))

make_entry(ID("30b67b"),
    Formula(Where(Equal((1-x**2) * ComplexDerivative(y(x), For(x, x, 2)) - 3 * x * ComplexDerivative(y(x), For(x, x, 1)) + n * (n+2) * y(x), 0),
        Equal(y(x), c1 * ChebyshevU(n,x) + c2 * (ChebyshevT(n+1,x) / Sqrt(1-x**2))))),
    Variables(n, x, c1, c2),
    Assumptions(And(Element(n, ZZ), Element(x, CC), Element(c1, CC), Element(c2, CC),
        Or(Equal(c2, 0), NotElement(x, Union(OpenClosedInterval(-Infinity,1), ClosedOpenInterval(1,Infinity)))),
            NotElement(x, Set(-1, 1)))))

make_entry(ID("faeed9"),
    Formula(Equal(ChebyshevT(n,x), 2*x*ChebyshevT(n-1,x) - ChebyshevT(n-2,x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("d1ef91"),
    Formula(Equal(ChebyshevU(n,x), 2*x*ChebyshevU(n-1,x) - ChebyshevU(n-2,x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("8a785a"),
    Formula(Equal(ChebyshevT(n,x), 2*x*ChebyshevT(n+1,x) - ChebyshevT(n+2,x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("303204"),
    Formula(Equal(ChebyshevU(n,x), 2*x*ChebyshevU(n+1,x) - ChebyshevU(n+2,x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("7b2c26"),
    Formula(Equal(ChebyshevT(n,x), x*ChebyshevT(n-1,x) - (1-x**2)*ChebyshevU(n-2,x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("ce5e03"),
    Formula(Equal(ChebyshevU(n,x), x*ChebyshevU(n-1,x) + ChebyshevT(n,x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("0649c9"),
    Formula(Equal(ChebyshevT(n,x), (ChebyshevU(n,x) - ChebyshevU(n-2,x))/2)),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("844561"),
    Formula(Equal(ChebyshevT(n,x), ChebyshevU(n,x) - x*ChebyshevU(n-1,x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("7e882c"),
    Formula(Equal(ChebyshevT(m,ChebyshevT(n,x)), ChebyshevT(m*n, x))),
    Variables(m, n, x),
    Assumptions(And(Element(m, ZZ), Element(n, ZZ), Element(x, CC))))

make_entry(ID("ed5222"),
    Formula(Equal(ChebyshevT(m,x)*ChebyshevT(n,x), (ChebyshevT(m+n, x) + ChebyshevT(Abs(m-n), x))/2)),
    Variables(m, n, x),
    Assumptions(And(Element(m, ZZ), Element(n, ZZ), Element(x, CC))))

make_entry(ID("4b83c6"),
    Formula(Equal(ChebyshevT(2*n,x), 2*ChebyshevT(n,x)**2-1)),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("de0968"),
    Formula(Equal(ChebyshevT(2*n+1,x), 2*ChebyshevT(n+1,x)*ChebyshevT(n,x) - x)),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("82288c"),
    Formula(Equal(ChebyshevT(2*n,x), ChebyshevT(n,2*x**2-1))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("5f09f4"),
    Formula(Equal(ChebyshevU(2*n,x), ChebyshevT(n,2*x**2-1) + ChebyshevU(n-1,2*x**2-1))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("fda800"),
    Formula(Equal(ChebyshevT(n,x), Cos(n*Acos(x)))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("2fc479"),
    Formula(Equal(ChebyshevT(n,x), Cosh(n*Acosh(x)))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("b8fdcd"),
    Formula(Equal(ChebyshevU(n-1,x) * Sqrt(1-x**2), Sin(n*Acos(x)))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("f4b3fa"),
    Formula(Equal(ChebyshevT(n,Cos(x)), Cos(n*x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("4c7aeb"),
    Formula(Equal(ChebyshevU(n,Cos(x))*Sin(x), Sin(n*x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("9789ee"),
    Formula(Equal(ChebyshevT(2*n+1,Sin(x)), (-1)**n * Sin((2*n+1)*x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("0cbe75"),
    Formula(Equal(ChebyshevT(n,x), Div(1,2)*((x+Sqrt(x**2-1))**n + (x-Sqrt(x**2-1))**n))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("61375f"),
    Formula(Equal(ChebyshevU(n-1,x)*Sqrt(x**2-1), Div(1,2)*((x+Sqrt(x**2-1))**n - (x-Sqrt(x**2-1))**n))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("fdf80d"),
    Formula(Equal(ChebyshevT(n,x) + ChebyshevU(n-1,x)*Sqrt(x**2-1), (x+Sqrt(x**2-1))**n)),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("42eb01"),
    Formula(Equal(ChebyshevT(n,x)**2 + (x**2-1)*ChebyshevU(n-1,x)**2, 1)),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("5bd0ec"),
    Formula(Equal(ChebyshevT(n,(x + x**-1)/2), (x**n + x**(-n))/2)),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, SetMinus(CC, Set(0))))))

make_entry(ID("305a29"),
    Formula(Equal(ChebyshevT(n,x), 2**(n-1) * Product(Parentheses(x-Cos((2*k-1)/(2*n) * Pi)), For(k,1,n)))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(x, CC))))

make_entry(ID("f5fa23"),
    Formula(Equal(ChebyshevU(n,x), 2**n * Product(Parentheses(x-Cos(k/(n+1) * Pi)), For(k,1,n)))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(x, CC))))

make_entry(ID("ae791d"),
    Formula(Equal(ChebyshevT(n, x), Sum(Binomial(n,2*k) * (x**2-1)**k * x**(n-2*k), For(k, 0, Floor(n/2))))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(x, CC))))

make_entry(ID("4f3e30"),
    Formula(Equal(ChebyshevT(n, x), (n/2) * Sum((-1)**k * Factorial(n-k-1) / (Factorial(k) * Factorial(n-2*k))  * (2*x)**(n-2*k), For(k, 0, Floor(n/2))))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(x, CC))))

make_entry(ID("99aa38"),
    Formula(Equal(ChebyshevT(n, x), (n/2) * Sum(((-1)**k / (n-k)) * Binomial(n-k, k)  * (2*x)**(n-2*k), For(k, 0, Floor(n/2))))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(x, CC))))

make_entry(ID("e9232b"),
    Formula(Equal(ChebyshevT(n, x), n * Sum(2**k * Factorial(n+k-1) / (Factorial(n-k) * Factorial(2*k)) * (x-1)**k, For(k, 0, n)))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(x, CC))))

make_entry(ID("4e914f"),
    Formula(Equal(ChebyshevU(n, x), Sum(Binomial(n+1,2*k+1) * (x**2-1)**k * x**(n-2*k), For(k, 0, Floor(n/2))))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(x, CC))))

make_entry(ID("50cb6b"),
    Formula(Equal(ChebyshevU(n, x), Sum((-1)**k * Binomial(n-k, k) * (2*x)**(n-2*k), For(k, 0, Floor(n/2))))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(x, CC))))

make_entry(ID("a9077a"),
    Formula(Equal(ChebyshevU(n, x), Sum(2**k * Factorial(n+k+1) / (Factorial(n-k) * Factorial(2*k+1)) * (x-1)**k, For(k, 0, n)))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(x, CC))))

make_entry(ID("382679"),
    Formula(Equal(ChebyshevT(n,x), Hypergeometric2F1(-n,n,Div(1,2),(1-x)/2))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("ce9a39"),
    Formula(Equal(ChebyshevU(n,x), (n+1) * Hypergeometric2F1(-n,n+2,Div(3,2),(1-x)/2))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("685d1a"),
    Formula(Equal(Sum(ChebyshevT(n,x) * z**n, For(n, 0, Infinity)), (1-x*z)/(1-2*x*z+z**2))),
    Variables(x, z),
    Assumptions(And(Element(x, ClosedInterval(-1,1)), Element(z, CC), Less(Abs(z), 1))))

make_entry(ID("b5049d"),
    Formula(Equal(Sum(ChebyshevU(n,x) * z**n, For(n, 0, Infinity)), 1/(1-2*x*z+z**2))),
    Variables(x, z),
    Assumptions(And(Element(x, ClosedInterval(-1,1)), Element(z, CC), Less(Abs(z), 1))))

make_entry(ID("27b2bb"),
    Formula(Equal(Sum(ChebyshevT(n,x) * (z**n / n), For(n, 1, Infinity)), -Div(1,2)*Log(1-2*x*z+z**2))),
    Variables(x, z),
    Assumptions(And(Element(x, ClosedInterval(-1,1)), Element(z, CC), Less(Abs(z), 1))))

make_entry(ID("9d7c61"),
    Formula(Equal(Sum(ChebyshevT(n,x) * (z**n / Factorial(n)), For(n, 0, Infinity)), Exp(z*x) * Cosh(z * Sqrt(x**2-1)))),
    Variables(x, z),
    Assumptions(And(Element(x, CC), Element(z, CC))))

make_entry(ID("fff8ff"),
    Formula(Equal(Sum(ChebyshevU(n,x) * (z**n / Factorial(n)), For(n, 0, Infinity)), Exp(z*x) * (Cosh(z * Sqrt(x**2-1)) + z*x*Sinc(ConstI*z*Sqrt(x**2-1))))),
    Variables(x, z),
    Assumptions(And(Element(x, CC), Element(z, CC))))

make_entry(ID("1a0d11"),
    Formula(Equal(ComplexDerivative(ChebyshevT(n, x), For(x, x)), n * ChebyshevU(n-1, x))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, CC))))

make_entry(ID("05fe07"),
    Formula(Equal(ComplexDerivative(ChebyshevT(n, x), For(x, x, 2)), (n * (n * ChebyshevT(n, x) - x * ChebyshevU(n-1, x))) / (x**2-1))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, SetMinus(CC, Set(-1, 1))))))

make_entry(ID("35e13b"),
    Formula(Equal(ComplexDerivative(ChebyshevU(n, x), For(x, x)), ((n+1)*ChebyshevT(n+1, x) - x * ChebyshevU(n,x)) / (x**2-1))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZ), Element(x, SetMinus(CC, Set(-1, 1))))))

make_entry(ID("12ce84"),
    Formula(Equal(ComplexDerivative(ChebyshevT(n, x), For(x, x, r)),
        (RisingFactorial(n,r) * RisingFactorial(n-r+1,r) / DoubleFactorial(2*r-1)) * Hypergeometric2F1(r+n, r-n, Div(1,2)+r, (1-x)/2))),
    Variables(n, r, x),
    Assumptions(And(Element(n, ZZ), Element(r, ZZGreaterEqual(0)), Element(x, CC), Or(LessEqual(r, n), NotEqual(x, -1)))))

make_entry(ID("9d66de"),
    Formula(Equal(ComplexDerivative(ChebyshevU(n, x), For(x, x, r)),
        (RisingFactorial(n+1,r+1) * RisingFactorial(n-r+1,r) / DoubleFactorial(2*r+1)) * Hypergeometric2F1(r+n+2, r-n, Div(3,2)+r, (1-x)/2))),
    Variables(n, r, x),
    Assumptions(And(Element(n, ZZ), Element(r, ZZGreaterEqual(0)), Element(x, CC), Or(LessEqual(r, n), NotEqual(x, -1)))))

make_entry(ID("a68f0e"),
    Formula(Equal(ComplexDerivative(ChebyshevT(n, x), For(x, 1, r)),
        (RisingFactorial(n,r) * RisingFactorial(n-r+1,r) / DoubleFactorial(2*r-1)))),
    Variables(n, r),
    Assumptions(And(Element(n, ZZ), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("b6b014"),
    Formula(Equal(ComplexDerivative(ChebyshevU(n, x), For(x, 1, r)),
        (RisingFactorial(n+1,r+1) * RisingFactorial(n-r+1,r) / DoubleFactorial(2*r+1)))),
    Variables(n, r),
    Assumptions(And(Element(n, ZZ), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("6582c4"),
    Formula(Equal(ComplexDerivative(ChebyshevT(n, x), For(x, x, r)),
        (Sqrt(Pi) / (x-1)**r) * Hypergeometric3F2Regularized(1, -n, n, Div(1,2), 1-r, (1-x)/2))),
    Variables(n, r, x),
    Assumptions(And(Element(n, ZZ), Element(r, ZZGreaterEqual(0)), Element(x, SetMinus(CC, Set(-1, 1))))),
    References("http://functions.wolfram.com/Polynomials/ChebyshevT/20/02/01/0002/"))

make_entry(ID("e1797b"),
    Formula(Equal(ComplexDerivative(ChebyshevU(n, x), For(x, x, r)),
        ((Sqrt(Pi) * (n+1)) / (2 * (x-1)**r)) * Hypergeometric3F2Regularized(1, -n, n+2, Div(3,2), 1-r, (1-x)/2))),
    Variables(n, r, x),
    Assumptions(And(Element(n, ZZ), Element(r, ZZGreaterEqual(0)), Element(x, SetMinus(CC, Set(-1, 1))))),
    References("http://functions.wolfram.com/Polynomials/ChebyshevU/20/02/01/0002/"))

make_entry(ID("15dd69"),
    Formula(LessEqual(Abs(ChebyshevT(n,x)), 1)),
    Variables(n,x),
    Assumptions(And(Element(n, ZZ), Element(x, ClosedInterval(-1,1)))))

make_entry(ID("3c662e"),
    Formula(LessEqual(Abs(ChebyshevU(n,x)), Abs(n+1))),
    Variables(n,x),
    Assumptions(And(Element(n, ZZ), Element(x, ClosedInterval(-1,1)))))

make_entry(ID("c718ea"),
    Formula(LessEqual(Abs(ChebyshevT(n,z)), Abs(ChebyshevT(n,ConstI*Abs(z))))),
    Variables(n,z),
    Assumptions(And(Element(n, ZZ), Element(z, CC))))

make_entry(ID("0b3fd6"),
    Formula(LessEqual(Abs(ChebyshevU(n,z)), Abs(ChebyshevU(n,ConstI*Abs(z))))),
    Variables(n,z),
    Assumptions(And(Element(n, ZZ), Element(z, CC))))

make_entry(ID("443759"),
    Formula(LessEqual(Abs(ChebyshevT(n,z)), (Abs(z) + Sqrt(Abs(z)**2+1))**n)),
    Variables(n,z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, CC))))

make_entry(ID("2a4b9d"),
    Formula(LessEqual(Abs(ChebyshevU(n,z)), (Abs(z) + Sqrt(Abs(z)**2+1))**n)),
    Variables(n,z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, CC))))

make_entry(ID("b0c84b"),
    Formula(GreaterEqual(Parentheses(ChebyshevT(n, x))**2 - ChebyshevT(n-1, x) * ChebyshevT(n+1, x), 0)),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(x, ClosedInterval(-1, 1)))))

make_entry(ID("2ada0f"),
    Formula(Greater(Parentheses(ChebyshevT(n, x))**2 - ChebyshevT(n-1, x) * ChebyshevT(n+1, x), 0)),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(x, OpenInterval(-1, 1)))))

make_entry(ID("54be3e"),
    Formula(LessEqual(Abs(ComplexDerivative(ChebyshevT(n-1, x), For(x, x, r))), Abs(ComplexDerivative(ChebyshevT(n, x), For(x, x, r))))),
    Variables(n, r, x),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(x, RR), GreaterEqual(Abs(x), 1))),
    References("V. V. Prasolov, Polynomials, Springer, 2004, ISBN 978-3-642-03980-5. Theorem 3.14.10."))

make_entry(ID("f61927"),
    Formula(LessEqual(ChebyshevT(n, x*y), ChebyshevT(n, x)*ChebyshevT(n, y))),
    Variables(n, x, y),
    Assumptions(And(Element(n, ZZ), Element(x, ClosedOpenInterval(1, Infinity)), Element(y, ClosedOpenInterval(1, Infinity)))),
    References(
        "V. V. Prasolov, Polynomials, Springer, 2004, ISBN 978-3-642-03980-5. Theorem 3.14.11.",
        "R. Askey, An inequality for Tchebycheff polynomials and extensions, Journal of Approximation Theory, 1975, Volume 14, pp 1-11"))

def_Topic(
    Title("Complex parts"),
    Entries(
        "5e639e",
        "920cc8",
        "b7d740",
        "f5e62c",
        "9086c6",
        "da5d5e",
        "ce8ee4",
    ),
    Section("Basic formulas"),
    Entries(
        "26565c",
        "4f0049",
        "b2a880",
        "8e6867",
        "ba6d81",
        "acda23",
        "18d335",
        "59a5d6",
        "e9465d",
    ),
    Section("Specific values"),
    Entries(
        "c423d2",
        "735409",
        "089f85",
        "a8b41c",
    ),
    Section("Connection formulas"),
    Entries(
        "3866dc",
        "f1a29b",
        "54340e",
        "60772e",
    ),
    Section("Functional equations"),
    Entries(
        "bcd22f",
        "8cac46",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "98efc1",
        "a6e081",
        "48fe10",
        "6a894d",
        "ebf8cc",
        "fc427b",
        "12664e",
        "432926",
        "08268d",
    ),
)

make_entry(ID("5e639e"),
    SymbolDefinition(Sign, Sign(z), "Sign function"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(Element(z, RR), Element(Sign(z), Set(-1, 0, 1))),
        Tuple(Element(z, SetMinus(CC, Set(0))), Element(Sign(z), UnitCircle)),
        Tuple(Element(z, Set(Infinity)), Element(Sign(z), Set(1))),
        Tuple(Element(z, Set(-Infinity)), Element(Sign(z), Set(-1))),
      )))

make_entry(ID("920cc8"),
    SymbolDefinition(Abs, Abs(z), "Absolute value"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(Element(z, RR), Element(Abs(z), ClosedOpenInterval(0, Infinity))),
        Tuple(Element(z, CC), Element(Abs(z), ClosedOpenInterval(0, Infinity))),
        Tuple(Element(z, Set(Infinity,-Infinity,UnsignedInfinity)), Element(Abs(z), Set(Infinity))),
      )))

make_entry(ID("b7d740"),
    SymbolDefinition(Arg, Arg(z), "Complex argument"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(Element(z, RR), Element(Arg(z), Set(0, Pi))),
        Tuple(Element(z, CC), Element(Arg(z), OpenClosedInterval(-Pi, Pi))),
        Tuple(Element(z, Set(Infinity)), Element(Arg(z), Set(0))),
        Tuple(Element(z, Set(-Infinity)), Element(Arg(z), Set(Pi))),
      )))

make_entry(ID("f5e62c"),
    SymbolDefinition(Re, Re(z), "Real part"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(Element(z, RR), Element(Re(z), RR)),
        Tuple(Element(z, CC), Element(Re(z), RR)),
      )))

make_entry(ID("9086c6"),
    SymbolDefinition(Im, Im(z), "Imaginary part"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(Element(z, RR), Element(Im(z), Set(0))),
        Tuple(Element(z, CC), Element(Im(z), RR)),
      )))

make_entry(ID("da5d5e"),
    SymbolDefinition(Conjugate, Conjugate(z), "Complex conjugate"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(Element(z, RR), Element(Conjugate(z), RR)),
        Tuple(Element(z, CC), Element(Conjugate(z), CC)),
      )))

make_entry(ID("ce8ee4"),
    SymbolDefinition(Csgn, Csgn(z), "Real-valued sign function for complex numbers"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(Element(z, CC), Element(Csgn(z), Set(-1, 0, 1))),
      )),
    References("https://www.maplesoft.com/support/help/maple/view.aspx?path=csgn"))

make_entry(ID("26565c"),
    Formula(Equal(Sign(z), z / Abs(z))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("4f0049"),
    Formula(Equal(Abs(x+y*ConstI), Sqrt(x**2 + y**2))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("b2a880"),
    Formula(Equal(Arg(x+y*ConstI), Atan2(y, x))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("8e6867"),
    Formula(Equal(Re(x+y*ConstI), x)),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("ba6d81"),
    Formula(Equal(Im(x+y*ConstI), y)),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("acda23"),
    Formula(Equal(Conjugate(x+y*ConstI), x-y*ConstI)),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("18d335"),
    Formula(Equal(Sign(x), Cases(Tuple(1, Greater(x, 0)), Tuple(-1, Less(x, 0)), Tuple(0, Equal(x, 0))))),
    Variables(x),
    Assumptions(Element(x, RR)))

make_entry(ID("59a5d6"),
    Formula(Equal(Csgn(z), Cases(Tuple(Sign(Im(z)), Equal(Re(z), 0)), Tuple(Sign(Re(z)), Otherwise)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("e9465d"),
    Formula(Equal(Csgn(z), Sqrt(z**2) / z)),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("c423d2"),
    Formula(Equal(Arg(1), 0)))

make_entry(ID("735409"),
    Formula(Equal(Arg(ConstI), Pi/2)))

make_entry(ID("089f85"),
    Formula(Equal(Arg(-ConstI), -(Pi/2))))

make_entry(ID("a8b41c"),
    Formula(Equal(Arg(-1), Pi)))

make_entry(ID("3866dc"),
    Formula(Equal(Re(z), (z + Conjugate(z))/2)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("f1a29b"),
    Formula(Equal(Im(z), (z - Conjugate(z))/(2*ConstI))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("bcd22f"),
    Formula(Equal(z*Conjugate(z), Abs(z)**2)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("8cac46"),
    Formula(Equal(Arg(c * z), Arg(z))),
    Variables(z, c),
    Assumptions(And(Element(z, SetMinus(CC, Set(0))), Element(c, OpenInterval(0, Infinity)))))

make_entry(ID("98efc1"),
    Formula(Equal(Abs(a*b), Abs(a)*Abs(b))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("a6e081"),
    Formula(LessEqual(Abs(a+b), Abs(a)+Abs(b))),
    Description("This relation is known as the triangle inequality."),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("48fe10"),
    Formula(LessEqual(Abs(Abs(a)-Abs(b)), Abs(a-b))),
    Description("This relation is known as the reverse triangle inequality."),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("6a894d"),
    Formula(Equal(Abs(Conjugate(z)), Abs(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("ebf8cc"),
    Formula(LessEqual(Abs(Re(z)), Abs(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("fc427b"),
    Formula(LessEqual(Abs(Im(z)), Abs(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("12664e"),
    Formula(LessEqual(Abs(z), Abs(Re(z)) + Abs(Im(z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("432926"),
    Formula(LessEqual(Abs(Sign(z)), 1)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("08268d"),
    Formula(LessEqual(Abs(Arg(z)), Pi)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("54340e"),
    Formula(Equal(Sign(z), Exp(ConstI*Arg(z)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("60772e"),
    Formula(Equal(Arg(z), -(ConstI*Log(Sign(z))))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

def_Topic(
    Title("Complex plane"),
    Section("Main regions"),
    Entries(
        "77ef0c",
        "a65a14",           "d7962e",           "fc0d55",
        "912ff9",
    ),
    Section("Disks"),
    Entries(
        "c98bad",
        "d1cf0c",
    ),
    Section("Bernstein ellipses"),
    Entries(
        "40baa9",
    ),
)

make_entry(ID("77ef0c"),
    Formula(Equal(CC, Set(x+y*ConstI, For(Tuple(x, y)), And(Element(x, RR), Element(y, RR))))))

make_entry(ID("a65a14"),
    SymbolDefinition(HH, HH, "Upper complex half-plane"),
    Description("Represents the set of complex numbers with strictly positive imaginary part."))

make_entry(ID("d7962e"),
    Formula(Equal(HH, Set(tau, ForElement(tau, CC), Greater(Im(tau), 0)))))

make_entry(ID("fc0d55"),
    Formula(Equal(UnitCircle, Set(z, ForElement(z, CC), Equal(Abs(z), 1)))))

make_entry(ID("912ff9"),
    Formula(Equal(UnitCircle, Set(Exp(ConstI*theta), ForElement(theta, ClosedOpenInterval(0, 2*Pi))))))

make_entry(ID("c98bad"),
    Formula(Equal(OpenDisk(z, r), Set(t, ForElement(t, CC), Less(Abs(z-t), r)))),
    Variables(z, r),
    Assumptions(And(Element(z, CC), Element(r, RR), Greater(r, 0))))

make_entry(ID("d1cf0c"),
    Formula(Equal(ClosedDisk(z, r), Set(t, ForElement(t, CC), LessEqual(Abs(z-t), r)))),
    Variables(z, r),
    Assumptions(And(Element(z, CC), Element(r, RR), GreaterEqual(r, 0))))

make_entry(ID("40baa9"),
    Formula(Equal(BernsteinEllipse(rho), Set(Div(rho*Exp(ConstI*theta) + rho**(-1)*Exp(-(ConstI*theta)), 2), ForElement(theta, ClosedOpenInterval(0, 2*Pi))))),
    Variables(rho),
    Assumptions(And(Element(rho, RR), Greater(rho, 1))))

def_Topic(
    Title("Confluent hypergeometric functions"),
    Entries(
        "316533",
        "f565f5",
        "512bea",
        "cee331",
        "d6add6",
        "1b9cc5",
        "b9cc75",
    ),
    Section("Hypergeometric series"),
    Entries(
        "4c41ad",
        "0a0aec",
        "a61f01",
        "dec042",
        "70111e",
    ),
    Section("Differential equations"),
    Entries(
        "06f229",
        "bb5d67",
    ),
    Section("Kummer's transformation"),
    Entries(
        "be533c",
        "a047eb",
        "9d3147",
    ),
    Section("Connection formulas"),
    Entries(
        "c8fcc7",          "4cf1e9",          "f7f84e",          "6cf802",          "18ef23",          "2df3e3",          "325a0e",          "00dfd1",      ),
    Section("Asymptotic expansions"),
    Entries(
        "d1b3b5",
        "99f69c",
        "876844",
        "279e4f",
        "461a54",
        "7b91b4",
    ),
)

make_entry(ID("316533"),
    SymbolDefinition(Hypergeometric0F1, Hypergeometric0F1(a,z), "Confluent hypergeometric limit function"))

make_entry(ID("f565f5"),
    SymbolDefinition(Hypergeometric0F1Regularized, Hypergeometric0F1Regularized(a,z), "Regularized confluent hypergeometric limit function"))

make_entry(ID("512bea"),
    SymbolDefinition(Hypergeometric1F1, Hypergeometric1F1(a,b,z), "Kummer confluent hypergeometric function"))

make_entry(ID("cee331"),
    SymbolDefinition(Hypergeometric1F1Regularized, Hypergeometric1F1Regularized(a,b,z), "Regularized Kummer confluent hypergeometric function"))

make_entry(ID("d6add6"),
    SymbolDefinition(HypergeometricU, HypergeometricU(a,b,z), "Tricomi confluent hypergeometric function"))

make_entry(ID("1b9cc5"),
    SymbolDefinition(HypergeometricUStar, HypergeometricUStar(a,b,z), "Scaled Tricomi confluent hypergeometric function"))

make_entry(ID("b9cc75"),
    SymbolDefinition(Hypergeometric2F0, Hypergeometric2F0(a,b,z), "Tricomi confluent hypergeometric function, alternative notation"))

make_entry(ID("4c41ad"),
    Formula(Equal(Hypergeometric0F1(a,z), Sum(1/RisingFactorial(a,k) * (z**k / Factorial(k)), For(k, 0, Infinity)))),
    Variables(a,z),
    Assumptions(And(Element(a,SetMinus(CC,ZZLessEqual(0))), Element(z,CC))))

make_entry(ID("0a0aec"),
    Formula(Equal(Hypergeometric0F1Regularized(a,z), Sum(1/Gamma(a+k) * (z**k / Factorial(k)), For(k, 0, Infinity)))),
    Variables(a,z),
    Assumptions(And(Element(a,CC), Element(z,CC))))

make_entry(ID("a61f01"),
    Formula(Equal(Hypergeometric1F1(a,b,z), Sum(RisingFactorial(a,k)/RisingFactorial(b,k) * (z**k / Factorial(k)), For(k, 0, Infinity)))),
    Variables(a,b,z),
    Assumptions(And(Element(a,CC), Element(b, SetMinus(CC, ZZLessEqual(0))), Element(z,CC))))

make_entry(ID("dec042"),
    Formula(Equal(Hypergeometric1F1(-n,b,z), Sum(RisingFactorial(-n,k)/RisingFactorial(b,k) * (z**k / Factorial(k)), For(k, 0, n)))),
    Variables(n,b,z),
        Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(b, CC), Not(And(Element(b, ZZLessEqual(0)), Greater(b, -n))), Element(z,CC))))

make_entry(ID("70111e"),
    Formula(Equal(Hypergeometric1F1Regularized(a,b,z), Sum(RisingFactorial(a,k)/Gamma(b+k) * (z**k / Factorial(k)), For(k, 0, Infinity)))),
    Variables(a,b,z),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(z,CC))))

make_entry(ID("be533c"),
    Formula(Equal(Hypergeometric1F1(a,b,z), Exp(z) * Hypergeometric1F1(b-a, b, -z))),
    Variables(a, b, z),
    Assumptions(And(Element(a, CC), Element(b, SetMinus(CC, ZZLessEqual(0))), Element(z, CC))))

make_entry(ID("a047eb"),
    Formula(Equal(Hypergeometric1F1Regularized(a,b,z), Exp(z) * Hypergeometric1F1Regularized(b-a, b, -z))),
    Variables(a, b, z),
    Assumptions(And(Element(a, CC), Element(b, CC), Element(z, CC))))

make_entry(ID("9d3147"),
    Formula(Equal(HypergeometricU(a,b,z), z**(1-b) * HypergeometricU(1+a-b, 2-b, z))),
    Variables(a, b, z),
    Assumptions(And(Element(a, CC), Element(b, CC), Element(z, CC), NotEqual(z, 0))))

make_entry(ID("06f229"),
    Formula(Where(Equal(z * ComplexDerivative(y(z), For(z, z, 2)) + (b-z) * ComplexDerivative(y(z), For(z, z, 1)) - a*y(z), 0), Equal(y(z),
        C*Hypergeometric1F1Regularized(a,b,z) + D*HypergeometricU(a,b,z)))),
    Variables(z, a, b, C, D),
    Assumptions(And(Element(a, CC), Element(b, CC), Element(z, CC), Element(C, CC), Element(D, CC),
        Or(Equal(D, 0), NotEqual(z, 0), Element(-a, ZZGreaterEqual(0))))))

make_entry(ID("bb5d67"),
    Formula(Where(Equal(z * ComplexDerivative(y(z), For(z, z, 2)) + a * ComplexDerivative(y(z), For(z, z, 1)) - y(z), 0), Equal(y(z),
        C*Hypergeometric0F1Regularized(a,z) + D*z**(1-a)*Hypergeometric0F1Regularized(2-a,z)))),
    Variables(z, a, C, D),
    Assumptions(And(Element(a, CC), Element(z, CC), Element(C, CC), Element(D, CC),
        Or(NotEqual(z, 0), Element(1-a, ZZGreaterEqual(0))))))

make_entry(ID("c8fcc7"),
    Formula(Equal(HypergeometricUStar(a,b,z), z**a * HypergeometricU(a,b,z))),
    Variables(a, b, z),
    Assumptions(And(Element(a, CC), Element(b, CC), Element(z, CC), NotEqual(z, 0))))

make_entry(ID("4cf1e9"),
    Formula(Equal(HypergeometricUStar(a,b,z), Hypergeometric2F0(a, a-b+1, -(1/z)))),
    Variables(a, b, z),
    Assumptions(And(Element(a, CC), Element(b, CC), Element(z, CC), NotEqual(z, 0))))

make_entry(ID("f7f84e"),
    Formula(Equal(Hypergeometric1F1Regularized(a,b,z),
        Div((-z)**(-a), Gamma(b-a)) * HypergeometricUStar(a,b,z) + Div(z**(a-b) * Exp(z), Gamma(a)) * HypergeometricUStar(b-a, b, -z))),
    Variables(a, b, z),
    Assumptions(And(Element(a, CC), Element(b, CC), Element(z, CC), NotEqual(z, 0))))

make_entry(ID("6cf802"),
    Formula(Equal(HypergeometricU(a,b,z),
        Gamma(1-b) / Gamma(a-b+1) * Hypergeometric1F1(a,b,z) + Gamma(b-1)/Gamma(a) * z**(1-b) * Hypergeometric1F1(a-b+1, 2-b, z))),
    Variables(a, b, z),
    Assumptions(And(Element(a, CC), Element(b, CC), Element(z, CC), NotEqual(z, 0), NotElement(b, ZZ))))

make_entry(ID("18ef23"),
    Formula(Equal(HypergeometricU(a,n,z),
        ComplexLimit(
        Gamma(1-b) / Gamma(a-b+1) * Hypergeometric1F1(a,b,z) + Gamma(b-1)/Gamma(a) * z**(1-b) * Hypergeometric1F1(a-b+1, 2-b, z),
            For(b, n)))),
    Variables(a, n, z),
    Assumptions(And(Element(a, CC), Element(n, ZZ), Element(z, CC), NotEqual(z, 0))))

make_entry(ID("2df3e3"),
    Formula(Equal(Hypergeometric0F1(a,z), Exp(-(2*Sqrt(z))) * Hypergeometric1F1(a-Div(1,2), 2*a-1, 4*Sqrt(z)))),
    Variables(a, z),
    Assumptions(And(Element(a, CC), Element(z, CC), NotElement(2*a, ZZLessEqual(1)))))

make_entry(ID("325a0e"),
    Formula(Equal(Hypergeometric0F1Regularized(a,z), (-z)**((1-a)/2) * BesselJ(a-1, 2*Sqrt(-z)))),
    Variables(a, z),
    Assumptions(And(Element(a, CC), Element(z, CC), NotEqual(z, 0))))

make_entry(ID("00dfd1"),
    Formula(Equal(Hypergeometric0F1Regularized(a,z), z**((1-a)/2) * BesselI(a-1, 2*Sqrt(z)))),
    Variables(a, z),
    Assumptions(And(Element(a, CC), Element(z, CC), NotEqual(z, 0))))

make_entry(ID("d1b3b5"),
    Formula(Equal(HypergeometricUStar(a,b,z),
        Sum(RisingFactorial(a,k) * RisingFactorial(a-b+1,k) / (Factorial(k) * (-z)**k), For(k, 0, n-1))
        + HypergeometricUStarRemainder(n,a,b,z))),
    Variables(a,b,z,n),
    Assumptions(And(Element(a,CC), Element(b,CC), Element(z,CC), NotEqual(z,0), Element(n,ZZGreaterEqual(0)))))

make_entry(ID("99f69c"),
    SymbolDefinition(HypergeometricUStarRemainder, HypergeometricUStarRemainder(n,a,b,z), "Error term in asymptotic expansion of Tricomi confluent hypergeometric function"))

make_entry(ID("876844"),
    Formula(Equal(ComplexLimit(Abs(HypergeometricUStarRemainder(n,a,b, Exp(ConstI*theta) * z)), For(z, Infinity)), 0)),
    Variables(a,b,theta,n),
    Assumptions(And(Element(a,CC), Element(b,CC), Element(theta, RR), Element(n,ZZGreaterEqual(1)))))

make_entry(ID("279e4f"),
    Formula(Where(LessEqual(Abs(HypergeometricUStarRemainder(n,a,b,z)), 
        Abs((RisingFactorial(a,n) * RisingFactorial(a-b+1,n)) / (Factorial(n) * z**n)) *
        (2 / (1 - sigma)) * Exp((2 * rho) / ((1 - sigma) * Abs(z)))),
        Equal(sigma, Abs(b-2*a)/Abs(z)),
        Equal(rho, Abs(a**2-a*b+b/2) + sigma*(1+sigma/4)/(1-sigma)**(2)))),
    Variables(a,b,z,n),
    Assumptions(And(Element(a,CC), Element(b,CC), Element(z,CC), NotEqual(z,0), Element(n,ZZGreaterEqual(0)), Greater(Re(z), Abs(b-2*a)))),
    References("DLMF section 13.7, https://dlmf.nist.gov/13.7"))

make_entry(ID("461a54"),
    Formula(Where(LessEqual(Abs(HypergeometricUStarRemainder(n,a,b,z)),
        Abs((RisingFactorial(a,n) * RisingFactorial(a-b+1,n)) / (Factorial(n) * z**n)) *
        (2 * Sqrt(1 + Div(1,2)*Pi*n) / (1 - sigma)) * Exp((Pi * rho) / ((1 - sigma) * Abs(z)))),
        Equal(sigma, Abs(b-2*a)/Abs(z)),
        Equal(rho, Abs(a**2-a*b+b/2) + sigma*(1+sigma/4)/(1-sigma)**(2)))),
    Variables(a,b,z,n),
    Assumptions(And(Element(a,CC), Element(b,CC), Element(z,CC), NotEqual(z,0), Element(n,ZZGreaterEqual(0)), Or(Greater(Abs(Im(z)), Abs(b-2*a)), Greater(Re(z), Abs(b-2*a))))),
    References("DLMF section 13.7, https://dlmf.nist.gov/13.7"))

make_entry(ID("7b91b4"),
    Formula(Where(LessEqual(Abs(HypergeometricUStarRemainder(n,a,b,z)),
        Abs((RisingFactorial(a,n) * RisingFactorial(a-b+1,n)) / (Factorial(n) * z**n)) *
        ((2 * C(n)) / (1 - tau) * Exp(2 * C(1) * rho / ((1 - tau) * Abs(z))))),
        Equal(sigma, Abs(b-2*a)/Abs(z)),
        Equal(nu, 1+2*sigma**2),
        Equal(tau, nu * sigma),
        Equal(rho, Abs(a**2-a*b+b/2) + tau*(1+tau/4)/(1-tau)**(2)),
        Equal(C(m), (Sqrt(1+Pi*m/2) + sigma*nu**2*m) * nu**m))),
    Variables(a,b,z,n),
    Assumptions(And(Element(a,CC), Element(b,CC), Element(z,CC), NotEqual(z,0), Element(n,ZZGreaterEqual(0)), Greater(Abs(z), 2*Abs(b-2*a)))),
    References("DLMF section 13.7, https://dlmf.nist.gov/13.7"))

def_Topic(
    Title("Catalan's constant"),
    Entries(
        "f7b6aa",
    ),
    Section("Numerical value"),
    Entries(
        "6a83ad",
    ),
    Section("Special function representations"),
    Entries(
        "2744d4",
        "e85723",
        "1d65c2",
        "9e9922",
        "4c166d",
        "a766f2",
    ),
    Section("Series representations"),
    Entries(
        "33aa62",
        "d43f30",
        "0bd544",
        "37fb5f",
        "a8657e",
    ),
    Section("Integral representations"),
    Subsection("Involving elementary functions"),
    Entries(
        "ba58e0",
        "d864b2",
        "49df16",
        "997777",
        "d6703a",
        "fd82ab",
        "38c2d5",
        "c54c85",
        "ec1435",
        "79f20e",
    ),
    Subsection("Involving compositions of elementary functions"),
    Entries(
        "fc5ea9",
        "08cda4",
        "270e67",
        "4dec89",
        "d6415e",
        "e09b77",
        "6d3591",
    ),
    Subsection("Involving special functions"),
    Entries(
        "1f1fb4",
        "d3cfc2",
        "937fa9",
    ),
    Subsection("Double integrals"),
    Entries(
        "5b31ee",
        "ed4cca",
    ),
)

make_entry(ID("f7b6aa"),
    SymbolDefinition(ConstCatalan, ConstCatalan, "Catalan's constant"),
    References(
        "David M. Bradley, Representations of Catalan's constant, https://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.26.1879",
        "https://en.wikipedia.org/wiki/Catalan's_constant",
        "http://mathworld.wolfram.com/CatalansConstant.html",
        "https://doi.org/10.1017/mag.2017.4"))

make_entry(ID("6a83ad"),
    Formula(Element(ConstCatalan,
        RealBall(Decimal("0.91596559417721901505460351493238411077414937428167"), Decimal("2.14e-51")))))

make_entry(ID("2744d4"),
    Formula(Equal(ConstCatalan, Div(1,8)*(DigammaFunction(Div(1,4), 1) - Pi**2))))

make_entry(ID("e85723"),
    Formula(Equal(ConstCatalan, Div(1,16)*(HurwitzZeta(2,Div(1,4))-HurwitzZeta(2,Div(3,4))))))

make_entry(ID("1d65c2"),
    Formula(Equal(ConstCatalan, Im(PolyLog(2,ConstI)))))

make_entry(ID("9e9922"),
    Formula(Equal(ConstCatalan, DirichletL(2, DirichletCharacter(4, 3)))))

make_entry(ID("4c166d"),
    Formula(Equal(ConstCatalan, Div(1,4) * LerchPhi(-1,2,Div(1,2)))))

make_entry(ID("a766f2"),
    Formula(Equal(ConstCatalan, Hypergeometric3F2(Div(1,2), Div(1,2), 1, Div(3,2), Div(3,2), -1))))

make_entry(ID("33aa62"),
    Formula(Equal(ConstCatalan, Sum((-1)**n/(2*n+1)**2, For(n, 0, Infinity)))))

make_entry(ID("d43f30"),
    Formula(Equal(ConstCatalan, Div(1,2) * Sum(4**n / ((2*n+1)**2 * Binomial(2*n,n)), For(n, 0, Infinity)))))

make_entry(ID("0bd544"),
    Formula(Equal(ConstCatalan, (Pi/8) * Log(2 + Sqrt(3)) + Div(3,8) * Sum(1/((2*n+1)**2*Binomial(2*n,n)), For(n, 0, Infinity)))))

make_entry(ID("37fb5f"),
    Formula(Equal(ConstCatalan, Div(1,64) * Sum((256**n * (580*n**2-184*n+15))/(n**3*(2*n-1)*Binomial(6*n,3*n)*Binomial(6*n,4*n)*Binomial(4*n,2*n)), For(n, 1, Infinity)))),
    References("https://hal.inria.fr/hal-00990465/"))

make_entry(ID("a8657e"),
    Formula(Equal(ConstCatalan, 1-Sum((n * RiemannZeta(2*n+1)) / 16**n, For(n, 1, Infinity)))))

make_entry(ID("ba58e0"),
    Formula(Equal(ConstCatalan, Integral(Atan(x)/x, For(x, 0, 1)))))

make_entry(ID("d864b2"),
    Formula(Equal(ConstCatalan, -Integral(Log(x)/(x**2+1), For(x, 0, 1)))))

make_entry(ID("49df16"),
    Formula(Equal(ConstCatalan, Integral(Log(x)/(x**2+1), For(x, 1, Infinity)))))

make_entry(ID("997777"),
    Formula(Equal(ConstCatalan,  Pi**2/16 + Pi*Log(2)/4 - Integral(Atan(x)**2, For(x, 0, 1)))))

make_entry(ID("d6703a"),
    Formula(Equal(ConstCatalan,  7*RiemannZeta(3)/(4*Pi) + (2/Pi) * Integral(Atan(x)**2/x, For(x, 0, 1)))))

make_entry(ID("fd82ab"),
    Formula(Equal(ConstCatalan, Integral(Acos(x)/Sqrt(x**2+1), For(x, 0, 1)))))

make_entry(ID("38c2d5"),
    Formula(Equal(ConstCatalan, Integral(Asinh(x)/Sqrt(1-x**2), For(x, 0, 1)))))

make_entry(ID("c54c85"),
    Formula(Equal(ConstCatalan, Div(1,2) * Integral(x/Cosh(x), For(x, 0, Infinity)))))

make_entry(ID("ec1435"),
    Formula(Equal(ConstCatalan, Div(1,4) * Integral(x/Sin(x), For(x, -(Pi/2), Pi/2)))))

make_entry(ID("79f20e"),
    Formula(Equal(ConstCatalan, Integral(x/(Sin(x)*Cos(x)), For(x, 0, Pi/4)))))

make_entry(ID("fc5ea9"),
    Formula(Equal(ConstCatalan, Integral(Atan(Exp(-x)), For(x, 0, Infinity)))))

make_entry(ID("08cda4"),
    Formula(Equal(ConstCatalan, -Integral(Log(Tan(x)), For(x, 0, Pi/4)))))

make_entry(ID("270e67"),
    Formula(Equal(ConstCatalan, Integral(Log(Cot(x)), For(x, 0, Pi/4)))))

make_entry(ID("4dec89"),
    Formula(Equal(ConstCatalan, Integral(Asinh(Sin(x)), For(x, 0, Pi/2)))))

make_entry(ID("d6415e"),
    Formula(Equal(ConstCatalan, Integral(Asinh(Cos(x)), For(x, 0, Pi/2)))))

make_entry(ID("e09b77"),
    Formula(Equal(ConstCatalan, -(2*Integral(Log(2*Sin(x)), For(x, 0, Pi/4))))))

make_entry(ID("6d3591"),
    Formula(Equal(ConstCatalan, 2*Integral(Log(2*Cos(x)), For(x, 0, Pi/4)))))

make_entry(ID("1f1fb4"),
    Formula(Equal(ConstCatalan, Div(1,2) * Integral(EllipticK(m**2), For(m, 0, 1)))))

make_entry(ID("d3cfc2"),
    Formula(Equal(ConstCatalan, Integral(EllipticE(m**2), For(m, 0, 1)) - Div(1,2))))

make_entry(ID("937fa9"),
    Formula(Equal(ConstCatalan, (Pi/2) * Integral(Gamma(1+x)*Gamma(1-x), For(x, 0, Div(1,2))))))

make_entry(ID("5b31ee"),
    Formula(Equal(ConstCatalan, Integral(Integral(1/(1+x**2*y**2), For(x, 0, 1)), For(y, 0, 1)))))

make_entry(ID("ed4cca"),
    Formula(Equal(ConstCatalan, Div(1,4) * Integral(Integral(1/(((x+y)*Sqrt(1-x)*Sqrt(1-y))), For(x, 0, 1)), For(y, 0, 1)))))

def_Topic(
    Title("Euler's constant"),
    Entries(
        "39e0cb",
    ),
    Section("Numerical value"),
    Entries(
        "e876e8",
        "28bf9a",
    ),
    Section("Limit representations"),
    Entries(
        "4644c0",
        "288da1",
    ),
    Section("Special function representations"),
    Subsection("Direct values"),
    Entries(
        "cf3977",
        "d17d0b",
    ),
    Subsection("Limits at singularities"),
    Entries(
        "a1f1ec",
        "79d6ba",
        "9d5c86",
        "0888b3",
        "e8af68",
    ),
    Subsection("Infinite series"),
    Entries(
        "818008",
    ),
    Section("Integral representations"),
    Entries(
        "39fe5f",
        "a1ca3e",
    ),
    Section("Approximations"),
    Entries(
        "014c4e",
    ),
    Section("Related topics"),
    SeeTopics("Gamma function", "Riemann zeta function"),
)

make_entry(ID("39e0cb"),
    SymbolDefinition(ConstGamma, ConstGamma, "The constant gamma (0.577...)"),
    Description("The real number giving the limiting difference between the harmonic series and the natural logarithm, also known as Euler's constant or the Euler-Mascheroni constant."))

make_entry(ID("e876e8"),
    Formula(Element(ConstGamma,
        RealBall(Decimal("0.57721566490153286060651209008240243104215933593992"), Decimal("3.60e-51")))))

make_entry(ID("4644c0"),
    Formula(Equal(ConstGamma, SequenceLimit(Brackets(Parentheses(Sum(1/k, For(k, 1, n))) - Log(n)), For(n, Infinity)))))

make_entry(ID("288da1"),
    Formula(Equal(Exp(ConstGamma), SequenceLimit(1/Log(PrimeNumber(N)) * Product(PrimeNumber(n)/(PrimeNumber(n)-1), For(n, 1, N)), For(N, Infinity)))))

make_entry(ID("28bf9a"),
    Formula(NotElement(ConstGamma, Set(p/q, For(Tuple(p, q)), And(Element(p,ZZ), Element(q, ZZGreaterEqual(1)), LessEqual(q, Pow(10,242080)))))),
    References("J. Havil (2003): Exploring Euler's Constant. Princeton University Press. Page 97."))

make_entry(ID("cf3977"),
    Formula(Equal(ConstGamma, -ComplexDerivative(Gamma(z), For(z, 1, 1)))))

make_entry(ID("d17d0b"),
    Formula(Equal(ConstGamma, -DigammaFunction(1))))

make_entry(ID("a1f1ec"),
    Formula(Equal(ConstGamma, ComplexLimit(Brackets(RiemannZeta(s) - 1/(s-1)), For(s, 1)))))

make_entry(ID("79d6ba"),
    Formula(Equal(ConstGamma, -ComplexLimit(Brackets(Gamma(z) - 1/z), For(z, 0)))))

make_entry(ID("9d5c86"),
    Formula(Equal(ConstGamma, -ComplexLimit(Brackets(DigammaFunction(z) + 1/z), For(z, 0)))))

make_entry(ID("0888b3"),
    Formula(Equal(ConstGamma, RightLimit(Brackets((Pi/2) * BesselY(0,x) - Log(x/2)), For(x, 0)))))

make_entry(ID("e8af68"),
    Formula(Equal(ConstGamma, RightLimit(Brackets(-BesselK(0,x) - Log(x/2)), For(x, 0)))))

make_entry(ID("818008"),
    Formula(Equal(ConstGamma, 1-Sum((RiemannZeta(k)-1) / k, For(k, 2, Infinity)))))

make_entry(ID("39fe5f"),
    Formula(Equal(ConstGamma, -Integral(Exp(-x)*Log(x), For(x, 0, Infinity)))))

make_entry(ID("a1ca3e"),
    Formula(Equal(ConstGamma, -Integral(Log(Log(1/x)), For(x, 0, 1)))))

make_entry(ID("014c4e"),
    Formula(Where(Less(Abs(ConstGamma - (S/I - T/I**2 - Log(n))), 24*Exp(-(8*n))),
        Equal(Tuple(S, I, T), Tuple(Sum(HarmonicNumber(k) * n**(2*k) / Factorial(k)**2, For(k, 0, 5*n)),
                Sum(n**(2*k) / Factorial(k)**2, For(k, 0, 5*n)),
                Div(1,4*n) * Sum(Factorial(2*k)**3 / (Factorial(k)**4 * 8**(2*k) * (2*n)**(2*k)), For(k, 0, 2*n-1)))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))),
    References("R. Brent and F. Johansson. A bound for the error term in the Brent-McMillan algorithm. Mathematics of Computation 2015, 84(295). DOI: 10.1090/S0025-5718-2015-02931-7"))

def_Topic(
    Title("Coulomb wave functions"),
    Section("Definitions"),
    Entries(
        "8b2cb9",
        "f25e3d",
        "16a4e7",
        "2b12f4",
        "512063",
    ),
    Section("Differential equations"),
    Entries(
        "ad8df6",
        "74274a",
    ),
    Section("Connection formulas"),
    Entries(
        "192a3e",
        "8547ab",
        "01af55",
        "e20938",
        "304559",
    ),
    Section("Normalization functions"),
    Entries(
        "4a4739",
        "ed2bf6",
    ),
    Section("Derivatives"),
    Entries(
        "a51a4b",
        "2fec14",
        "07a654",
        "faa118",
        "eca10b",
    ),
    Section("Hypergeometric representations"),
    Subsection("Kummer function"),
    Entries(
        "d280c5",
        "2a2f18",
    ),
    Subsection("Tricomi function"),
    Entries(
        "1976e1",
        "e2efbf",
        "8027e8",
        "69e5fb",
        "bcdfc6",
        "f0414a",
        "781eae",
        "0cc301",
    ),
)

make_entry(ID("8b2cb9"),
    SymbolDefinition(CoulombF, CoulombF(ell,eta,z), "Regular Coulomb wave function"))

make_entry(ID("f25e3d"),
    SymbolDefinition(CoulombG, CoulombG(ell,eta,z), "Irregular Coulomb wave function"))

make_entry(ID("16a4e7"),
    SymbolDefinition(CoulombH, CoulombH(omega,ell,eta,z), "Outgoing and ingoing Coulomb wave function"))

make_entry(ID("2b12f4"),
    SymbolDefinition(CoulombC, CoulombC(ell,eta), "Coulomb wave function Gamow factor"))

make_entry(ID("512063"),
    SymbolDefinition(CoulombSigma, CoulombSigma(ell,eta), "Coulomb wave function phase shift"))

coulomb_param_condition = And(NotElement(1+ell+ConstI*eta, ZZLessEqual(0)), NotElement(1+ell-ConstI*eta, ZZLessEqual(0)))

C1 = Subscript(c, 1)

C2 = Subscript(c, 2)

make_entry(ID("ad8df6"),
    Formula(Where(Equal(ComplexDerivative(y(z), For(z, z, 2)) + (1 - (2*eta)/z - (ell*(ell+1))/z**2)*y(z), 0), Equal(y(z), C1*CoulombF(ell,eta,z) + C2*CoulombG(ell,eta,z)))),
    Variables(ell, eta, z, C1, C2),
    Assumptions(And(Element(ell, CC), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))), Element(C1, CC), Element(C2, CC))))

make_entry(ID("74274a"),
    Formula(Equal(CoulombG(ell,eta,z) * Parentheses(ComplexDerivative(CoulombF(ell,eta,z), For(z, z, 1))) - 
                  Parentheses(ComplexDerivative(CoulombG(ell,eta,z), For(z, z, 1))) * CoulombF(ell,eta,z), 1)),
    Variables(ell, eta, z),
    Assumptions(And(coulomb_param_condition, Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("192a3e"),
    Formula(Equal(CoulombF(ell, eta, z), (CoulombH(1, ell, eta, z) - CoulombH(-1, ell, eta, z))/(2*ConstI))),
    Variables(ell, eta, z),
    Assumptions(And(Element(ell, CC), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, Set(0))))))

make_entry(ID("8547ab"),
    Formula(Equal(CoulombG(ell, eta, z), (CoulombH(1, ell, eta, z) + CoulombH(-1, ell, eta, z))/2)),
    Variables(ell, eta, z),
    Assumptions(And(Element(ell, CC), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, Set(0))))))

make_entry(ID("01af55"),
    Formula(Equal(CoulombH(omega, ell, eta, z), CoulombG(ell, eta, z) + omega*ConstI*CoulombF(ell, eta, z))),
    Variables(omega, ell, eta, z),
    Assumptions(And(Element(omega, Set(-1,1)), Element(ell, CC), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, Set(0))))))

make_entry(ID("e20938"),
    Formula(Where(Equal(CoulombG(ell, eta, z),
        (CoulombF(ell,eta,z)*Cos(chi) - CoulombF(-ell-1,eta,z))/Sin(chi)),
            Equal(chi, CoulombSigma(ell,eta) - CoulombSigma(-ell-1,eta) - (ell+Div(1,2))*Pi))),
    Variables(ell, eta, z),
    Assumptions(And(Element(ell, CC), Element(eta, CC),
        NotElement(2*ell, ZZ),
        NotElement(1+ell+ConstI*eta, ZZLessEqual(0)),
        NotElement(1+ell-ConstI*eta, ZZLessEqual(0)),
        NotElement(-ell+ConstI*eta, ZZLessEqual(0)),
        NotElement(-ell-ConstI*eta, ZZLessEqual(0)), Element(z, SetMinus(CC, Set(0))))))

make_entry(ID("304559"),
    Formula(Where(Equal(CoulombH(omega, ell, eta, z),
        (CoulombF(ell,eta,z)*Exp(omega*ConstI*chi) - CoulombF(-ell-1,eta,z))/Sin(chi)),
            Equal(chi, CoulombSigma(ell,eta) - CoulombSigma(-ell-1,eta) - (ell+Div(1,2))*Pi))),
    Variables(omega, ell, eta, z),
    Assumptions(And(Element(omega, Set(-1,1)), Element(ell, CC), Element(eta, CC),
        NotElement(2*ell, ZZ),
        NotElement(1+ell+ConstI*eta, ZZLessEqual(0)),
        NotElement(1+ell-ConstI*eta, ZZLessEqual(0)),
        NotElement(-ell+ConstI*eta, ZZLessEqual(0)),
        NotElement(-ell-ConstI*eta, ZZLessEqual(0)), Element(z, SetMinus(CC, Set(0))))))

make_entry(ID("4a4739"),
    Formula(Equal(CoulombC(ell, eta), (2**ell / Gamma(2*ell+2)) * Exp((LogGamma(1+ell+ConstI*eta) + LogGamma(1+ell-ConstI*eta) - Pi*eta)/2))),
    Variables(ell, eta),
    Assumptions(And(Element(ell, CC), Element(eta, CC), coulomb_param_condition)))

make_entry(ID("ed2bf6"),
    Formula(Equal(CoulombSigma(ell, eta), (LogGamma(1+ell+ConstI*eta) - LogGamma(1+ell-ConstI*eta))/(2*ConstI))),
    Variables(ell, eta),
    Assumptions(And(Element(ell, CC), Element(eta, CC), coulomb_param_condition)))

make_entry(ID("a51a4b"),
    Formula(Equal(ComplexDerivative(CoulombF(ell, eta, z), For(z, z, 1)),
        ((ell+1)/z + eta/(ell+1)) * CoulombF(ell,eta,z) - ((Sqrt(1+ell+ConstI*eta)*Sqrt(1+ell-ConstI*eta))/(ell+1)) * CoulombF(ell+1,eta,z))),
    Variables(ell, eta, z),
    Assumptions(And(Element(ell, CC), NotEqual(ell, -1), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("2fec14"),
    Formula(Equal(ComplexDerivative(CoulombG(ell, eta, z), For(z, z, 1)),
        ((ell+1)/z + eta/(ell+1)) * CoulombG(ell,eta,z) - ((Sqrt(1+ell+ConstI*eta)*Sqrt(1+ell-ConstI*eta))/(ell+1)) * CoulombG(ell+1,eta,z))),
    Variables(ell, eta, z),
    Assumptions(And(Element(ell, CC), NotEqual(ell, -1), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("07a654"),
    Formula(Where(Equal(ComplexDerivative(f(z), For(z, z, 2)),
        ((2*eta)/z + (ell*(ell+1))/z**2 - 1) * f(z)), Equal(f(z), C1 * CoulombF(ell,eta,z) + C2 * CoulombG(ell,eta,z)))),
    Variables(ell, eta, C1, C2, z),
    Assumptions(And(Element(C1, CC), Element(C2, CC), Element(ell, CC), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("faa118"),
    Formula(Where(Equal(ComplexDerivative(f(z), For(z, z, 3)),
        ((2*eta)/z + (ell*(ell+1))/z**2 - 1) * ComplexDerivative(f(z), For(z, z, 1))
            - 2*(eta/z**2 + (ell*(ell+1))/z**3) * f(z)), Equal(f(z), C1 * CoulombF(ell,eta,z) + C2 * CoulombG(ell,eta,z)))),
    Variables(ell, eta, C1, C2, z),
    Assumptions(And(Element(C1, CC), Element(C2, CC), Element(ell, CC), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("eca10b"),
    Formula(Where(Equal(
        ComplexDerivative(f(z), For(z, z, r+4)) / Factorial(r+4),
        (-1/(z**2 * (r**2+7*r+12))) *
        (2*(r**2+5*r+6)*z*(ComplexDerivative(f(z), For(z, z, r+3)) / Factorial(r+3)) + 
         (r**2+3*r + z**2 - 2*z*eta - ell*(ell+1) + 2)*(ComplexDerivative(f(z), For(z, z, r+2)) / Factorial(r+2)) + 
         2*(z-eta) * (ComplexDerivative(f(z), For(z, z, r+1)) / Factorial(r+1)) + 
         (ComplexDerivative(f(z), For(z, z, r)) / Factorial(r)))),
            Equal(f(z), C1 * CoulombF(ell,eta,z) + C2 * CoulombG(ell,eta,z)))),
    Variables(r, ell, eta, C1, C2, z),
    Assumptions(And(Element(r, ZZGreaterEqual(0)),
        Element(C1, CC), Element(C2, CC), Element(ell, CC), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))))

make_entry(ID("d280c5"),
    Formula(Equal(CoulombF(ell, eta, z), CoulombC(ell,eta) * z**(ell+1) * Exp(omega*ConstI*z) * Hypergeometric1F1(1+ell+omega*ConstI*eta, 2*ell+2, -(2*omega*ConstI*z)))),
    Variables(omega, ell, eta, z),
    Assumptions(And(Element(omega, Set(-1,1)), Element(ell, CC), Element(eta, CC), coulomb_param_condition, NotElement(2*ell+2, ZZLessEqual(0)), Element(z, SetMinus(CC, Set(0))))))

make_entry(ID("2a2f18"),
    Formula(Equal(CoulombF(ell, eta, z), 2**ell * Exp((LogGamma(1+ell+ConstI*eta) + LogGamma(1+ell-ConstI*eta) - Pi*eta)/2) * z**(ell+1) * Exp(omega*ConstI*z) * Hypergeometric1F1Regularized(1+ell+omega*ConstI*eta, 2*ell+2, -(2*omega*ConstI*z)))),
    Variables(omega, ell, eta, z),
    Assumptions(And(Element(omega, Set(-1,1)), Element(ell, CC), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, Set(0))))))

_U1 = HypergeometricUStar(u, 2*ell+2, -(2*ConstI*z))

_U2 = HypergeometricUStar(v, 2*ell+2, 2*ConstI*z)

make_entry(ID("1976e1"),
    Formula(Equal(CoulombF(ell, eta, z), Where(
        2**ell * z**(ell+1) * Exp((LogGamma(u)+LogGamma(v)-Pi*eta)/2) * 
            (
                ((Exp(ConstI*z) * _U1) / ((2*ConstI*z)**u * Gamma(v))) +
                ((Exp(-ConstI*z) * _U2) / ((-(2*ConstI*z))**v * Gamma(u)))
            ),
        Equal(u, 1+ell+ConstI*eta), Equal(v, 1+ell-ConstI*eta)))),
    Variables(ell, eta, z),
    Assumptions(And(Element(ell, CC), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, Set(0))))))

_H1 = (2*z)**(-(ConstI*eta)) * Exp(ConstI*(z-ell*Pi/2 + CoulombSigma(ell,eta))) * HypergeometricUStar(1+ell+ConstI*eta, 2*ell+2, -(2*ConstI*z))

_H2 = (2*z)**((ConstI*eta)) * Exp(-(ConstI*(z-ell*Pi/2 + CoulombSigma(ell,eta)))) * HypergeometricUStar(1+ell-ConstI*eta, 2*ell+2, (2*ConstI*z))

make_entry(ID("e2efbf"),
    Formula(Equal(CoulombG(ell,eta,z), Div(1,2) * (_H1 + _H2))),
    Variables(ell, eta, z),
    Assumptions(And(Element(ell, CC), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, Set(0))),
        Greater(Re(z), 0))))

make_entry(ID("8027e8"),
    Formula(Equal(CoulombG(ell,eta,z), _H1 - ConstI*CoulombF(ell,eta,z))),
    Variables(ell, eta, z),
    Assumptions(And(Element(ell, CC), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, Set(0))),
        Or(GreaterEqual(Im(z), 0), Greater(Re(z), 0)))))

make_entry(ID("69e5fb"),
    Formula(Equal(CoulombG(ell,eta,z), _H2 + ConstI*CoulombF(ell,eta,z))),
    Variables(ell, eta, z),
    Assumptions(And(Element(ell, CC), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, Set(0))),
        Or(Less(Im(z), 0), GreaterEqual(Re(z), 0)))))

make_entry(ID("bcdfc6"),
    Formula(Equal(CoulombH(1,ell,eta,z), _H1)),
    Variables(ell, eta, z),
    Assumptions(And(Element(ell, CC), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, Set(0))),
        Or(GreaterEqual(Im(z), 0), Greater(Re(z), 0)))))

make_entry(ID("f0414a"),
    Formula(Equal(CoulombH(1,ell,eta,z), _H2 + 2*ConstI*CoulombF(ell,eta,z))),
    Variables(ell, eta, z),
    Assumptions(And(Element(ell, CC), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, Set(0))),
        Or(Less(Im(z), 0), GreaterEqual(Re(z), 0)))))

make_entry(ID("781eae"),
    Formula(Equal(CoulombH(-1,ell,eta,z), _H2)),
    Variables(ell, eta, z),
    Assumptions(And(Element(ell, CC), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, Set(0))),
        Or(Less(Im(z), 0), GreaterEqual(Re(z), 0)))))

make_entry(ID("0cc301"),
    Formula(Equal(CoulombH(-1,ell,eta,z), _H1 - 2*ConstI*CoulombF(ell,eta,z))),
    Variables(ell, eta, z),
    Assumptions(And(Element(ell, CC), Element(eta, CC), coulomb_param_condition, Element(z, SetMinus(CC, Set(0))),
        Or(GreaterEqual(Im(z), 0), Greater(Re(z), 0)))))

def_Topic(
    Title("Dedekind eta function"),
    Section("Definitions"),
    Entries(
        "a203bb",
        "82a63c",
    ),
    Section("Fourier series (q-series)"),
    Entries(
        "1dc520",
        "ff587a",
        "2e7fdb",
        "8f10b0",
    ),
    Section("Specific values"),
    Subsection("Limiting values"),
    Entries(
        "6b9935",
        "d8025b",
    ),
    Subsection("Imaginary quadratic points"),
    Entries(
        "9b8c9f",
        "5706ab",
        "87e9ed",
        "9ce413",
        "3a56d8",
        "d2900f",
        "62ffb3",
        "7cc3d3",
        "be2f32",
        "0701dc",
        "e3e4c5",
    ),
    Subsection("Third roots of unity"),
    Entries(
        "204acd",
        "4af6db",
    ),
    Section("Connection formulas"),
    Entries(
        "737805",
    ),
    Section("Modular transformations"),
    SeeTopics("Modular transformations"),
    Entries(
        "f4dc79",
        "1bae52",
        "acee1a",
        "3b806f",
        "29d9ab",
        "9f19c1",
        "f04e01",
        "921ef0",
        "a1a3d4",
    ),
    Section("Derivatives"),
    Entries(
        "871996",
        "1c25d3",
        "02d14f",
        "df5f38",
    ),
    Section("Analytic properties"),
    Entries(
        "e06d87",
        "04f4a0",
        "f2e2c2",
        "6d7668",
        "39fb36",
    ),
    Section("Dedekind sums"),
    Entries(
        "7af83f",
        "23961e",
        "c2e919",
    ),
    Section("Related topics"),
    SeeTopics("Partition function"),
)

make_entry(ID("a203bb"),
    SymbolDefinition(DedekindEta, DedekindEta(tau), "Dedekind eta function"),
    Description("The Dedekind eta function", DedekindEta(tau), "is a function of one variable", tau, "in the upper half-plane."))

make_entry(ID("82a63c"),
    SymbolDefinition(EulerQSeries, EulerQSeries(q), "Euler's q-series"),
    Description("Euler's q-series", EulerQSeries(q), "is a function of one variable", q, "in the unit disk."))

make_entry(ID("2e7fdb"),
    Formula(Equal(EulerQSeries(q), Product(Parentheses(1 - q**k), For(k, 1, Infinity)))),
    Variables(q),
    Assumptions(And(Element(q, CC), Less(Abs(q), 1))))

make_entry(ID("8f10b0"),
    Formula(Equal(EulerQSeries(q), Sum((-1)**k * q**(k*(3*k-1)/2), For(k, -Infinity, Infinity)))),
    Variables(q),
    Assumptions(And(Element(q, CC), Less(Abs(q), 1))))

make_entry(ID("ff587a"),
    Formula(Equal(DedekindEta(tau), Exp(Pi*ConstI*tau/12) * EulerQSeries(Exp(2*Pi*ConstI*tau)))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("1dc520"),
    Formula(Equal(DedekindEta(tau), Exp(Pi*ConstI*tau/12) * Product(Parentheses(1 - Exp(2*Pi*ConstI*k*tau)), For(k, 1, Infinity)))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("6b9935"),
    Formula(Equal(DedekindEta(ConstI*Infinity), ComplexLimit(DedekindEta(tau), For(tau, ConstI*Infinity)), 0)))

make_entry(ID("d8025b"),
    Formula(Equal(RightLimit(DedekindEta(ConstI*epsilon), For(epsilon, 0)), 0)))

rc = Gamma(Div(1,4)) / (2 * Pi ** Div(3,4))

make_entry(ID("9b8c9f"),
    Formula(Equal(DedekindEta(ConstI), rc)))

make_entry(ID("5706ab"),
    Formula(Equal(ComplexDerivative(DedekindEta(tau), For(tau, ConstI)),
         -Div(ConstI,4)*DedekindEta(ConstI))))

make_entry(ID("87e9ed"),
    Formula(Equal(DedekindEta(2 * ConstI), Div(DedekindEta(ConstI), Pow(2,Div(3,8))))))

make_entry(ID("9ce413"),
    Formula(Equal(DedekindEta(3 * ConstI), Div(DedekindEta(ConstI), Pow(3,Div(3,8)) * (2+Sqrt(3))**Div(1,12)))))

make_entry(ID("3a56d8"),
    Formula(Equal(DedekindEta(4 * ConstI), Div(DedekindEta(ConstI), Pow(2,Div(13,16)) * (1+Sqrt(2))**Div(1,4)))))

make_entry(ID("d2900f"),
    Formula(Equal(DedekindEta(5 * ConstI), Div(DedekindEta(ConstI), Sqrt(5 * GoldenRatio)))),
    References("https://math.stackexchange.com/questions/1334684/what-is-the-exact-value-of-eta6i/1334940"))

make_entry(ID("62ffb3"),
    Formula(Equal(DedekindEta(6 * ConstI), (1/Pow(6, Div(3, 8))) * ((5-Sqrt(3))/2 - Pow(3, Div(3,4))/Sqrt(2))**Div(1,6) * DedekindEta(ConstI))),
    References("https://math.stackexchange.com/questions/1334684/what-is-the-exact-value-of-eta6i/1334940"))

make_entry(ID("7cc3d3"),
    Formula(Equal(DedekindEta(7 * ConstI), (1/Sqrt(7)) * (-Div(7,2) + Sqrt(7) + Div(1,2) * Sqrt(-7 + 4*Sqrt(7)))**Div(1,4) * DedekindEta(ConstI))),
    References("https://math.stackexchange.com/questions/1334684/what-is-the-exact-value-of-eta6i/1334940"))

make_entry(ID("be2f32"),
    Formula(Equal(DedekindEta(8 * ConstI), (1/Pow(2, Div(41,32))) * (Pow(Pow(2, Div(1,4)) - 1, Div(1,2)) / (1 + Sqrt(2))**Div(1,8)) * DedekindEta(ConstI))),
    References("https://math.stackexchange.com/questions/1334684/what-is-the-exact-value-of-eta6i/1334940"))

make_entry(ID("0701dc"),
    Formula(Equal(DedekindEta(16 * ConstI), (1/Pow(2, Div(113,64))) * ((Pow(2, Div(1,4)) - 1)**Div(1,4) / (1 + Sqrt(2))**Div(1,16)) * (-Pow(2,Div(5,8)) + Sqrt(1 + Sqrt(2)))**Div(1,2) * DedekindEta(ConstI))),
    References("https://math.stackexchange.com/questions/1334684/what-is-the-exact-value-of-eta6i/1334940"))

make_entry(ID("e3e4c5"),
    Formula(Equal(DedekindEta(Sqrt(3) * ConstI), Pow(3,Div(1,8)) / Pow(2,Div(4,3)) * (Gamma(Div(1,3))**Div(3,2) / Pi))),
    References("https://math.stackexchange.com/questions/1334684/what-is-the-exact-value-of-eta6i/1334940"))

make_entry(ID("204acd"),
    Formula(Equal(DedekindEta(Exp(2*Pi*ConstI/3)), Exp(-(Pi*ConstI/24)) * (Pow(3,Div(1,8)) * Pow(Gamma(Div(1,3)), Div(3,2)) / (2 * Pi)))))

make_entry(ID("4af6db"),
    Formula(Equal(ComplexDerivative(DedekindEta(tau), For(tau, Exp(2*Pi*ConstI/3))),
        ((ConstI*Sqrt(3))/6) * DedekindEta(Exp(2*Pi*ConstI/3)))))

make_entry(ID("737805"),
    Formula(Equal(DedekindEta(tau), Exp(Pi*ConstI*tau/12) * JacobiTheta(3,(tau+1)/2, 3*tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("f4dc79"),
    SymbolDefinition(DedekindEtaEpsilon, DedekindEtaEpsilon(a,b,c,d), "Root of unity in the functional equation of the Dedekind eta function"))

make_entry(ID("1bae52"),
    Formula(Equal(DedekindEta(tau+1), Exp(Pi*ConstI/12) * DedekindEta(tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("acee1a"),
    Formula(Equal(DedekindEta(tau+24), DedekindEta(tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("3b806f"),
    Formula(Equal(DedekindEta(-(1/tau)), (-(ConstI*tau))**Div(1,2) * DedekindEta(tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("29d9ab"),
    Formula(Equal(DedekindEta((a*tau+b)/(c*tau+d)) ** 24, (c*tau+d)**12 * DedekindEta(tau)**24)),
    Variables(tau,a,b,c,d),
    Assumptions(And(Element(tau, HH), Element(Matrix2x2(a, b, c, d), SL2Z))))

make_entry(ID("9f19c1"),
    Formula(Equal(DedekindEta((a*tau+b)/(c*tau+d)), DedekindEtaEpsilon(a,b,c,d) * (c*tau+d)**Div(1,2) * DedekindEta(tau))),
    Variables(tau,a,b,c,d),
    Assumptions(And(Element(tau, HH), Element(Matrix2x2(a, b, c, d), PSL2Z))))

make_entry(ID("f04e01"),
    Formula(Equal(DedekindEtaEpsilon(1,b,0,1), Exp((Pi*ConstI*b)/12))),
    Variables(b),
    Element(b, ZZ))

make_entry(ID("921ef0"),
    Formula(Equal(DedekindEtaEpsilon(a,b,c,d), Exp((Pi*ConstI*((a+d)/(12*c) - DedekindSum(d,c) - Div(1,4)))))),
    Variables(a,b,c,d),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ), Element(c, ZZ), Element(d, ZZ), Equal(a*d-b*c, 1), Greater(c, 0))))

make_entry(ID("a1a3d4"),
    Formula(Equal(DedekindEta(tau+Div(1,2)), Exp(Pi*ConstI/24) * (DedekindEta(2*tau)**3 / (DedekindEta(tau) * DedekindEta(4*tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("871996"),
    Formula(Equal(ComplexDerivative(DedekindEta(tau), For(tau, tau)),
        ((ConstI * Pi) / 12) * DedekindEta(tau) * EisensteinE(2, tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("1c25d3"),
    Formula(Equal(ComplexDerivative(DedekindEta(tau), For(tau, tau)),
        (ConstI / (2 * Pi)) * DedekindEta(tau) * WeierstrassZeta(Div(1,2), tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("02d14f"),
    Formula(Where(
        Equal(36*ComplexDerivative(y(tau), For(tau, tau))**2 - 24*ComplexDerivative(y(tau), For(tau, tau, 2))*y(tau) + ComplexDerivative(y(tau), For(tau, tau, 3)), 0),
        Equal(y(tau), ComplexDerivative(DedekindEta(tau), For(tau, tau)) / DedekindEta(tau)))),
    Variables(tau),
    Assumptions(Element(tau, HH)),
    References("http://functions.wolfram.com/EllipticFunctions/DedekindEta/13/01/0002/"))

make_entry(ID("df5f38"),
    Formula(
        Equal(
            DedekindEta(tau)**2*(33*ComplexDerivative(DedekindEta(tau), For(tau,tau,2))**2
            + DedekindEta(tau)*ComplexDerivative(DedekindEta(tau), For(tau,tau,4)))
            - 18*ComplexDerivative(DedekindEta(tau), For(tau,tau))**4
            + 12*DedekindEta(tau)*ComplexDerivative(DedekindEta(tau), For(tau,tau,2))*ComplexDerivative(DedekindEta(tau), For(tau,tau))**2
            - 28*DedekindEta(tau)**2*ComplexDerivative(DedekindEta(tau), For(tau,tau,3))*ComplexDerivative(DedekindEta(tau), For(tau,tau)), 0)),
    Variables(tau),
    Assumptions(Element(tau, HH)),
    References("http://functions.wolfram.com/EllipticFunctions/DedekindEta/13/01/0001/"))

make_entry(ID("e06d87"),
    Formula(IsHolomorphic(DedekindEta(tau), ForElement(tau, HH))))

make_entry(ID("04f4a0"),
    Formula(Equal(Poles(DedekindEta(tau), ForElement(tau, Union(HH, Set(UnsignedInfinity)))), Set())))

make_entry(ID("f2e2c2"),
    Formula(Equal(BranchPoints(DedekindEta(tau), tau, Union(HH, Set(UnsignedInfinity))), Set())))

make_entry(ID("6d7668"),
    Formula(Equal(BranchCuts(DedekindEta(tau), tau, HH), Set())))

make_entry(ID("39fb36"),
    Formula(Equal(Zeros(DedekindEta(tau), ForElement(tau, HH)), Set())))

make_entry(ID("7af83f"),
    SymbolDefinition(DedekindSum, DedekindSum(n,k), "Dedekind sum"))

make_entry(ID("23961e"),
    Formula(Equal(DedekindSum(n,k), Sum((r/k) * ((n*r/k) - Floor(n*r/k) - Div(1,2)), For(r, 1, k-1)))),
    Variables(n,k),
    Assumptions(And(Element(n, ZZ), Element(k, ZZ), Greater(k, 0), Equal(GCD(n, k), 1))))

make_entry(ID("c2e919"),
    Formula(Equal(DedekindSum(n,k), Where(Sum(Q(r/k)*Q(n*r/k), For(r, 1, k-1)), Def(Q(x), Cases(Tuple(x-Floor(x)-Div(1,2), NotElement(x, ZZ)), Tuple(0, Element(x, ZZ))))))),
    Variables(n,k),
    Assumptions(And(Element(n, ZZ), Element(k, ZZ))))

def_Topic(
    Title("Digamma function"),
    Section("Definitions"),
    Entries(
        "f1527d",
        "8bdd03",
    ),
    Section("Illustrations"),
    Entries(
        "cf93bc",
        "a20761",
    ),
    Section("Domain and singularities"),
    Subsection("Digamma function"),
    Entries(
        "03d70f",
        "a0845d",
        "e7aef3",
        "f29019",
        "453c11",
    ),
    Subsection("Polygamma functions"),
    Entries(
        "9ee737",
        "d0bba3",
        "a8ab81",
        "394cdc",
        "d9403e",
        "86333d",
    ),
    Section("Specific values"),
    Description("Main topic: ", TopicReference("Specific values of the digamma function")),
    Subsection("Zeros"),
    Entries(
        "950e5a",
        "3f15eb",
    ),
    Subsection("Values at integers and simple fractions"),
    Entries(
        "ea2482",
        "ada157",
        "00c02a",
        "89bed3",
        "98f642",
        "7ec4f0",
        "3fe553",
    ),
    Subsection("Values of polygamma functions at integers and simple fractions"),
    Entries(
        "babd3c",
        "90b26f",
        "5ce30b",
        "807c7d",
    ),
    Section("Zeros"),
    Entries(
        "d0b65a",
        "6000d0",
        "233814",
        "fb9942",
    ),
    Section("Derivatives and differential equations"),
    Description("Related topic:", TopicReference("Gamma function")),
    Entries(
        "8415c7",
        "4b6ccb",
        "f1e02b",
        "6db9fc",
        "21f4f9",
    ),
    Section("Series representations"),
    Subsection("Series of rational functions"),
    Entries(
        "686524",
        "dfb55b",
    ),
    Subsection("Taylor series"),
    Entries(
        "c76eaf",
    ),
    Subsection("Laurent series"),
    Entries(
        "a2675b",
        "b4825b",
        "ddc7e1",
    ),
    Subsection("Asymptotic expansions"),
    Entries(
        "cf5355",
        "24c9e9",
    ),
    Subsection("Weierstrass product"),
    Entries(
        "bf533f",
    ),
    Section("Representation by other functions"),
    Entries(
        "bba4ec",
        "d6fbc8",
        "ee3dc5",
        "a6bdf5",
    ),
    Section("Functional equations"),
    Subsection("Recurrence relations"),
    Entries(
        "11dfd2",
        "9f32fe",
        "554ac2",
        "039051",
        "34fafa",
        "c687d6",
    ),
    Subsection("Reflection formula"),
    Entries(
        "adf5e2",
        "361f61",
    ),
    Subsection("Multiplication theorem"),
    Entries(
        "eec21a",
        "7b724b",
    ),
    Subsection("Conjugate symmetry"),
    Entries(
        "aa47cd",
        "5db5f2",
    ),
    Section("Integral representations"),
    Entries(
        "62b81d",
        "e1e71f",
        "a4cc3b",
        "f946a5",
        "cfb999",
        "d9c818",
        "4f5575",
        "c89abc",
        "547fcd",
    ),
    Section("Generating functions"),
    Entries(
        "4e3853",
        "88e89f",
    ),
    Section("Finite sums"),
    Entries(
        "1e47db",
        "458a97",
        "739819",
        "bb9eb6",
    ),
    Section("Bounds and inequalities"),
    Subsection("Real range and signs"),
    Entries(
        "4fdf65",
        "3c4f5f",
        "d4bdf8",
        "c86ca1",
        "15d56a",
        "0e5d90",
    ),
    Subsection("Real upper and lower bounds"),
    Entries(
        "24d810",
        "94a81f",
        "e63fe8",
        "8671a4",
        "5a3c4a",
    ),
    Subsection("Monotonicity"),
    Entries(
        "6cabb7",
        "b16177",
    ),
    Section("Summation of rational functions"),
    Subsection("Infinite series"),
    Entries(
        "7212ea",
        "f42042",
        "d02cf9",
        "21e21a",
        "b7f13b",
    ),
    Subsection("Finite sums"),
    Entries(
        "19e67f",
    ),
)

def_Topic(
    Title("Specific values of the digamma function"),
    Description("Related topic: ", TopicReference("Digamma function")),
    Section("Zeros"),
    Entries(
        "950e5a",
        "3f15eb",
    ),
    Section("Values at integers"),
    Entries(
        "ea2482",
        "ada157",
        "75f9bf",
        "00c02a",
    ),
    Section("Values at simple fractions"),
    Entries(
        "89bed3",
        "98f642",
        "45a969",
        "7ec4f0",
        "f93bae",
        "177de7",
        "967bbb",
        "8c368f",
    ),
    Section("Values at general fractions"),
    Entries(
        "3fe553",
    ),
    Section("Values of polygamma functions at integers and simple fractions"),
    Entries(
        "babd3c",
        "4a30f1",
        "a62320",
        "fa0292",
        "90b26f",
        "595f46",
        "b31fd2",
        "2251c6",
        "5ce30b",
        "807c7d",
        "d2f9fb",
        "03aca0",
        "e83059",
        "bb88c8",
        "921d61",
    ),
    Section("Specific complex parts"),
    Entries(
        "03e2a6",
        "22a9cd",
        "6f3fec",
    ),
    Section("Limits at singularities"),
    Entries(
        "42c1f5",
        "78c19c",
        "1cbe83",
        "dce62c",
    ),
    Section("Infinite sums over zeros"),
    Entries(
        "1165fc",
        "39ce44",
        "a4f9c9",
        "6547da",
    ),
)

make_entry(ID("f1527d"),
    SymbolDefinition(DigammaFunction, DigammaFunction(z), "Digamma function"),
    Description(SourceForm(DigammaFunction(z)), ", rendered as", DigammaFunction(z), ", represents the digamma function of argument", z, "."),
    Description(SourceForm(DigammaFunction(z, m)), ", rendered as", DigammaFunction(z, m), ", represents the order", m,
        "derivative of the digamma function of argument", z, ". ",
        "This is also known as the polygamma function of order", m, "and argument", z, ". ",
        "The case", Equal(m, 1), "(rendered as ", DigammaFunction(z,1), ") is sometimes called the trigamma function, ", Equal(m, 2), "the tetragamma function, etc."),
)

make_entry(ID("8bdd03"),
    SymbolDefinition(DigammaFunctionZero, DigammaFunctionZero(n), "Zero of the digamma function"))

make_entry(ID("cf93bc"),
    Image(Description("X-ray of", DigammaFunction(z), "on", Element(z, ClosedInterval(-5,5) + ClosedInterval(-5,5)*ConstI)),
        ImageSource("xray_digamma")),
    description_xray,
    )

make_entry(ID("a20761"),
    Image(Description("X-ray of", DigammaFunction(z,1), "on", Element(z, ClosedInterval(-5,5) + ClosedInterval(-5,5)*ConstI)),
        ImageSource("xray_trigamma")),
    description_xray,
    )

make_entry(ID("03d70f"),
    Formula(Implies(Element(x, SetMinus(RR, ZZLessEqual(0))), Element(DigammaFunction(x), RR))),
    Variables(x))

make_entry(ID("a0845d"),
    Formula(Implies(Element(z, SetMinus(CC, ZZLessEqual(0))), Element(DigammaFunction(z), CC))),
    Variables(z))

make_entry(ID("e7aef3"),
    Formula(IsHolomorphic(DigammaFunction(z), ForElement(z, SetMinus(CC, ZZLessEqual(0))))))

make_entry(ID("f29019"),
    Formula(IsMeromorphic(DigammaFunction(z), ForElement(z, CC))))

make_entry(ID("453c11"),
    Formula(Equal(Poles(DigammaFunction(z), ForElement(z, CC)), ZZLessEqual(0))))

make_entry(ID("9ee737"),
    Formula(Equal(DigammaFunction(z,0), DigammaFunction(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("d0bba3"),
    Formula(Implies(And(Element(m, ZZGreaterEqual(0)), Element(x, SetMinus(RR, ZZLessEqual(0)))), Element(DigammaFunction(x, m), RR))),
    Variables(x, m))

make_entry(ID("a8ab81"),
    Formula(Implies(And(Element(m, ZZGreaterEqual(0)), Element(z, SetMinus(CC, ZZLessEqual(0)))), Element(DigammaFunction(z, m), CC))),
    Variables(z, m))

make_entry(ID("394cdc"),
    Formula(IsHolomorphic(DigammaFunction(z, m), ForElement(z, SetMinus(CC, ZZLessEqual(0))))),
    Variables(m),
    Assumptions(Element(m, ZZGreaterEqual(0))))

make_entry(ID("d9403e"),
    Formula(IsMeromorphic(DigammaFunction(z, m), ForElement(z, CC))),
    Variables(m),
    Assumptions(Element(m, ZZGreaterEqual(0))))

make_entry(ID("86333d"),
    Formula(Equal(Poles(DigammaFunction(z, m), ForElement(z, CC)), ZZLessEqual(0))),
    Variables(m),
    Assumptions(Element(m, ZZGreaterEqual(0))))

make_entry(ID("8415c7"),
    Formula(Equal(DigammaFunction(z), ComplexDerivative(Gamma(z), For(z, z)) / Gamma(z))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("4b6ccb"),
    Formula(Equal(DigammaFunction(z), ComplexBranchDerivative(Brackets(LogGamma(z)), For(z, z)))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("f1e02b"),
    Formula(Equal(DigammaFunction(z, m), ComplexBranchDerivative(Brackets(LogGamma(z)), For(z, z, m + 1)))),
    Variables(m, z),
    Assumptions(And(Element(m, ZZGreaterEqual(0)), Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("6db9fc"),
    Formula(Equal(ComplexDerivative(Brackets(DigammaFunction(z)), For(z, z, n)), DigammaFunction(z, n))),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("21f4f9"),
    Formula(Equal(ComplexDerivative(Brackets(DigammaFunction(z, m)), For(z, z, n)), DigammaFunction(z, m+n))),
    Variables(n, m, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(m, ZZGreaterEqual(0)), Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("686524"),
    Formula(Equal(DigammaFunction(z), -ConstGamma + Sum(Parentheses(1/(n+1) - 1/(n+z)), For(n, 0, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("dfb55b"),
    Formula(Equal(DigammaFunction(z, m), (-1)**(m+1) * Factorial(m) * Sum(1/(n+z)**(m+1), For(n, 0, Infinity)))),
    Variables(m, z),
    Assumptions(And(Element(m, ZZGreaterEqual(1)), Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("c76eaf"),
    Formula(Equal(DigammaFunction(1+z), -ConstGamma + Sum((-1)**(n+1) * RiemannZeta(n+1) * z**n, For(n, 1, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Less(Abs(z), 1))))

make_entry(ID("a2675b"),
    Formula(Equal(DigammaFunction(z), -(1/z) - ConstGamma + Sum((-1)**(n+1) * RiemannZeta(n+1) * z**n, For(n, 1, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Less(Abs(z), 1))))

make_entry(ID("b4825b"),
    Formula(Equal(DigammaFunction(-n+z), -(1/z) + DigammaFunction(n+1) + Sum(((-1)**(k+1) * RiemannZeta(k+1) + Sum(1/j**(k+1), For(j, 1, n))) * z**k, For(k, 1, Infinity)))),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, CC), Less(Abs(z), 1))))

make_entry(ID("ddc7e1"),
    Formula(Equal(DigammaFunction(-n+z, m), (-1)**(m+1)*Factorial(m)/z**(m+1) + Sum(RisingFactorial(k+1,m) * ((-1)**(m+k+1)*RiemannZeta(m+k+1) + Sum(1/j**(k+m+1), For(j, 1, n))) * z**k, For(k, 0, Infinity)))),
    Variables(n, m, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(m, ZZGreaterEqual(1)), Element(z, CC), Less(Abs(z), 1))))

make_entry(ID("cf5355"),
    Formula(Equal(DigammaFunction(z), Log(z) - 1/(2*z) - Sum(BernoulliB(2*n)/(2*n*z**(2*n)), For(n, 1, N-1)) + Derivative(StirlingSeriesRemainder(N, z), For(z, z)))),
    Variables(z, N),
    Assumptions(And(Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))), Element(N, ZZGreaterEqual(0)))))

make_entry(ID("24c9e9"),
    Formula(Equal(DigammaFunction(z, m),
        ((-1)**(m+1) / Factorial(m)) * (1 / (m*z**m) + 1/(2*z**(m+1)) + 
            Sum((RisingFactorial(m+1,2*n-1)/Factorial(2*n)) * (BernoulliB(2*n) / z**(m+2*n)), For(n, 1, N-1)))
            + Derivative(StirlingSeriesRemainder(N, z), For(z, z, m+1)))),
    Variables(m, z, N),
    Assumptions(And(Element(m, ZZGreaterEqual(1)), Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))), Element(N, ZZGreaterEqual(0)))))

make_entry(ID("bf533f"),
    Formula(Equal(DigammaFunction(z)/Gamma(z),
        -(Exp(2*ConstGamma*z)*Product((1-z/DigammaFunctionZero(n)) * Exp(z/DigammaFunctionZero(n)), For(n, 0, Infinity))))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, ZZLessEqual(0)))),
    References("https://doi.org/10.1080%2F10652469.2017.1376193"))

make_entry(ID("bba4ec"),
    Formula(Equal(DigammaFunction(z, m), (-1)**(m+1) * Factorial(m) * HurwitzZeta(m+1, z))),
    Variables(m, z),
    Assumptions(And(Element(m, ZZGreaterEqual(1)), Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("d6fbc8"),
    Formula(Equal(DigammaFunction(z, m), (-1)**(m+1) * Factorial(m) * LerchPhi(1, m+1, z))),
    Variables(m, z),
    Assumptions(And(Element(m, ZZGreaterEqual(1)), Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("ee3dc5"),
    Formula(Equal(DigammaFunction(z), (z-1) * Hypergeometric3F2(1, 1, 2-z, 2, 2, 1) - ConstGamma)),
    Variables(z),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0))),
    References("http://functions.wolfram.com/GammaBetaErf/PolyGamma/26/01/01/0001/"))

make_entry(ID("a6bdf5"),
    Formula(Equal(DigammaFunction(z), -StieltjesGamma(0, z))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("d0b65a"),
    Formula(Implies(Element(n, ZZGreaterEqual(0)), Element(DigammaFunctionZero(n), RR))))

make_entry(ID("6000d0"),
    Formula(Equal(Zeros(DigammaFunction(z), ForElement(z, CC)), Set(DigammaFunctionZero(n), ForElement(n, ZZGreaterEqual(0))))))

make_entry(ID("233814"),
    Formula(Equal(DigammaFunctionZero(n),
        Where(UniqueZero(DigammaFunction(x), ForElement(x, S)),
            Equal(S,
                Cases(Tuple(OpenInterval(0, Infinity), Equal(n, 0)),
                      Tuple(OpenInterval(-n,-n+1), Less(n, 0))))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("950e5a"),
    Description("Table of", DigammaFunctionZero(n), "to 50 digits for", LessEqual(0, n, 10)),
    Table(
      Var(n),
      TableValueHeadings(n, NearestDecimal(DigammaFunctionZero(n), 50)),
      TableSplit(1),
      List(
    Tuple(0, Decimal("1.4616321449683623412626595423257213284681962040064")),
    Tuple(1, Decimal("-0.50408300826445540925826930453330249895538518236858")),
    Tuple(2, Decimal("-1.5734984731623904587782860436904346126550408591168")),
    Tuple(3, Decimal("-2.6107208684441446500015377157187242079510740108735")),
    Tuple(4, Decimal("-3.6352933664369010978391815669460177139484238611935")),
    Tuple(5, Decimal("-4.6532377617431424417145981511482073637190694161339")),
    Tuple(6, Decimal("-5.6671624415568855358494741745181554247117957876948")),
    Tuple(7, Decimal("-6.6784182130734267428298558886022000992046860101508")),
    Tuple(8, Decimal("-7.6877883250316260374400988918437049536838217978826")),
    Tuple(9, Decimal("-8.6957641638164012664887761608046458202724380849667")),
    Tuple(10, Decimal("-9.7026725400018637360844267648942153185775505998219")),
    )))

make_entry(ID("fb9942"),
    Formula(AsymptoticTo(DigammaFunctionZero(n), -n + (1/Pi)*Atan(Pi/Log(n)), n, Infinity)))

make_entry(ID("3f15eb"),
    Formula(Equal(DigammaFunction(DigammaFunctionZero(n)), 0)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("42c1f5"),
    Formula(Equal(DigammaFunction(-n), UnsignedInfinity)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("78c19c"),
    Formula(Equal(DigammaFunction(-n, m), UnsignedInfinity)),
    Variables(n, m),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(m, ZZGreaterEqual(0)))))

make_entry(ID("1cbe83"),
    Formula(Equal(DigammaFunction(Infinity, m), RealLimit(DigammaFunction(x), For(x, Infinity)),
        Cases(Tuple(Infinity, Equal(m, 0)), Tuple(0, Greater(m, 0))))),
    Variables(m),
    Assumptions(Element(m, ZZGreaterEqual(0))))

make_entry(ID("dce62c"),
    Formula(Equal(RightLimit(DigammaFunction(x), For(x, 0)), (-1)**(m+1) * Infinity)),
    Variables(m),
    Assumptions(Element(m, ZZGreaterEqual(0))))

make_entry(ID("ea2482"),
    Formula(Equal(DigammaFunction(1), -ConstGamma)))

make_entry(ID("ada157"),
    Formula(Equal(DigammaFunction(2), 1-ConstGamma)))

make_entry(ID("75f9bf"),
    Formula(Equal(DigammaFunction(3), Div(3,2)-ConstGamma)))

make_entry(ID("00c02a"),
    Formula(Equal(DigammaFunction(n), HarmonicNumber(n-1)-ConstGamma)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("89bed3"),
    Formula(Equal(DigammaFunction(Div(1,2)), -(2*Log(2))-ConstGamma)))

make_entry(ID("98f642"),
    Formula(Equal(DigammaFunction(Div(1,3)), -(Sqrt(3)*Pi/6) - ConstGamma - 3*Log(3)/2)))

make_entry(ID("45a969"),
    Formula(Equal(DigammaFunction(Div(2,3)), Sqrt(3)*Pi/6 - ConstGamma - 3*Log(3)/2)))

make_entry(ID("7ec4f0"),
    Formula(Equal(DigammaFunction(Div(1,4)), -(Pi/2) - ConstGamma - 3*Log(2))))

make_entry(ID("f93bae"),
    Formula(Equal(DigammaFunction(Div(3,4)), Pi/2 - ConstGamma - 3*Log(2))))

make_entry(ID("177de7"),
    Formula(Equal(DigammaFunction(Div(1,6)), -(Sqrt(3)*Pi/2) - ConstGamma - 2*Log(2) - 3*Log(3)/2)))

make_entry(ID("967bbb"),
    Formula(Equal(DigammaFunction(Div(5,6)), Sqrt(3)*Pi/2 - ConstGamma - 2*Log(2) - 3*Log(3)/2)))

make_entry(ID("8c368f"),
    Formula(Equal(DigammaFunction(Div(1,8)), -(Pi/2*(Sqrt(2)+1)) - ConstGamma - 4*Log(2) - (Log(2+Sqrt(2))-Log(2-Sqrt(2)))/Sqrt(2))))

make_entry(ID("3fe553"),
    Formula(Equal(DigammaFunction(Div(p,q)),
        -ConstGamma - Log(2*q) - Pi/2 * Cot(Pi * p / q) + 2 * Sum(Cos((2*Pi*k*p)/q) * Log(Sin(Pi*k/q)), For(k, 1, Floor((q-1)/2))))),
    Variables(p, q),
    Assumptions(And(Element(q, ZZGreaterEqual(2)), Element(p, Range(1, q-1)))))

make_entry(ID("babd3c"),
    Formula(Equal(DigammaFunction(1, 1), Pi**2 / 6)))

make_entry(ID("fa0292"),
    Formula(Equal(DigammaFunction(2, 1), Pi**2 / 6 - 1)))

make_entry(ID("4a30f1"),
    Formula(Equal(DigammaFunction(1, 2), -(2*RiemannZeta(3)))))

make_entry(ID("a62320"),
    Formula(Equal(DigammaFunction(1, m), (-1)**(m+1) * Factorial(m) * RiemannZeta(m+1))),
    Variables(m),
    Assumptions(Element(m, ZZGreaterEqual(1))))

make_entry(ID("90b26f"),
    Formula(Equal(DigammaFunction(n, m), (-1)**(m+1) * Factorial(m) * HurwitzZeta(m+1, n))),
    Variables(n, m),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(m, ZZGreaterEqual(1)))))

make_entry(ID("595f46"),
    Formula(Equal(DigammaFunction(Div(1,2), 1), Pi**2 / 2)))

make_entry(ID("5ce30b"),
    Formula(Equal(DigammaFunction(Div(1,2), m), (-1)**(m+1) * (2**(m+1)-1) * Factorial(m) * RiemannZeta(m+1))),
    Variables(m),
    Assumptions(Element(m, ZZGreaterEqual(1))))

make_entry(ID("807c7d"),
    Formula(Equal(DigammaFunction(Div(1,4), 1), Pi**2 + 8*ConstCatalan)))

make_entry(ID("d2f9fb"),
    Formula(Equal(DigammaFunction(Div(3,4), 1), Pi**2 - 8*ConstCatalan)))

make_entry(ID("03aca0"),
    Formula(Equal(DigammaFunction(Div(1,4), 2), -(2*Pi**3) - 56*RiemannZeta(3))))

make_entry(ID("e83059"),
    Formula(Equal(DigammaFunction(Div(3,4), 2), 2*Pi**3 - 56*RiemannZeta(3))))

make_entry(ID("b31fd2"),
    Formula(Equal(DigammaFunction(Div(1,2), 2), -(14*RiemannZeta(3)))))

make_entry(ID("2251c6"),
    Formula(Equal(DigammaFunction(Div(1,2), 3), Pi**4)))

make_entry(ID("bb88c8"),
    Formula(Equal(DigammaFunction(Div(1,6), 2), -(182*RiemannZeta(3)) - 4*Sqrt(3)*Pi**3)))

make_entry(ID("921d61"),
    Formula(Equal(DigammaFunction(Div(5,6), 2), -(182*RiemannZeta(3)) + 4*Sqrt(3)*Pi**3)))

make_entry(ID("03e2a6"),
    Formula(Equal(Im(DigammaFunction(ConstI*y)), (Pi/2) * Coth(Pi*y) + 1/(2*y))),
    Variables(y),
    Assumptions(And(Element(y, RR), NotEqual(y, 0))))

make_entry(ID("22a9cd"),
    Formula(Equal(Im(DigammaFunction(1+ConstI*y)), (Pi/2) * Coth(Pi*y) - 1/(2*y))),
    Variables(y),
    Assumptions(And(Element(y, RR), NotEqual(y, 0))))

make_entry(ID("6f3fec"),
    Formula(Equal(Im(DigammaFunction(Div(1,2)+ConstI*y)), (Pi/2) * Tanh(Pi*y))),
    Variables(y),
    Assumptions(And(Element(y, RR), NotEqual(y, 0))))

make_entry(ID("11dfd2"),
    Formula(Equal(DigammaFunction(z+1), DigammaFunction(z) + 1/z)),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("9f32fe"),
    Formula(Equal(DigammaFunction(z+n), DigammaFunction(z) + Sum(1/(z+k), For(k, 0, n-1)))),
    Variables(z, n),
    Assumptions(And(Element(z, CC), NotElement(z, ZZLessEqual(0)), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("554ac2"),
    Formula(Equal(DigammaFunction(z-n), DigammaFunction(z) - Sum(1/(z-k), For(k, 1, n)))),
    Variables(z, n),
    Assumptions(And(Element(z, CC), Element(n, ZZGreaterEqual(0)), NotElement(z-n, ZZLessEqual(0)))))

make_entry(ID("039051"),
    Formula(Equal(DigammaFunction(z+1, m), DigammaFunction(z, m) + ((-1)**m * Factorial(m))/z**(m+1))),
    Variables(m, z),
    Assumptions(And(Element(m, ZZGreaterEqual(0)), Element(z, CC), NotElement(z, ZZLessEqual(0)))))

make_entry(ID("34fafa"),
    Formula(Equal(DigammaFunction(z+n, m), DigammaFunction(z, m) + (-1)**m * Factorial(m) * Sum(1/(z+k)**(m+1), For(k, 0, n-1)))),
    Variables(m, z, n),
    Assumptions(And(Element(m, ZZGreaterEqual(0)), Element(z, CC), NotElement(z, ZZLessEqual(0)), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("c687d6"),
    Formula(Equal(DigammaFunction(z-n, m), DigammaFunction(z, m) - (-1)**m * Factorial(m) * Sum(1/(z-k)**(m+1), For(k, 1, n)))),
    Variables(m, z, n),
    Assumptions(And(Element(m, ZZGreaterEqual(0)), Element(z, CC), Element(n, ZZGreaterEqual(0)), NotElement(z-n, ZZLessEqual(0)))))

make_entry(ID("adf5e2"),
    Formula(Equal(DigammaFunction(1-z), DigammaFunction(z) + Pi*Cot(Pi*z))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, ZZ))))

make_entry(ID("361f61"),
    Formula(Equal(DigammaFunction(1-z, m), (-1)**m * (DigammaFunction(z, m) + Pi * ComplexDerivative(Cot(Pi*z), For(z, z, m))))),
    Variables(m, z),
    Assumptions(And(Element(m, ZZGreaterEqual(0)), Element(z, CC), NotElement(z, ZZ))))

make_entry(ID("eec21a"),
    Formula(Equal(DigammaFunction(n*z), Log(n) + Div(1,n) * Sum(DigammaFunction(z+k/n), For(k, 0, n-1)))),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(z, CC), NotElement(Mul(n, z), ZZLessEqual(0)))))

make_entry(ID("7b724b"),
    Formula(Equal(DigammaFunction(n*z, m), Div(1,n**(m+1)) * Sum(DigammaFunction(z+k/n, m), For(k, 0, n-1)))),
    Variables(m, n, z),
    Assumptions(And(Element(m, ZZGreaterEqual(1)), Element(n, ZZGreaterEqual(1)), Element(z, CC), NotElement(Mul(n, z), ZZLessEqual(0)))))

make_entry(ID("aa47cd"),
    Formula(Equal(DigammaFunction(Conjugate(z)), Conjugate(DigammaFunction(z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("5db5f2"),
    Formula(Equal(DigammaFunction(Conjugate(z), m), Conjugate(DigammaFunction(z, m)))),
    Variables(m, z),
    Assumptions(And(Element(m, ZZGreaterEqual(0)), Element(z, CC))))

make_entry(ID("62b81d"),
    Formula(Equal(DigammaFunction(z), Integral(Parentheses(Exp(-t)/t - Exp(-(z*t))/(1-Exp(-t))), For(t, 0, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0))))

make_entry(ID("e1e71f"),
    Formula(Equal(DigammaFunction(z), Integral(Parentheses(Exp(-t) - 1/(1+t)**z) * Div(1,t), For(t, 0, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0))))

make_entry(ID("a4cc3b"),
    Formula(Equal(DigammaFunction(z), -ConstGamma + Integral((1-t**(z-1))/(1-t), For(t, 0, 1)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0))))

make_entry(ID("f946a5"),
    Formula(Equal(DigammaFunction(z), -ConstGamma + Integral((Exp(-t)-Exp(-(z*t)))/(1-Exp(-t)), For(t, 0, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0))))

make_entry(ID("cfb999"),
    Formula(Equal(DigammaFunction(z), Log(z) + Integral(Exp(-(z*t)) * Parentheses(1/t - 1/(1-Exp(-t))), For(t, 0, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0))))

make_entry(ID("d9c818"),
    Formula(Equal(DigammaFunction(z), Log(z) - 1/(2*z) - 2*Integral(t/((t**2+z**2)*(Exp(2*Pi*t)-1)), For(t, 0, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0))))

make_entry(ID("4f5575"),
    Formula(Equal(DigammaFunction(z), Log(z) - 1/(2*z) - Integral(Exp(-(z*t))*Parentheses(Div(1,2) - 1/t + 1/(Exp(t)-1)), For(t, 0, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0))))

make_entry(ID("c89abc"),
    Formula(Equal(DigammaFunction(z, m), (-1)**(m+1) * Integral(((t**m * Exp(-(z*t))) / (1 - Exp(-t))), For(t, 0, Infinity)))),
    Variables(z, m),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0), Element(m, ZZGreaterEqual(1)))))

make_entry(ID("547fcd"),
    Formula(Equal(DigammaFunction(z, m), -Integral(t**(z-1) / (1-t) * Log(t)**m, For(t, 0, 1)))),
    Variables(z, m),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0), Element(m, ZZGreaterEqual(1)))))

make_entry(ID("4e3853"),
    Formula(Equal(Sum(DigammaFunction(n) * z**n, For(n, 1, Infinity)), (z * (ConstGamma + Log(1-z))) / (z - 1))),
    Variables(z),
    Assumptions(And(Element(z, CC), Less(Abs(z), 1))))

make_entry(ID("88e89f"),
    Formula(Equal(Sum(DigammaFunction(n) * (z**n / Factorial(n)), For(n, 1, Infinity)),
        z * ComplexDerivative(Hypergeometric1F1(a,2,z), For(a, 1)) - ConstGamma * (Exp(z) - 1))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("1e47db"),
    Formula(Equal(Sum(DigammaFunction(k), For(k, 1, n)), n * (DigammaFunction(n+1) - 1))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("458a97"),
    Formula(Equal(Sum(DigammaFunction(k/n) * Exp(2*Pi*r*k*ConstI/n), For(k, 1, n)), n*Log(1-Exp(2*Pi*r*ConstI/n)))),
    Variables(r, n),
    Assumptions(And(Element(n, ZZGreaterEqual(2)), Element(r, Range(1, n-1)))))

make_entry(ID("739819"),
    Formula(Equal(Sum(DigammaFunction(k/n) * Cos(2*Pi*r*k/n), For(k, 1, n)), n*Log(2*Sin(Pi*r/n)))),
    Variables(r, n),
    Assumptions(And(Element(n, ZZGreaterEqual(2)), Element(r, Range(1, n-1)))))

make_entry(ID("bb9eb6"),
    Formula(Equal(Sum(DigammaFunction(k/n) * Sin(2*Pi*r*k/n), For(k, 1, n)), Pi*(r-n/2))),
    Variables(r, n),
    Assumptions(And(Element(n, ZZGreaterEqual(2)), Element(r, Range(1, n-1)))))

make_entry(ID("1165fc"),
    Formula(Equal(Sum(1/DigammaFunctionZero(n)**2, For(n, 0, Infinity)), 
        ConstGamma**2 + Pi**2/2)))

make_entry(ID("39ce44"),
    Formula(Equal(Sum(1/DigammaFunctionZero(n)**3, For(n, 0, Infinity)), 
        -ConstGamma**3 - ConstGamma*Pi**2/2 - 4*RiemannZeta(3))))

make_entry(ID("a4f9c9"),
    Formula(Equal(Sum(1/DigammaFunctionZero(n)**4, For(n, 0, Infinity)), 
        ConstGamma**4 + Pi**4/9 + 2*ConstGamma**2*Pi**2/3 + 4*(ConstGamma*RiemannZeta(3)))))

make_entry(ID("6547da"),
    Formula(Equal(Sum(1/DigammaFunctionZero(n)**(r+1), For(n, 0, Infinity)), 
        Where(ComplexDerivative(f(z), For(z, 0, r)) / Factorial(r),
            Equal(f(z), ComplexLimit(Parentheses(DigammaFunction(t) - DigammaFunction(t,1)/DigammaFunction(t)), For(t, z)))))),
    Variables(r),
    Assumptions(Element(r, ZZGreaterEqual(1))),
    References("https://doi.org/10.1080%2F10652469.2017.1376193"))

make_entry(ID("4fdf65"),
    Formula(Implies(Element(x, OpenInterval(DigammaFunctionZero(0), Infinity)), Element(DigammaFunction(x), OpenInterval(0, Infinity)))),
    Variables(x),
    Assumptions(Element(x, RR)))

make_entry(ID("3c4f5f"),
    Formula(Implies(Element(x, OpenInterval(0, DigammaFunctionZero(0))), Element(DigammaFunction(x), OpenInterval(-Infinity, 0)))),
    Variables(x),
    Assumptions(Element(x, RR)))

make_entry(ID("d4bdf8"),
    Formula(Implies(Element(x, OpenInterval(-n, DigammaFunctionZero(n))), Element(DigammaFunction(x), OpenInterval(-Infinity, 0)))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(x, RR))))

make_entry(ID("c86ca1"),
    Formula(Implies(Element(x, OpenInterval(DigammaFunctionZero(n), -n+1)), Element(DigammaFunction(x), OpenInterval(0, Infinity)))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(x, RR))))

make_entry(ID("15d56a"),
    Formula(Implies(And(Element(x, OpenInterval(0, Infinity)), Element(m, ZZGreaterEqual(1))),
        Element(DigammaFunction(x, m), Cases(Tuple(OpenInterval(0, Infinity), Odd(m)), Tuple(OpenInterval(-Infinity, 0), Even(m)))))),
    Variables(x, m),
    Assumptions(And(Element(m, ZZGreaterEqual(1)), Element(x, RR))))

make_entry(ID("0e5d90"),
    Formula(Implies(And(Element(m, ZZGreaterEqual(1)), Odd(m), Element(x, SetMinus(RR, ZZLessEqual(0)))), Element(DigammaFunction(x, m), OpenInterval(0, Infinity)))),
    Variables(x, m),
    Assumptions(And(Element(m, ZZGreaterEqual(1)), Element(x, RR))))

make_entry(ID("24d810"),
    Formula(Less(DigammaFunction(x), Log(x))),
    Variables(x),
    Assumptions(Element(x, OpenInterval(0, Infinity))))

make_entry(ID("94a81f"),
    Formula(Less(DigammaFunction(x), Log(x) - 1/(2*x))),
    Variables(x),
    Assumptions(Element(x, OpenInterval(0, Infinity))))

make_entry(ID("e63fe8"),
    Formula(Greater(DigammaFunction(x), Log(x) - 1/x)),
    Variables(x),
    Assumptions(Element(x, OpenInterval(0, Infinity))))

make_entry(ID("8671a4"),
    Formula(Less((-1)**(m+1) * DigammaFunction(x, m), Factorial(m-1) / x**m + Factorial(m) / x**(m+1))),
    Variables(m, x),
    Assumptions(And(Element(m, ZZGreaterEqual(1)), Element(x, OpenInterval(0, Infinity)))))

make_entry(ID("5a3c4a"),
    Formula(Greater((-1)**(m+1) * DigammaFunction(x, m), Factorial(m-1) / x**m + Factorial(m) / (2 * x**(m+1)))),
    Variables(m, x),
    Assumptions(And(Element(m, ZZGreaterEqual(1)), Element(x, OpenInterval(0, Infinity)))))

make_entry(ID("6cabb7"),
    Formula(Greater(DigammaFunction(x + y), DigammaFunction(x))),
    Variables(x, y),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(y, OpenInterval(0, Infinity)))))

make_entry(ID("b16177"),
    Formula(Cases(
        Tuple(Greater(DigammaFunction(x + y, m), DigammaFunction(x)), Even(m)),
        Tuple(Less(DigammaFunction(x + y, m), DigammaFunction(x)), Odd(m)))),
    Variables(x, y, m),
    Assumptions(And(Element(m, ZZGreaterEqual(0)), Element(x, OpenInterval(0, Infinity)), Element(y, OpenInterval(0, Infinity)))))

make_entry(ID("7212ea"),
    Formula(Equal(Sum((-1)**n / (n+a), For(n, 0, Infinity)), Div(1,2) * (DigammaFunction((a+1)/2) - DigammaFunction(a/2)))),
    Variables(a),
    Assumptions(And(Element(a, CC), NotElement(a, ZZLessEqual(0)))))

make_entry(ID("f42042"),
    Formula(Equal(Sum(1 / (n+a)**r, For(n, 0, Infinity)), ((-1)**r / Factorial(r-1)) * DigammaFunction(a, r-1))),
    Variables(r, a),
    Assumptions(And(Element(r, ZZGreaterEqual(2)), Element(a, CC), NotElement(a, ZZLessEqual(0)))))

make_entry(ID("d02cf9"),
    Formula(Equal(Sum((-1)**n / (n+a)**r, For(n, 0, Infinity)), ((-1)**r / (2**r * Factorial(r-1))) * (DigammaFunction(a/2, r-1) - DigammaFunction((a+1)/2, r-1)))),
    Variables(r, a),
    Assumptions(And(Element(r, ZZGreaterEqual(2)), Element(a, CC), NotElement(a, ZZLessEqual(0)))))

make_entry(ID("21e21a"),
    Formula(Equal(Sum(1 / ((n+a)*(n+b)), For(n, 0, Infinity)),
        Cases(Tuple(1/(a-b) * (DigammaFunction(a) - DigammaFunction(b)), NotEqual(a, b)),
              Tuple(DigammaFunction(a, 1), Equal(a, b))))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC), NotElement(a, ZZLessEqual(0)), NotElement(b, ZZLessEqual(0)))))

make_entry(ID("b7f13b"),
    Formula(Equal(Sum((-1)**n / ((n+a)*(n+b)), For(n, 0, Infinity)),
        Cases(Tuple(1/(2*(a-b)) * (DigammaFunction(a/2) + DigammaFunction((b+1)/2) - DigammaFunction(b/2) - DigammaFunction((a+1)/2)), NotEqual(a, b)),
              Tuple(Div(1,4) * (DigammaFunction(a/2, 1) - DigammaFunction((a+1)/2, 1)), Equal(a, b))))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC), NotElement(a, ZZLessEqual(0)), NotElement(b, ZZLessEqual(0)))))

make_entry(ID("19e67f"),
    Formula(Equal(Sum(1 / (n+a), For(n, A, B)), DigammaFunction(a+B+1) - DigammaFunction(a+A))),
    Variables(a, A, B),
    Assumptions(And(Element(a, CC), Element(A, ZZ), Element(B, ZZ), LessEqual(A,B), NotElement(-a, Range(A,B)))))

def_Topic(
    Title("Dirichlet characters"),
    Section("Definitions"),
    Entries(
        "c7e2fb",
        "e810d8",
        "2f52bc",
    ),
    Section("Character evaluation"),
    Entries(
        "d9a187",
        "57d31a",
        "1c3957",
        "0851cf",
        "afd0c5",
        "bdf58d",
        "d29554",
        "458198",
    ),
    Section("Principal characters"),
    Entries(
        "d8c6d1",
    ),
    Section("Character group"),
    Entries(
        "47d430",
        "ed65c8",
        "62f7d5",
        "0ba38f",
        "f88596",
        "3b43b0",
    ),
    Section("Primitive decomposition"),
    Entries(
        "a7d592",
    ),
    Section("Conrey numbering"),
    Subsection("Multiplicativity"),
    Entries
    (
        "2a48bd",
    ),
    Subsection("Odd powers"),
    Entries(
        "166a87",
        "a9847a",
        "75231e",
        "540931",
        "4cf4e4",
    ),
    Subsection("Even powers"),
    Entries(
        "fc4f6a",
        "03fbe8",
    ),
    Section("Orthogonality"),
    Entries(
        "4877d1",
        "3ab92d",
        "a4e947",
        "f4de66",
    ),
    Section("Tables"),
    Subsection("Primitive and non-primitive characters"),
    Entries(
        "338b5c",
    ),
    Subsection("Character values"),
    Entries(
        "c40df4",
        "ef432d",
        "287d9b",
        "5dc1c0",
        "668877",
        "d8cac6",
        "ec0054",
        "fc267b",
        "0c7de4",
        "d8155f",
        "7a56c2",
        "5e1d3b",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "e6deb7",
        "5df909",
    ),
    Section("L-series"),
    SeeTopics("Dirichlet L-functions"),
    Entries(
        "604c7c",
    ),
)

make_entry(ID("e810d8"),
    SymbolDefinition(DirichletGroup, DirichletGroup(q), "Dirichlet characters with given modulus"),
    Description(SourceForm(DirichletGroup(q)), ", rendered as", DirichletGroup(q), ", represents the set of Dirichlet characters modulo", q, ", given", Element(q, ZZGreaterEqual(1)), "."),
    Description("Dirichlet characters can be defined axiomatically as functions from", ZZ, "to", CC,
        "satisfying the properties in formulas", EntryReference("1c3957"), ", ",
            EntryReference("0851cf"), ", and", EntryReference("afd0c5"), "."),
    Description("In this definition, the modulus", q, "is not an attribute of the character; for example",
        "the character giving the sequence", List(0, 1, 0, 1, Ellipsis), "is an element of both", DirichletGroup(2),
        "and", DirichletGroup(4), "."),
    Description("A more explicit construction of the characters is possible using the Conrey numbering scheme, which is implemented by", SourceForm(DirichletCharacter), "."))

make_entry(ID("2f52bc"),
    SymbolDefinition(PrimitiveDirichletCharacters, PrimitiveDirichletCharacters(q), "Primitive Dirichlet characters with given modulus"),
    Description(SourceForm(PrimitiveDirichletCharacters(q)), ", rendered as", PrimitiveDirichletCharacters(q),
        ", represents the set of primitive Dirichlet characters modulo", q, ", given", Element(q, ZZGreaterEqual(1)),
        ". Primitive characters are defined in ", EntryReference("ed65c8"), "."))

ellrange = Element(ell, Range(1, Max(q,2)-1))

make_entry(ID("c7e2fb"),
    SymbolDefinition(DirichletCharacter, DirichletCharacter(q,ell), "Dirichlet character"),
    Description(SourceForm(DirichletCharacter(q,ell)), ", rendered as",
        DirichletCharacter(q,ell), ", represents the Dirichlet character with Conrey label", Tuple(q, ell), "."),
    Description(
        "A character represents an object", chi, " that can be called (", chi(n), ") as a function from", ZZ, "to", CC, "."),
    Description(SourceForm(DirichletCharacter(q,ell,n)), ", rendered as",
        DirichletCharacter(q,ell,n), ", represents the Dirichlet character with Conrey label", Tuple(q, ell), "evaluated at the integer", n, "."),
    Description("The Conrey label consists of integers", Element(q, ZZGreaterEqual(1)), "and", Element(ell, Range(1, Max(q,2)-1)),
        "such that", Equal(GCD(ell,q), 1), ". ",
        "In this scheme", DirichletCharacter(q,1), "always represents the trivial/principal character (taking only values 0 and 1) modulo", q, ". ",
        "Non-principal characters are defined by", EntryReference("4cf4e4"), "when", q, "is an odd prime power, by",
            EntryReference("fc4f6a"), "and", EntryReference("03fbe8"), "when", q, "is an even prime power, and in general by factoring", q,
            "into prime powers using", EntryReference("2a48bd"), "."),
    References("http://www.lmfdb.org/Character/Labels"),
    )

make_entry(ID("47d430"),
    Formula(Equal(DirichletGroup(q), Set(DirichletCharacter(q,ell), For(ell), And(ellrange, Equal(GCD(ell,q), 1))))),
    Variables(q),
    Assumptions(Element(q, ZZGreaterEqual(1))))

make_entry(ID("ed65c8"),
    Formula(Equal(PrimitiveDirichletCharacters(q),
        Set(chi, For(chi), And(Element(chi, DirichletGroup(q)),
            Brackets(All(Exists(And(CongruentMod(a, 1, d), Equal(GCD(a,q), 1), NotEqual(chi(a), 1)), ForElement(a, Range(0, q-1))),
                ForElement(d, Range(1, q-1)), Divides(d, q))))))),
    Variables(q),
    Assumptions(Element(q, ZZGreaterEqual(1))),
    References("T. Apostol (1976), Introduction to Analytic Number Theory, Springer. Chapter 8.7."))

make_entry(ID("62f7d5"),
    Formula(Equal(Cardinality(DirichletGroup(q)), Totient(q))),
    Variables(q),
    Assumptions(Element(q, ZZGreaterEqual(1))))

make_entry(ID("0ba38f"),
    Formula(Equal(Cardinality(PrimitiveDirichletCharacters(q)), DivisorSum(Totient(d)*MoebiusMu(q/d), For(d, q)))),
    Variables(q),
    Assumptions(Element(q, ZZGreaterEqual(1))),
    References("http://oeis.org/A007431"))

make_entry(ID("f88596"),
    Formula(Equal(SequenceLimit(Sum(Cardinality(DirichletGroup(q)), For(q, 1, N)) / (Div(1,2) * N**2), For(N, Infinity)), 6/Pi**2)))

make_entry(ID("3b43b0"),
    Formula(Equal(SequenceLimit(Sum(Cardinality(PrimitiveDirichletCharacters(q)), For(q, 1, N)) / Sum(Cardinality(DirichletGroup(q)), For(q, 1, N)), For(N, Infinity)), 6/Pi**2)),
    References("H. Jager, On the number of Dirichlet characters with modulus not exceeding x, Indagationes Mathematicae, Volume 76, Issue 5, 1973, Pages 452-455, https://doi.org/10.1016/1385-7258(73)90069-3"))

make_entry(ID("d9a187"),
    Formula(Where(Equal(chi(n), DirichletCharacter(q,ell,n)), Equal(chi, DirichletCharacter(q,ell)))),
    Description("This is simply a syntactical definition of character evaluation."),
    Variables(q,ell,n),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), ellrange, Equal(GCD(ell,q), 1), Element(n, ZZ))))

make_entry(ID("57d31a"),
    Formula(Where(Element(chi(n), Union(Set(Exp(2*Pi*ConstI*k/r), ForElement(k, ZZ)), Set(0))), Equal(r, Totient(q)))),
    Variables(q,chi,n),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(n, ZZ))))

make_entry(ID("1c3957"),
    Formula(Equal(chi(n+q), chi(n))),
    Variables(q,chi,n),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(n, ZZ))))

make_entry(ID("0851cf"),
    Formula(Equal(chi(m*n), chi(m)*chi(n))),
    Variables(q,chi,m,n),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(m, ZZ), Element(n, ZZ))))

make_entry(ID("afd0c5"),
    Formula(Equivalent(Equal(chi(n), 0), NotEqual(GCD(n,q), 1))),
    Variables(q,chi,n),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(n, ZZ))))

make_entry(ID("bdf58d"),
    Formula(Equal(chi(1), 1)),
    Variables(q,chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)))))

make_entry(ID("d29554"),
    Formula(Element(chi(-1), Set(1, -1))),
    Variables(q,chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)))))

make_entry(ID("458198"),
    Formula(Equal(chi(0), Cases(Tuple(1, Equal(q, 1)), Tuple(0, NotEqual(q, 1))))),
    Variables(q,chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)))))

make_entry(ID("d8c6d1"),
    Formula(Equal(DirichletCharacter(q, 1, n), Cases(Tuple(1, Equal(GCD(n,q), 1)), Tuple(0, Otherwise)))),
    Variables(q,n),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(n, ZZ))))

make_entry(ID("a7d592"),
    Formula(Where(Exists(Equal(chi, Subscript(chi, 0) * Subscript(chi, 1)),
            For(Tuple(d, Subscript(chi, 0))),
                And(Element(d, Range(1, q)), Divides(d, q), Element(Subscript(chi, 0), PrimitiveDirichletCharacters(d)))),
            Equal(Subscript(chi, 1), DirichletCharacter(q, 1)))),
    Variables(q, Subscript(chi, 0)),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)))))

ell1 = Subscript(ell, 1)

ell2 = Subscript(ell, 2)

q1 = Subscript(q, 1)

q2 = Subscript(q, 2)

make_entry(ID("166a87"),
    SymbolDefinition(ConreyGenerator, ConreyGenerator(p), "Conrey generator"),
    Description("For an odd prime", p, ", the Conrey generator is defined as the smallest positive integer", ConreyGenerator(p),
        "that generates the multiplicative group of order", p**e, "for every", GreaterEqual(e, 1), "."))

make_entry(ID("75231e"),
    Formula(Equal(ConreyGenerator(p), Minimum(
        Set(a, For(a),
        And(Element(a, ZZGreaterEqual(1)),
            Equal(Cardinality(Set(Mod(a**k, p), For(k), Element(k, ZZGreaterEqual(0)))), p-1),
            Equal(Cardinality(Set(Mod(a**k, p**2), For(k), Element(k, ZZGreaterEqual(0)))), p*(p-1)))
        )))),
    Variables(p),
    Assumptions(And(Element(p, PP), GreaterEqual(p, 3))))

make_entry(ID("540931"),
    Formula(Where(Equal(ConreyGenerator(p), Cases(Tuple(10, Equal(p, 40487)), Tuple(7, Equal(p, 6692367337)),
            Tuple(Minimum(A), Otherwise))),
        Equal(A, Set(a, For(a),
        And(Element(a, ZZGreaterEqual(1)),
            Equal(Cardinality(Set(Mod(a**k, p), For(k), Element(k, ZZGreaterEqual(0)))), p-1))
        )))),
    Variables(p),
    Assumptions(And(Element(p, PP), GreaterEqual(p, 3), Less(p, Pow(10, 12)))))

make_entry(ID("a9847a"),
    SymbolDefinition(DiscreteLog, DiscreteLog(x, b, q), "Discrete logarithm"),
    Description(DiscreteLog(x, b, q), "represents the smallest positive integer", y, "such that", CongruentMod(Pow(b, y), x, q)))

make_entry(ID("2a48bd"),
    Formula(Equal(DirichletCharacter(q1 * q2, ell), DirichletCharacter(q1, Mod(ell, q1)) * DirichletCharacter(q2, Mod(ell, q2)))),
    Variables(q1,q2,ell),
    Assumptions(And(Element(q1, ZZGreaterEqual(1)), Element(q2, ZZGreaterEqual(1)),
        Element(ell, Range(1, Max(q1*q2, 2)-1)), Equal(GCD(ell,q1), GCD(ell,q2), GCD(q1,q2), 1))))

make_entry(ID("4cf4e4"),
    Formula(Where(Equal(DirichletCharacter(q, ell, n), Exp(2*Pi*ConstI*a*b/Totient(q))),
        Equal(q, p**e), Equal(g, ConreyGenerator(p)), Equal(a, DiscreteLog(ell, g, q)), Equal(b, DiscreteLog(n, g, q)))),
    Variables(p, e, ell, n),
    Assumptions(And(Element(p, PP), GreaterEqual(p, 3), Element(e, ZZGreaterEqual(1)),
        Element(ell, Range(1, p**e-1)), Element(n, ZZ), Equal(GCD(ell, p**e), GCD(n, p**e), 1))))

make_entry(ID("fc4f6a"),
    Formula(Equal(DirichletCharacter(4, 3, n), Cases(Tuple(1,CongruentMod(n,1,4)), Tuple(-1,CongruentMod(n,3,4)), Tuple(0, Otherwise)))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("03fbe8"),
    Formula(Where(Equal(DirichletCharacter(q, ell, n), Exp(2*Pi*ConstI*(((1-x)*(1-y)/8 + a*b/2**(e-2))))),
        Equal(q, 2**e), Equal(L(k),
            Cases(Tuple(
                Tuple(1, DiscreteLog(k, 5, q)), Element(k, Set(Mod(5**i, q), For(i), Element(i, ZZGreaterEqual(1))))),
                 Tuple(
                Tuple(-1, DiscreteLog(-k, 5, q)), Element(k, Set(Mod(-5**i, q), For(i), Element(i, ZZGreaterEqual(1))))))),
    Equal(Tuple(x, a), L(ell)), Equal(Tuple(y, b), L(n)))),
    Variables(e, ell, n),
    Assumptions(And(Element(e, ZZGreaterEqual(3)), Element(ell, Range(1, 2**e-1)), Element(n, ZZ), Equal(GCD(ell, 2), GCD(n, 2), 1))))

make_entry(ID("4877d1"),
    Formula(Equal(Sum(chi(n), For(n, 0, q-1)), Cases(Tuple(Totient(q), Equal(chi, DirichletCharacter(q, 1))), Tuple(0, Otherwise)))),
    Variables(q, chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)))))

make_entry(ID("3ab92d"),
    Formula(Equal(Sum(chi(n), ForElement(chi, DirichletGroup(q))), Cases(Tuple(Totient(q), CongruentMod(n, 1, q)), Tuple(0, Otherwise)))),
    Variables(q, n),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(n, ZZ))))

chi1 = Subscript(chi, 1)

chi2 = Subscript(chi, 2)

make_entry(ID("a4e947"),
    Formula(Equal(Sum(chi1(n)*Conjugate(chi2(n)), For(n, 0, q-1)), Cases(Tuple(Totient(q), Equal(chi1, chi2)), Tuple(0, Otherwise)))),
    Variables(q, chi1, chi2),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi1, DirichletGroup(q)), Element(chi2, DirichletGroup(q)))))

make_entry(ID("f4de66"),
    Formula(Equal(Sum(chi(m)*Conjugate(chi(n)), ForElement(chi, DirichletGroup(q))), Cases(Tuple(Totient(q), And(CongruentMod(n, m, q), Equal(GCD(m,q), 1))), Tuple(0, Otherwise)))),
    Variables(q, m, n),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(m, ZZ), Element(n, ZZ))))

make_entry(ID("338b5c"),
    Description("Table of", PrimitiveDirichletCharacters(q), "and", SetMinus(DirichletGroup(q), PrimitiveDirichletCharacters(q)), "for", LessEqual(1, q, 30)),
    Table(TableRelation(Tuple(q, Cardinality(DirichletGroup(q)), Cardinality(PrimitiveDirichletCharacters(q)), P, N), And(Equal(PrimitiveDirichletCharacters(q), Set(DirichletCharacter(q,ell), For(ell), Element(ell, P))),
            Equal(SetMinus(DirichletGroup(q), PrimitiveDirichletCharacters(q)), Set(DirichletCharacter(q,ell), For(ell), Element(ell, N))))),
        TableHeadings(q, Cardinality(DirichletGroup(q)), Cardinality(PrimitiveDirichletCharacters(q)),
            Description(ell, "such that", DirichletCharacter(q,ell), "is primitive"), Description(ell, "such that", DirichletCharacter(q,ell), "is non-primitive")),
        List(
    Tuple(1, 1, 1, Set(1), Set()),
    Tuple(2, 1, 0, Set(), Set(1)),
    Tuple(3, 2, 1, Set(2), Set(1)),
    Tuple(4, 2, 1, Set(3), Set(1)),
    Tuple(5, 4, 3, Set(2, 3, 4), Set(1)),
    Tuple(6, 2, 0, Set(), Set(1, 5)),
    Tuple(7, 6, 5, Set(2, 3, 4, 5, 6), Set(1)),
    Tuple(8, 4, 2, Set(3, 5), Set(1, 7)),
    Tuple(9, 6, 4, Set(2, 4, 5, 7), Set(1, 8)),
    Tuple(10, 4, 0, Set(), Set(1, 3, 7, 9)),
    Tuple(11, 10, 9, Set(2, 3, 4, 5, 6, 7, 8, 9, 10), Set(1)),
    Tuple(12, 4, 1, Set(11), Set(1, 5, 7)),
    Tuple(13, 12, 11, Set(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), Set(1)),
    Tuple(14, 6, 0, Set(), Set(1, 3, 5, 9, 11, 13)),
    Tuple(15, 8, 3, Set(2, 8, 14), Set(1, 4, 7, 11, 13)),
    Tuple(16, 8, 4, Set(3, 5, 11, 13), Set(1, 7, 9, 15)),
    Tuple(17, 16, 15, Set(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16), Set(1)),
    Tuple(18, 6, 0, Set(), Set(1, 5, 7, 11, 13, 17)),
    Tuple(19, 18, 17, Set(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18), Set(1)),
    Tuple(20, 8, 3, Set(3, 7, 19), Set(1, 9, 11, 13, 17)),
    Tuple(21, 12, 5, Set(2, 5, 11, 17, 20), Set(1, 4, 8, 10, 13, 16, 19)),
    Tuple(22, 10, 0, Set(), Set(1, 3, 5, 7, 9, 13, 15, 17, 19, 21)),
    Tuple(23, 22, 21, Set(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22), Set(1)),
    Tuple(24, 8, 2, Set(5, 11), Set(1, 7, 13, 17, 19, 23)),
    Tuple(25, 20, 16, Set(2, 3, 4, 6, 8, 9, 11, 12, 13, 14, 16, 17, 19, 21, 22, 23), Set(1, 7, 18, 24)),
    Tuple(26, 12, 0, Set(), Set(1, 3, 5, 7, 9, 11, 15, 17, 19, 21, 23, 25)),
    Tuple(27, 18, 12, Set(2, 4, 5, 7, 11, 13, 14, 16, 20, 22, 23, 25), Set(1, 8, 10, 17, 19, 26)),
    Tuple(28, 12, 5, Set(3, 11, 19, 23, 27), Set(1, 5, 9, 13, 15, 17, 25)),
    Tuple(29, 28, 27, Set(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28), Set(1)),
    Tuple(30, 8, 0, Set(), Set(1, 7, 11, 13, 17, 19, 23, 29)),
    )))

make_entry(ID("c40df4"),
    Description("Table of", DirichletCharacter(1, ell)),
    Table(TableRelation(Tuple(ell, n, y), Where(Equal(chi(n), y), Equal(chi, DirichletCharacter(1, ell)))),
        TableHeadings(Description(ell, "\\", n), 0),
        TableColumnHeadings(1),
        List(
        Tuple(1),
    )))

make_entry(ID("ef432d"),
    Description("Table of", DirichletCharacter(2, ell)),
    Table(TableRelation(Tuple(ell, n, y), Where(Equal(chi(n), y), Equal(chi, DirichletCharacter(2, ell)))),
        TableHeadings(Description(ell, "\\", n), 0, 1),
        TableColumnHeadings(1),
        List(
        Tuple(0, 1),
    )))

make_entry(ID("287d9b"),
    Description("Table of", DirichletCharacter(3, ell)),
    Table(TableRelation(Tuple(ell, n, y), Where(Equal(chi(n), y), Equal(chi, DirichletCharacter(3, ell)))),
        TableHeadings(Description(ell, "\\", n), 0, 1, 2),
        TableColumnHeadings(1, 2),
        List(
        Tuple(0, 1, 1),
        Tuple(0, 1, -1),
    )))

make_entry(ID("5dc1c0"),
    Description("Table of", DirichletCharacter(4, ell)),
    Table(TableRelation(Tuple(ell, n, y), Where(Equal(chi(n), y), Equal(chi, DirichletCharacter(4, ell)))),
        TableHeadings(Description(ell, "\\", n), 0, 1, 2, 3),
        TableColumnHeadings(1, 3),
        List(
        Tuple(0, 1, 0, 1),
        Tuple(0, 1, 0, -1),
    )))

make_entry(ID("668877"),
    Description("Table of", DirichletCharacter(5, ell)),
    Table(TableRelation(Tuple(ell, n, y), Where(Equal(chi(n), y), Equal(chi, DirichletCharacter(5, ell)))),
        TableHeadings(Description(ell, "\\", n), 0, 1, 2, 3, 4),
        TableColumnHeadings(1, 2, 3, 4),
        List(
        Tuple(0, 1, 1, 1, 1),
        Tuple(0, 1, ConstI, -ConstI, -1),
        Tuple(0, 1, -ConstI, ConstI, -1),
        Tuple(0, 1, -1, -1, 1),
    )))

make_entry(ID("d8cac6"),
    Description("Table of", DirichletCharacter(6, ell)),
    Table(TableRelation(Tuple(ell, n, y), Where(Equal(chi(n), y), Equal(chi, DirichletCharacter(6, ell)))),
        TableHeadings(Description(ell, "\\", n), 0, 1, 2, 3, 4, 5),
        TableColumnHeadings(1, 5),
        List(
        Tuple(0, 1, 0, 0, 0, 1),
        Tuple(0, 1, 0, 0, 0, -1),
    )))

make_entry(ID("ec0054"),
    Description("Table of", DirichletCharacter(7, ell)),
    Table(TableRelation(Tuple(ell, n, y), Where(Equal(chi(n), y), Equal(chi, DirichletCharacter(7, ell)))),
        TableHeadings(Description(ell, "\\", n), 0, 1, 2, 3, 4, 5, 6),
        TableColumnHeadings(1, 2, 3, 4, 5, 6),
        List(
        Tuple(0, 1, 1, 1, 1, 1, 1),
        Tuple(0, 1, -Exp(Pi*ConstI/3), Exp(2*Pi*ConstI/3), Exp(2*Pi*ConstI/3), -Exp(Pi*ConstI/3), 1),
        Tuple(0, 1, Exp(2*Pi*ConstI/3), Exp(Pi*ConstI/3), -Exp(Pi*ConstI/3), -Exp(2*Pi*ConstI/3), -1),
        Tuple(0, 1, Exp(2*Pi*ConstI/3), -Exp(Pi*ConstI/3), -Exp(Pi*ConstI/3), Exp(2*Pi*ConstI/3), 1),
        Tuple(0, 1, -Exp(Pi*ConstI/3), -Exp(2*Pi*ConstI/3), Exp(2*Pi*ConstI/3), Exp(Pi*ConstI/3), -1),
        Tuple(0, 1, 1, -1, 1, -1, -1),
    )))

make_entry(ID("fc267b"),
    Description("Table of", DirichletCharacter(8, ell)),
    Table(TableRelation(Tuple(ell, n, y), Where(Equal(chi(n), y), Equal(chi, DirichletCharacter(8, ell)))),
        TableHeadings(Description(ell, "\\", n), 0, 1, 2, 3, 4, 5, 6, 7),
        TableColumnHeadings(1, 3, 5, 7),
        List(
        Tuple(0, 1, 0, 1, 0, 1, 0, 1),
        Tuple(0, 1, 0, 1, 0, -1, 0, -1),
        Tuple(0, 1, 0, -1, 0, -1, 0, 1),
        Tuple(0, 1, 0, -1, 0, 1, 0, -1),
    )))

make_entry(ID("0c7de4"),
    Description("Table of", DirichletCharacter(9, ell)),
    Table(TableRelation(Tuple(ell, n, y), Where(Equal(chi(n), y), Equal(chi, DirichletCharacter(9, ell)))),
        TableHeadings(Description(ell, "\\", n), 0, 1, 2, 3, 4, 5, 6, 7, 8),
        TableColumnHeadings(1, 2, 4, 5, 7, 8),
        List(
        Tuple(0, 1, 1, 0, 1, 1, 0, 1, 1),
        Tuple(0, 1, Exp(Pi*ConstI/3), 0, Exp(2*Pi*ConstI/3), -Exp(2*Pi*ConstI/3), 0, -Exp(Pi*ConstI/3), -1),
        Tuple(0, 1, Exp(2*Pi*ConstI/3), 0, -Exp(Pi*ConstI/3), -Exp(Pi*ConstI/3), 0, Exp(2*Pi*ConstI/3), 1),
        Tuple(0, 1, -Exp(2*Pi*ConstI/3), 0, -Exp(Pi*ConstI/3), Exp(Pi*ConstI/3), 0, Exp(2*Pi*ConstI/3), -1),
        Tuple(0, 1, -Exp(Pi*ConstI/3), 0, Exp(2*Pi*ConstI/3), Exp(2*Pi*ConstI/3), 0, -Exp(Pi*ConstI/3), 1),
        Tuple(0, 1, -1, 0, 1, -1, 0, 1, -1),
    )))

make_entry(ID("d8155f"),
    Description("Table of", DirichletCharacter(10, ell)),
    Table(TableRelation(Tuple(ell, n, y), Where(Equal(chi(n), y), Equal(chi, DirichletCharacter(10, ell)))),
        TableHeadings(Description(ell, "\\", n), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9),
        TableColumnHeadings(1, 3, 7, 9),
        List(
        Tuple(0, 1, 0, 1, 0, 0, 0, 1, 0, 1),
        Tuple(0, 1, 0, ConstI, 0, 0, 0, -ConstI, 0, -1),
        Tuple(0, 1, 0, -ConstI, 0, 0, 0, ConstI, 0, -1),
        Tuple(0, 1, 0, -1, 0, 0, 0, -1, 0, 1),
    )))

make_entry(ID("7a56c2"),
    Description("Table of", DirichletCharacter(11, ell)),
    Table(TableRelation(Tuple(ell, n, y), Where(Equal(chi(n), y), Equal(chi, DirichletCharacter(11, ell)))),
        TableHeadings(Description(ell, "\\", n), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
        TableColumnHeadings(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
        List(
    Tuple(0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
    Tuple(0, 1, Exp(Pi*ConstI/5), -Exp(3*Pi*ConstI/5), Exp(2*Pi*ConstI/5), Exp(4*Pi*ConstI/5), -Exp(4*Pi*ConstI/5), -Exp(2*Pi*ConstI/5), Exp(3*Pi*ConstI/5), -Exp(Pi*ConstI/5), -1),
    Tuple(0, 1, -Exp(3*Pi*ConstI/5), Exp(4*Pi*ConstI/5), -Exp(Pi*ConstI/5), Exp(2*Pi*ConstI/5), Exp(2*Pi*ConstI/5), -Exp(Pi*ConstI/5), Exp(4*Pi*ConstI/5), -Exp(3*Pi*ConstI/5), 1),
    Tuple(0, 1, Exp(2*Pi*ConstI/5), -Exp(Pi*ConstI/5), Exp(4*Pi*ConstI/5), -Exp(3*Pi*ConstI/5), -Exp(3*Pi*ConstI/5), Exp(4*Pi*ConstI/5), -Exp(Pi*ConstI/5), Exp(2*Pi*ConstI/5), 1),
    Tuple(0, 1, Exp(4*Pi*ConstI/5), Exp(2*Pi*ConstI/5), -Exp(3*Pi*ConstI/5), -Exp(Pi*ConstI/5), -Exp(Pi*ConstI/5), -Exp(3*Pi*ConstI/5), Exp(2*Pi*ConstI/5), Exp(4*Pi*ConstI/5), 1),
    Tuple(0, 1, -Exp(4*Pi*ConstI/5), Exp(2*Pi*ConstI/5), -Exp(3*Pi*ConstI/5), -Exp(Pi*ConstI/5), Exp(Pi*ConstI/5), Exp(3*Pi*ConstI/5), -Exp(2*Pi*ConstI/5), Exp(4*Pi*ConstI/5), -1),
    Tuple(0, 1, -Exp(2*Pi*ConstI/5), -Exp(Pi*ConstI/5), Exp(4*Pi*ConstI/5), -Exp(3*Pi*ConstI/5), Exp(3*Pi*ConstI/5), -Exp(4*Pi*ConstI/5), Exp(Pi*ConstI/5), Exp(2*Pi*ConstI/5), -1),
    Tuple(0, 1, Exp(3*Pi*ConstI/5), Exp(4*Pi*ConstI/5), -Exp(Pi*ConstI/5), Exp(2*Pi*ConstI/5), -Exp(2*Pi*ConstI/5), Exp(Pi*ConstI/5), -Exp(4*Pi*ConstI/5), -Exp(3*Pi*ConstI/5), -1),
    Tuple(0, 1, -Exp(Pi*ConstI/5), -Exp(3*Pi*ConstI/5), Exp(2*Pi*ConstI/5), Exp(4*Pi*ConstI/5), Exp(4*Pi*ConstI/5), Exp(2*Pi*ConstI/5), -Exp(3*Pi*ConstI/5), -Exp(Pi*ConstI/5), 1),
    Tuple(0, 1, -1, 1, 1, 1, -1, -1, -1, 1, -1),
    )))

make_entry(ID("5e1d3b"),
    Description("Table of", DirichletCharacter(12, ell)),
    Table(TableRelation(Tuple(ell, n, y), Where(Equal(chi(n), y), Equal(chi, DirichletCharacter(12, ell)))),
        TableHeadings(Description(ell, "\\", n), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11),
        TableColumnHeadings(1, 5, 7, 11),
        List(
    Tuple(0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1),
    Tuple(0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, -1),
    Tuple(0, 1, 0, 0, 0, 1, 0, -1, 0, 0, 0, -1),
    Tuple(0, 1, 0, 0, 0, -1, 0, -1, 0, 0, 0, 1),
    )))

make_entry(ID("e6deb7"),
    Formula(LessEqual(Abs(Sum(chi(n), For(n, 0, N))), Totient(q))),
    Variables(N, chi, q),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(N, ZZ), Element(chi, DirichletGroup(q)), NotEqual(chi, DirichletCharacter(q, 1)))))

make_entry(ID("5df909"),
    Formula(LessEqual(Abs(Sum(chi(n), For(n, M, N))), Sqrt(q)*Log(q)/(2*Log(2)) + 3*Sqrt(q))),
    Variables(q, chi, M, N),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(M, ZZ), Element(N, ZZ), Element(chi, DirichletGroup(q)), NotEqual(chi, DirichletCharacter(q, 1)))),
    Description("Pólya-Vinogradov inequality, explicit form"),
    References("E. Dobrowolski and K. S. Williams, An upper bound for the sum ... for a certain class of functions f, Proceedings of the American Mathematical Society, Vol. 114, No. 1 (Jan., 1992), pp. 29-35, http://doi.org/10.2307/2159779"))

def_Topic(
    Title("Dirichlet L-functions"),
    Section("Definitions"),
    Entries(
        "d5a598",
    ),
    Section("L-series"),
    Entries(
        "604c7c",
        "291569",
    ),
    Section("Euler product"),
    Entries(
        "d088ea",
        "0f96c3",
    ),
    Section("Hurwitz zeta representation"),
    Entries(
        "04217b",
        "c31c10",
        "4c3678",
    ),
    Section("Principal and non-primitive characters"),
    Entries(
        "a9337b",
        "ff8254",
        "629f70",
        "1bd945",
    ),
    Section("Value at 1"),
    Description("Related topic: ", TopicReference("Stieltjes constants")),
    Entries(
        "6c3fff",
        "3d5327",
        "5c4552",
        "23256b",
        "c2750a",
        "d83109",
        "3b8c97",
        "c9d117",
    ),
    Section("Value at 0"),
    Entries(
        "a07d28",
        "789ca4",
        "fad52f",
    ),
    Section("Values at negative integers"),
    Entries(
        "cb5d51",
        "e44796",
        "3e0817",
        "f7a866",
        "d69b41",
        "f5c3c5",
    ),
    Section("Zeros"),
    Subsection("Nontrivial zeros"),
    Entries(
        "3f96c1",
        "dc593e",
        "e2a734",
        "982e3b",
        "2a34c3",
        "214a91",
    ),
    Subsection("Trivial zeros"),
    Entries(
        "bc755b",
        "9ba78a",
    ),
    Section("Conjugate symmetry"),
    Entries(
        "7c86d5",
        "50adea",
        "97fe89",
    ),
    Section("Functional equation"),
    Entries(
        "cc6a5a",
        "b788a1",
        "11a763",
        "62f12c",
        "b78a50",
        "288207",
    ),
    Section("Analytic properties"),
    Entries(
        "8533f5",
        "97f631",
        "ea8c55",
        "fe4692",
    ),
    Section("Approximations"),
    Entries(
        "312147",
        "4911bd",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "8ff1ff",
        "9b3fde",
    ),
    Section("Related topics"),
    SeeTopics("Dirichlet characters", "Riemann zeta function", "Bernoulli numbers and polynomials"),
)

make_entry(ID("d5a598"),
    SymbolDefinition(DirichletL, DirichletL(s, chi), "Dirichlet L-function"))

make_entry(ID("604c7c"),
    Formula(Equal(DirichletL(s, chi), Sum(chi(n)/n**s, For(n, 1, Infinity)))),
    Variables(q, chi, s),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(s, CC), Greater(Re(s), 1))))

make_entry(ID("291569"),
    Formula(Equal(1/DirichletL(s, chi), Sum((MoebiusMu(n) * chi(n))/n**s, For(n, 1, Infinity)))),
    Variables(q, chi, s),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(s, CC), Greater(Re(s), 1))))

make_entry(ID("d088ea"),
    Formula(Equal(DirichletL(s, chi), PrimeProduct(1/(1-chi(p)*p**(-s)), For(p)))),
    Variables(q, chi, s),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(s, CC), Greater(Re(s), 1))))

make_entry(ID("0f96c3"),
    Formula(Equal(1/DirichletL(s, chi), PrimeProduct(Parentheses(1-chi(p)/p**s), For(p)))),
    Variables(q, chi, s),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(s, CC), Greater(Re(s), 1))))

make_entry(ID("c31c10"),
    Formula(Equal(DirichletL(s, chi), (1/q**s) * Sum(chi(k) * HurwitzZeta(s, k/q), For(k, 1, q)))),
    Variables(q, chi, s),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(s, SetMinus(CC, Set(1))))))

make_entry(ID("4c3678"),
    Formula(Equal(HurwitzZeta(s, k/q), (q**s / Totient(q)) * Sum(Conjugate(chi(k)) * DirichletL(s, chi), ForElement(chi, DirichletGroup(q))))),
    Variables(q, k, s),
    Assumptions(And(Element(q, ZZGreaterEqual(2)), Element(k, Range(1,q-1)), Equal(GCD(k,q), 1), Element(s, SetMinus(CC, Set(1))))))

make_entry(ID("a9337b"),
    Formula(Equal(DirichletL(s, DirichletCharacter(1, 1)), RiemannZeta(s))),
    Variables(s),
    Assumptions(Element(s, CC)))

make_entry(ID("ff8254"),
    Formula(Equal(DirichletL(s, DirichletCharacter(2**n, 1)), (1-Pow(2,-s)) * RiemannZeta(s))),
    Variables(n, s),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(s, CC))))

make_entry(ID("629f70"),
    Formula(Equal(DirichletL(s, DirichletCharacter(q, 1)), RiemannZeta(s) * PrimeProduct(Parentheses(1 - 1/p**s), For(p), Divides(p, q)))),
    Variables(q, s),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(s, CC))))

make_entry(ID("1bd945"),
    Formula(Where(Equal(DirichletL(s,chi), DirichletL(s, Subscript(chi,0)) * PrimeProduct(Parentheses(1-Call(Subscript(chi,0), p)/p**s), For(p), Divides(p, q))),
        Equal(Subscript(chi, 1), DirichletCharacter(q, 1)), Equal(chi, Subscript(chi, 0) * Subscript(chi, 1)))),
    Variables(q, d, Subscript(chi, 0), s),
    Assumptions(And(
        Element(q, ZZGreaterEqual(1)),
        Element(d, Range(1,q)),
        Divides(d, q),
        Element(Subscript(chi, 0), PrimitiveDirichletCharacters(d)),
        Element(s, CC))),
    Description("This allows an L-function of a non-primitive character to be expressed in terms of an L-function of a primitive character."))

make_entry(ID("6c3fff"),
    Formula(Equal(DirichletL(1, chi), Cases(Tuple(UnsignedInfinity, Equal(chi, DirichletCharacter(q, 1))), Tuple(ComplexLimit(DirichletL(s, chi), For(s, 1)), Otherwise)))),
    Variables(q, chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)))))

make_entry(ID("3d5327"),
    Formula(NotEqual(DirichletL(1, chi), 0)),
    Variables(q, chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)))))

make_entry(ID("5c4552"),
    Formula(NotElement(DirichletL(1,chi), AlgebraicNumbers)),
    Variables(q, chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)))),
    References("https://doi.org/10.4153/CJM-2010-078-9"))

make_entry(ID("23256b"),
    Formula(Equal(ComplexLimit((s-1)*DirichletL(1, DirichletCharacter(q, 1)), For(s, 1)), Totient(q)/q)),
    Variables(q),
    Assumptions(Element(q, ZZGreaterEqual(1))))

make_entry(ID("c2750a"),
    Formula(Equal(DirichletL(1,chi), -((1/q) * Sum(chi(k) * DigammaFunction(k/q), For(k, 1, q-1))))),
    Variables(q, chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), NotEqual(chi, DirichletCharacter(q, 1)))))

make_entry(ID("d83109"),
    Formula(Equal(DirichletL(1,DirichletCharacter(3,2)), Pi/Sqrt(27))))

make_entry(ID("3b8c97"),
    Formula(Equal(DirichletL(1,DirichletCharacter(4,3)), Pi/4)))

make_entry(ID("c9d117"),
    Formula(Equal(DirichletL(1,DirichletCharacter(5,4)), 2*Log(GoldenRatio)/Sqrt(5))))

make_entry(ID("a07d28"),
    Formula(Equal(DirichletL(0,DirichletCharacter(q,1)), Cases(Tuple(-Div(1,2), Equal(q, 1)), Tuple(0, Otherwise)))),
    Variables(q),
    Assumptions(And(Element(q, ZZGreaterEqual(1)))))

make_entry(ID("789ca4"),
    Formula(Equal(DirichletL(0,chi), -Div(1,q) * Sum(k * chi(k), For(k, 1, q)))),
    Variables(chi, q),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), NotEqual(chi, DirichletCharacter(q, 1)))))

make_entry(ID("fad52f"),
    Formula(Implies(Equal(chi(-1), 1), Equal(DirichletL(0,chi), 0))),
    Variables(chi, q),
    Assumptions(And(Element(q, ZZGreaterEqual(2)), Element(chi, DirichletGroup(q)))))

make_entry(ID("cb5d51"),
    SymbolDefinition(GeneralizedBernoulliB, GeneralizedBernoulliB(n, chi), "Generalized Bernoulli number"))

make_entry(ID("e44796"),
    Formula(Equal(GeneralizedBernoulliB(n, chi), Sum(chi(a) * Sum(Binomial(n,k) * BernoulliB(k) * a**(n-k) * q**(k-1), For(k, 0, n)), For(a, 1, q)))),
    Variables(q, chi, n),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("3e0817"),
    Formula(Equal(GeneralizedBernoulliB(n, chi), q**(n-1) * Sum(chi(a) * BernoulliPolynomial(n, a/q), For(a, 1, q)))),
    Variables(q, chi, n),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("f7a866"),
    Formula(Equal(GeneralizedBernoulliB(0, chi), Cases(Tuple(Totient(q)/q, Equal(chi, DirichletCharacter(q, 1))), Tuple(0, Otherwise)))),
    Variables(q, chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)))))

make_entry(ID("d69b41"),
    Formula(Equal(Sum(chi(a)* (z*Exp(a*z)/(Exp(q*z)-1)), For(a, 1, q)),
        Sum(GeneralizedBernoulliB(n, chi) * (z**n / Factorial(n)), For(n, 0, Infinity)))),
    Variables(q, chi, z),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(z, CC), NotEqual(z, 0), Less(Abs(z), 2*Pi / q))))

make_entry(ID("f5c3c5"),
    Formula(Equal(DirichletL(-n, chi), -(GeneralizedBernoulliB(n+1,chi)/(n+1)))),
    Variables(q, chi, n),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("3f96c1"),
    SymbolDefinition(DirichletLZero, DirichletLZero(n,chi), "Nontrivial zero of Dirichlet L-function"),
    Description("Generalizing", SourceForm(RiemannZetaZero), ", this gives an enumeration of the nontrivial zeros of a given Dirichlet L-function, where eventual repeated zeros are counted separately.",
        "The index", n, "is a nonzero integer such that", Greater(n, 0), "gives zeros with", Greater(Im(DirichletLZero(n,chi)), 0),
        ", ordered by increasing imaginary part, while", Less(n, 0), "gives zeros with", LessEqual(Im(DirichletLZero(n,chi)), 0),
        ", ordered by decreasing imaginary part."))

make_entry(ID("dc593e"),
    SymbolDefinition(GeneralizedRiemannHypothesis, GeneralizedRiemannHypothesis, "Generalized Riemann hypothesis"),
    Description("Represents the truth value of the generalized Riemann hypothesis for Dirichlet L-functions, defined in ", EntryReference("e2a734"), "."),
    Description("Semantically, ", Element(GeneralizedRiemannHypothesis, Set(True_, False_)), "."),
    Description("This symbol can be used in an assumption to express that a formula is valid conditionally on the truth of the generalized Riemann hypothesis."))

make_entry(ID("e2a734"),
    Formula(Equivalent(GeneralizedRiemannHypothesis, All(Equal(Re(DirichletLZero(n,chi)), Div(1,2)),
        For(Tuple(q, chi, n)),
            And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(n, SetMinus(ZZ, Set(0))))))))

make_entry(ID("982e3b"),
    Formula(Less(0, Re(DirichletLZero(n,chi)), 1)),
    Variables(q,n,chi),
    Assumptions(And(Element(q,ZZGreaterEqual(1)), Element(chi, PrimitiveDirichletCharacters(q)),
        Element(n, ZZ), NotEqual(n, 0))))

make_entry(ID("214a91"),
    Formula(Equal(Re(DirichletLZero(n,chi)), Div(1,2))),
    Variables(q,n,chi),
    Assumptions(And(Element(q,ZZGreaterEqual(1)), Element(chi, PrimitiveDirichletCharacters(q)),
        Element(n, ZZ), NotEqual(n, 0), Or(And(Less(q, 400000), Less(Abs(Im(DirichletLZero(n,chi))), Pow(10,8)/q)), GeneralizedRiemannHypothesis))),
    References("D. J. Platt (2013), Numerical computations concerning the GRH. https://arxiv.org/pdf/1305.3087.pdf"))

make_entry(ID("9ba78a"),
    Formula(Equal(Zeros(DirichletL(s, chi), ForElement(s, CC), LessEqual(Re(s), 0)),
        Cases(Tuple(Set(-(2*n), ForElement(n, ZZGreaterEqual(1))), Equal(q, 1)),
              Tuple(Set(-(2*n), ForElement(n, ZZGreaterEqual(0))), And(Equal(chi(-1), 1), NotEqual(q, 1))),
              Tuple(Set(-(2*n)-1, ForElement(n, ZZGreaterEqual(0))), Equal(chi(-1), -1))))),
    Variables(q, chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, PrimitiveDirichletCharacters(q)))))

make_entry(ID("bc755b"),
    Formula(Equal(Zeros(DirichletL(s, chi), ForElement(s, CC)),
        Union(Parentheses(Zeros(DirichletL(s, chi), For(s), And(Element(s, CC), LessEqual(Re(s), 0)))),
            Set(DirichletLZero(n, chi), For(n), Element(n, SetMinus(ZZ, Set(0))))))),
    Variables(q, chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)))))

make_entry(ID("2a34c3"),
    Formula(Equal(Zeros(DirichletL(s, chi), For(s), And(Element(s, CC), Less(0, Re(s), 1))),
        Set(DirichletLZero(n, chi), For(n), Element(n, SetMinus(ZZ, Set(0)))))),
    Variables(q, chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)))))

make_entry(ID("7c86d5"),
    Formula(Equal(DirichletL(s, Conjugate(chi)), Conjugate(DirichletL(Conjugate(s), chi)))),
    Variables(s, q, chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(s, CC))))

make_entry(ID("50adea"),
    Formula(Equal(DirichletL(Conjugate(s), chi), Conjugate(DirichletL(s, Conjugate(chi))))),
    Variables(s, CC),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(s, CC))))

make_entry(ID("97fe89"),
    Formula(Equal(DirichletL(Conjugate(s), Conjugate(chi)), Conjugate(DirichletL(s, chi)))),
    Variables(s, CC),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(s, CC))))

make_entry(ID("cc6a5a"),
    SymbolDefinition(DirichletLambda, DirichletLambda(s, chi), "Completed Dirichlet L-function"),
    Description("The completed Dirichlet L-function is an entire function of", s, ".",
        "It is defined by", EntryReference("b788a1"), "and taking the limiting value at the exceptional points", s,
        "where a pole appears in one of the constituent factors."),
    Description("In the literature, this function is sometimes multiplied by a different constant factor (depending on", chi, "but constant with respect to", s, ")."))

make_entry(ID("b788a1"),
    Formula(Equal(DirichletLambda(s, chi), Where(beta * (q / Pi)**((s+a)/2) * Gamma((s+a)/2) * DirichletL(s,chi),
        Equal(a, (1 - chi(-1))/2), Equal(beta, Cases(Tuple(s*(s-1), Equal(q, 1)), Tuple(1, Otherwise)))))),
    Variables(q, chi, s),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, PrimitiveDirichletCharacters(q)), Element(s, CC),
        NotElement(s, Cases(Tuple(Set(-(2*n), For(n), Element(n, ZZGreaterEqual(0))), Equal(chi(-1), 1)),
                            Tuple(Set(-(2*n)-1, For(n), Element(n, ZZGreaterEqual(0))), Equal(chi(-1), -1)))),
        Not(And(Equal(q,1), Equal(s,1))))))

make_entry(ID("11a763"),
    SymbolDefinition(GaussSum, GaussSum(q, chi), "Gauss sum"))

make_entry(ID("62f12c"),
    Formula(Equal(GaussSum(q, chi), Sum(chi(n) * Exp(2*Pi*ConstI*n/q), For(n, 1, q)))),
    Variables(q, chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)))))

make_entry(ID("b78a50"),
    Formula(Equal(Abs(GaussSum(q, chi)), Sqrt(q))),
    Variables(q, chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, PrimitiveDirichletCharacters(q)))))

make_entry(ID("288207"),
    Formula(Equal(DirichletLambda(s, chi), Where(epsilon * DirichletLambda(1-s, Conjugate(chi)), Equal(a, (1-chi(-1))/2), Equal(epsilon, GaussSum(q, chi) / (ConstI**a * Sqrt(q)))))),
    Variables(q, chi, s),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, PrimitiveDirichletCharacters(q)), Element(s, CC))))

make_entry(ID("8533f5"),
    Formula(Equal(BranchCuts(DirichletL(s,chi), s, Union(CC, Set(UnsignedInfinity))), Set())),
    Variables(q, chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)))))

make_entry(ID("97f631"),
    Formula(Equal(EssentialSingularities(DirichletL(s,chi), s, Union(CC, Set(UnsignedInfinity))), Set(UnsignedInfinity))),
    Variables(q, chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)))))

make_entry(ID("ea8c55"),
    Formula(Equal(Poles(DirichletL(s,chi), ForElement(s, Union(CC, Set(UnsignedInfinity)))), Cases(Tuple(Set(1), Equal(chi, DirichletCharacter(q, 1))), Tuple(Set(), Otherwise)))),
    Variables(q, chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)))))

make_entry(ID("fe4692"),
    Formula(IsHolomorphic(DirichletL(s,chi), ForElement(s, Cases(Tuple(SetMinus(CC, Set(1)), Equal(chi, DirichletCharacter(q, 1))), Tuple(CC, Otherwise))))),
    Variables(q, chi),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)))))

make_entry(ID("312147"),
    Formula(LessEqual(Abs(DirichletL(s,chi) - Sum(chi(k) / k**s, For(k, 1, N-1))), HurwitzZeta(Re(s), N))),
    Variables(q, chi, s, N),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(s, CC), Greater(Re(s), 1), Element(N, ZZGreaterEqual(1)))))

make_entry(ID("4911bd"),
    Formula(LessEqual(Abs(1/DirichletL(s,chi) - PrimeProduct(Parentheses(1-chi(p) / p**s), For(p), Less(p, N))), HurwitzZeta(Re(s), N))),
    Variables(q, chi, s, N),
    Assumptions(And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)), Element(s, CC), Greater(Re(s), 1), Element(N, ZZGreaterEqual(1)))))

make_entry(ID("8ff1ff"),
    Formula(LessEqual(Abs(DirichletL(s, chi)), RiemannZeta(Re(s)))),
    Variables(q, chi, s),
    Assumptions(
        And(Element(q, ZZGreaterEqual(1)), Element(chi, DirichletGroup(q)),
            Element(s, CC), Greater(Re(s), 1))))

make_entry(ID("9b3fde"),
    Formula(LessEqual(Abs(DirichletL(s,chi)), (q*Abs(1+s)/(2*Pi))**((1+eta-Re(s))/2) * RiemannZeta(1+eta))),
    Variables(q, chi, s, eta),
    Assumptions(
        And(Element(q, ZZGreaterEqual(2)), Element(chi, PrimitiveDirichletCharacters(q)),
            Element(s, CC), Element(eta, OpenClosedInterval(0, Div(1,2))), LessEqual(-eta, Re(s), 1 + eta))),
    References("H. Rademacher, On the Phragmén-Lindelöf theorem and some applications, Mathematische Zeitschrift, December 1959, Volume 72, Issue 1, pp 192-204. Theorem 3. https://doi.org/10.1007/BF01162949"))

def_Topic(
    Title("Illustrations of Eisenstein series"),
    SeeTopics("Eisenstein series"),
    Section("X-ray plots"),
    Entries(
        "7e1850",
        "dac0bb",
        "54951a",
        "356d7a",
        "626026",
        "a14cfc",
    ),
)

def_Topic(
    Title("Eisenstein series"),
    Section("Definitions"),
    Entries(
        "9bb960",
        "df3334",
    ),
    Section("Illustrations"),
    SeeTopics("Illustrations of Eisenstein series"),
    Entries(
        "54951a",
    ),
    Section("Normalization"),
    Entries(
        "0a2120",
    ),
    Section("Lattice series"),
    Entries(
        "2246a7",
        "c1ffd4",
        "b07750",
    ),
    Section("Modular transformations"),
    Entries(
        "0b5b04",
        "8ffe07",
        "23a5e0",
        "d56eb6",
    ),
    Subsection("Quasi-modular transformations for weight 2"),
    Entries(
        "5161ab",
        "7f4c85",
    ),
    Subsection("Weight 2 quasi-holomorphic modular form"),
    Entries(
        "b1a5e4",
    ),
    Section("Fourier series (q-series)"),
    Subsection("First cases"),
    Entries(
        "10cdf4",
        "f8dfaf",
        "e20db0",
    ),
    Subsection("General case"),
    Entries(
        "7c00e6",
        "848d97",
        "15b347",
    ),
    Section("Trigonometric series"),
    Entries(
        "18a4d1",
        "7b62e4",
        "a92c1a",
        "171724",
    ),
    Section("Theta function representations"),
    Entries(
        "cc579c",
        "10f3b2",
        "6d2880",
        "a0dff6",
        "bd7d8e",
    ),
    Section("Dedekind eta function representations"),
    Entries(
        "dbf388",
        "03ad5a",
        "4da2cd",
        "0a5ef4",
    ),
    Section("Elliptic function representations"),
    Entries(
        "b52b6f",
        "3bf702",
    ),
    Section("Products and recurrence relations"),
    Entries(
        "044128",
        "adaf5a",
        "e60fd4",
        "9e1f83",
        "feb95e",
        "36fff2",
        "5540a1",
    ),
    Section("Generating functions"),
    Entries(
        "9bf0ad",
        "3e84e3",
    ),
    Section("Derivatives"),
    Entries(
        "7cda09",
        "af2ea9",
        "3bfced",
    ),
    Section("Specific values"),
    Subsection("Fourth root of unity"),
    Entries(
        "570399",
        "a691b3",
        "e03b7c",
        "53fcdd",
        "a4109c",
    ),
    Subsection("Third root of unity"),
    Entries(
        "9ea739",
        "30a054",
        "3102a7",
        "0fda1b",
        "6c71c0",
    ),
    Subsection("Infinity"),
    Entries(
        "c6be24",
        "ad9ba2",
    ),
    Section("Zeros"),
    Subsection("Distribution"),
    Entries(
        "e46697",
        "2f6805",
        "a50278",
        "13cac5",
        "097efc",
    ),
    Subsection("Specific values"),
    Entries(
        "4a200a",
        "ec4f56",
        "83566f",
        "26faf3",
        "6ae250",
        "ad91ae",
    ),
    Subsection("Transcendence"),
    Entries(
        "298bb1",
    ),
    Subsection("Weight 2 series"),
    Entries(
        "cae067",
        "f33f09",
        "67f2ef",
        "be9790",
    ),
)

make_entry(ID("9bb960"),
    SymbolDefinition(EisensteinG, EisensteinG(k,tau), "Eisenstein series"),
    Description("The Eisenstein series", EisensteinG(k,tau), "is defined for even integers", GreaterEqual(k, 2), "and", tau, "in the upper half-plane."),
    Description("The functions", EisensteinG(k,tau), "and", EisensteinE(k,tau), "are the same up to a normalizing factor."))

make_entry(ID("df3334"),
    SymbolDefinition(EisensteinE, EisensteinE(k,tau), "Normalized Eisenstein series"),
    Description("The normalized Eisenstein series", EisensteinE(k,tau), "is defined for even integers", GreaterEqual(k, 2), "and", tau, "in the upper half-plane."),
    Description("The functions", EisensteinG(k,tau), "and", EisensteinE(k,tau), "are the same up to a normalizing factor."))

make_entry(ID("7e1850"),
    Image(Description("X-ray of", EisensteinE(2, tau), "on", Element(tau, ClosedInterval(-1,1) + ClosedInterval(0,2)*ConstI), "with", ModularGroupFundamentalDomain, "highlighted"),
        ImageSource("xray_eisenstein_e2")),
    description_xray)

make_entry(ID("dac0bb"),
    Image(Description("X-ray of", EisensteinE(4, tau), "on", Element(tau, ClosedInterval(-1,1) + ClosedInterval(0,2)*ConstI), "with", ModularGroupFundamentalDomain, "highlighted"),
        ImageSource("xray_eisenstein_e4")),
    description_xray)

make_entry(ID("54951a"),
    Image(Description("X-ray of", EisensteinE(6, tau), "on", Element(tau, ClosedInterval(-1,1) + ClosedInterval(0,2)*ConstI), "with", ModularGroupFundamentalDomain, "highlighted"),
        ImageSource("xray_eisenstein_e6")),
    description_xray)

make_entry(ID("356d7a"),
    Image(Description("X-ray of", EisensteinE(8, tau), "on", Element(tau, ClosedInterval(-1,1) + ClosedInterval(0,2)*ConstI), "with", ModularGroupFundamentalDomain, "highlighted"),
        ImageSource("xray_eisenstein_e8")),
    description_xray)

make_entry(ID("626026"),
    Image(Description("X-ray of", EisensteinE(10, tau), "on", Element(tau, ClosedInterval(-1,1) + ClosedInterval(0,2)*ConstI), "with", ModularGroupFundamentalDomain, "highlighted"),
        ImageSource("xray_eisenstein_e10")),
    description_xray)

make_entry(ID("a14cfc"),
    Image(Description("X-ray of", EisensteinE(12, tau), "on", Element(tau, ClosedInterval(-1,1) + ClosedInterval(0,2)*ConstI), "with", ModularGroupFundamentalDomain, "highlighted"),
        ImageSource("xray_eisenstein_e12")),
    description_xray)

make_entry(ID("0a2120"),
    Formula(Equal(EisensteinE(2*k, tau), EisensteinG(2*k, tau) / (2*RiemannZeta(2*k)))),
    Variables(k, tau),
    Assumptions(And(Element(k, ZZGreaterEqual(1)), Element(tau, HH))))

make_entry(ID("2246a7"),
    Formula(Equal(EisensteinG(2*k, tau), Sum(1/(m*tau+n)**(2*k),
        ForElement(Tuple(m, n), SetMinus(Pow(ZZ, 2), Set(Tuple(0, 0))))))),
    Variables(k, tau),
    Assumptions(And(Element(k, ZZGreaterEqual(2)), Element(tau, HH))))

make_entry(ID("c1ffd4"),
    Formula(Equal(EisensteinG(2*k, tau), RiemannZeta(2*k) * Sum(1/(m*tau+n)**(2*k),
        ForElement(Tuple(m, n), SetMinus(Pow(ZZ, 2), Set(Tuple(0, 0)))), Equal(GCD(m,n),1)))),
    Variables(k, tau),
    Assumptions(And(Element(k, ZZGreaterEqual(2)), Element(tau, HH))))

make_entry(ID("b07750"),
    Formula(Equal(EisensteinG(2*k, tau), 2 * RiemannZeta(2*k) + 2 * Sum(Sum(1/(m*tau+n)**(2*k), ForElement(n, ZZ)), For(m, 1, Infinity)))),
    Variables(k, tau),
    Assumptions(And(Element(k, ZZGreaterEqual(1)), Element(tau, HH))))

make_entry(ID("0b5b04"),
    Formula(Equal(EisensteinG(2*k, (a*tau+b)/(c*tau+d)), (c*tau+d)**(2*k) * EisensteinG(2*k, tau))),
    Variables(k,tau,a,b,c,d),
    Assumptions(And(Element(k, ZZGreaterEqual(2)), Element(tau, HH), Element(Matrix2x2(a, b, c, d), SL2Z))))

make_entry(ID("8ffe07"),
    Formula(Equal(EisensteinE(2*k, (a*tau+b)/(c*tau+d)), (c*tau+d)**(2*k) * EisensteinE(2*k, tau))),
    Variables(k,tau,a,b,c,d),
    Assumptions(And(Element(k, ZZGreaterEqual(2)), Element(tau, HH), Element(Matrix2x2(a, b, c, d), SL2Z))))

make_entry(ID("23a5e0"),
    Formula(Equal(EisensteinG(2*k, tau+n), EisensteinG(2*k, tau))),
    Variables(k,n,tau),
    Assumptions(And(Element(k, ZZGreaterEqual(1)), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("d56eb6"),
    Formula(Equal(EisensteinE(2*k, tau+n), EisensteinE(2*k, tau))),
    Variables(k,n,tau),
    Assumptions(And(Element(k, ZZGreaterEqual(1)), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("5161ab"),
    Formula(Equal(EisensteinG(2, (a*tau+b)/(c*tau+d)), (c*tau+d)**2 * EisensteinG(2, tau) - 2 * Pi * ConstI * c * (c*tau+d))),
    Variables(tau,a,b,c,d),
    Assumptions(And(Element(tau, HH), Element(Matrix2x2(a, b, c, d), SL2Z))))

make_entry(ID("7f4c85"),
    Formula(Equal(EisensteinE(2, (a*tau+b)/(c*tau+d)), (c*tau+d)**2 * EisensteinE(2, tau) - ((6 * ConstI) / Pi) * c * (c*tau+d))),
    Variables(tau,a,b,c,d),
    Assumptions(And(Element(tau, HH), Element(Matrix2x2(a, b, c, d), SL2Z))))

make_entry(ID("b1a5e4"),
    Formula(Where(Equal(H((a*tau+b)/(c*tau+d)), (c*tau+d)**2 * H(tau)), Equal(H(tau), EisensteinG(2,tau) - Pi/Im(tau)))),
    Variables(tau,a,b,c,d),
    Assumptions(And(Element(tau, HH), Element(Matrix2x2(a, b, c, d), SL2Z))))

make_entry(ID("10cdf4"),
    Formula(Equal(EisensteinE(2, tau), Where(1 - 24 * Sum(DivisorSigma(1, n) * q**n, For(n, 1, Infinity)), Equal(q, Exp(2*Pi*ConstI*tau))))),
    Variables(k, tau),
    Assumptions(And(Element(k, ZZGreaterEqual(1)), Element(tau, HH))))

make_entry(ID("f8dfaf"),
    Formula(Equal(EisensteinE(4, tau), Where(1 + 240 * Sum(DivisorSigma(3, n) * q**n, For(n, 1, Infinity)), Equal(q, Exp(2*Pi*ConstI*tau))))),
    Variables(k, tau),
    Assumptions(And(Element(k, ZZGreaterEqual(1)), Element(tau, HH))))

make_entry(ID("e20db0"),
    Formula(Equal(EisensteinE(6, tau), Where(1 - 504 * Sum(DivisorSigma(5, n) * q**n, For(n, 1, Infinity)), Equal(q, Exp(2*Pi*ConstI*tau))))),
    Variables(k, tau),
    Assumptions(And(Element(k, ZZGreaterEqual(1)), Element(tau, HH))))

make_entry(ID("7c00e6"),
    Formula(Equal(EisensteinE(2*k, tau), Where(1 - (4*k)/BernoulliB(2*k) * Sum(DivisorSigma(2*k-1, n) * q**n, For(n, 1, Infinity)), Equal(q, Exp(2*Pi*ConstI*tau))))),
    Variables(k, tau),
    Assumptions(And(Element(k, ZZGreaterEqual(1)), Element(tau, HH))))

make_entry(ID("848d97"),
    Formula(Equal(EisensteinE(2*k, tau), Where(1 - (4*k)/BernoulliB(2*k) * Sum(n**(2*k-1) * q**n / (1 - q**n), For(n, 1, Infinity)), Equal(q, Exp(2*Pi*ConstI*tau))))),
    Variables(k, tau),
    Assumptions(And(Element(k, ZZGreaterEqual(1)), Element(tau, HH))))

make_entry(ID("15b347"),
    Formula(Equal(EisensteinE(2*k, tau), Where(1 - (4*k)/BernoulliB(2*k) *
        Sum(Sum(n**(2*k-1) * q**(m*n), For(m, 1, Infinity)), For(n, 1, Infinity)), Equal(q, Exp(2*Pi*ConstI*tau))))),
    Variables(k, tau),
    Assumptions(And(Element(k, ZZGreaterEqual(1)), Element(tau, HH))))

make_entry(ID("18a4d1"),
    Formula(Equal(EisensteinE(2, tau), 1 + 6 * Sum(1/Sin(Pi * m * tau)**2, For(m, 1, Infinity)))),
    Variables(tau),
    Assumptions(And(Element(tau, HH))))

make_entry(ID("7b62e4"),
    Formula(Equal(EisensteinE(2, tau), 1 - 12 * Sum(1/(Cos(2 * Pi * m * tau) - 1), For(m, 1, Infinity)))),
    Variables(tau),
    Assumptions(And(Element(tau, HH))))

make_entry(ID("a92c1a"),
    Formula(Equal(EisensteinE(4, tau), 1 + 30 * Sum((Cos(Pi*m*tau)**2 + 1)/Sin(Pi*m*tau)**4, For(m, 1, Infinity)))),
    Variables(tau),
    Assumptions(And(Element(tau, HH))))

make_entry(ID("171724"),
    Formula(Equal(EisensteinE(6, tau), 1 + 63 * Sum((2 * Cos(Pi*m*tau)**4 + 11 * Cos(Pi*m*tau)**2 + 2)/Sin(Pi*m*tau)**6, For(m, 1, Infinity)))),
    Variables(tau),
    Assumptions(And(Element(tau, HH))))

_a = JacobiTheta(2,0,tau)

_b = JacobiTheta(3,0,tau)

_c = JacobiTheta(4,0,tau)

make_entry(ID("cc579c"),
    Formula(Equal(EisensteinE(4, tau), Div(1,2) * (_a**8 + _b**8 + _c**8))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("10f3b2"),
    Formula(Equal(EisensteinE(6, tau), Div(1,2) * (_b**12 + _c**12 - 3*_a**8*(_b**4+_c**4)))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("6d2880"),
    Formula(Equal(EisensteinE(8, tau), Div(1,2) * (_a**16 + _b**16 + _c**16))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("a0dff6"),
    Formula(Equal(EisensteinE(6, tau)**2, Div(1,8) * ((_a**8 + _b**8 + _c**8)**3 - 54*(_a*_b*_c)**8))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("bd7d8e"),
    Formula(Equal(EisensteinE(4, tau)**3 - EisensteinE(6, tau)**2, Div(27,4) * (_a*_b*_c)**8)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("dbf388"),
    Formula(Equal(EisensteinG(2, tau), -((4*Pi*ConstI) * (ComplexDerivative(DedekindEta(tau), For(tau, tau)) / DedekindEta(tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("03ad5a"),
    Formula(Equal(EisensteinE(2, tau), -((12*ConstI)/Pi * (ComplexDerivative(DedekindEta(tau), For(tau, tau)) / DedekindEta(tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("4da2cd"),
    Formula(Equal(EisensteinE(4, tau), DedekindEta(tau)**16/DedekindEta(2*tau)**8 + 256 * (DedekindEta(2*tau)**16 / DedekindEta(tau)**8))),
    Variables(tau),
    Assumptions(Element(tau, HH)),
    References("K. Ono (2004), Web of Modularity: Arithmetic of the Coefficients of Modular Forms and q-series, American Mathematical Society. Theorem 1.67."))

make_entry(ID("0a5ef4"),
    Formula(Equal(EisensteinE(6, tau), DedekindEta(tau)**24/DedekindEta(2*tau)**12 - 480 * DedekindEta(2*tau)**12
        - 16896 * (DedekindEta(2*tau)**12 * DedekindEta(4*tau)**8 / DedekindEta(tau)**8) + 8192 * (DedekindEta(4*tau)**24 / DedekindEta(2*tau)**12))),
    Variables(tau),
    Assumptions(Element(tau, HH)),
    References("K. Ono (2004), Web of Modularity: Arithmetic of the Coefficients of Modular Forms and q-series, American Mathematical Society. Theorem 1.67."))

make_entry(ID("b52b6f"),
    Formula(Equal(EisensteinG(2, tau), 2 * WeierstrassZeta(Div(1,2), tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("3bf702"),
    Formula(Equal(EisensteinE(2, tau), (6 / Pi**2) * WeierstrassZeta(Div(1,2), tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("044128"),
    Formula(Equal(EisensteinE(8, tau), EisensteinE(4, tau)**2)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("adaf5a"),
    Formula(Equal(EisensteinE(10, tau), EisensteinE(4, tau) * EisensteinE(6, tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("e60fd4"),
    Formula(Equal(EisensteinE(14, tau), EisensteinE(4, tau)**2 * EisensteinE(6, tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("9e1f83"),
    Formula(Equal(EisensteinE(14, tau), EisensteinE(4, tau) * EisensteinE(10, tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("feb95e"),
    Formula(Equal(EisensteinE(14, tau), EisensteinE(6, tau) * EisensteinE(8, tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("36fff2"),
    Formula(Equal(EisensteinE(12, tau), Div(1,691) * (441*EisensteinE(4,tau)**3 + 250*EisensteinE(6,tau)**2))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("5540a1"),
    Formula(Equal(EisensteinG(2*k,tau), (3 / ((2*k+1)*(k-3)*(2*k-1)))*Sum((2*r-1)*(2*k-2*r-1)*EisensteinG(2*r,tau)*EisensteinG(2*k-2*r,tau), For(r, 2, k-2)))),
    Variables(k, tau),
    Assumptions(And(Element(k, ZZGreaterEqual(4)), Element(tau, HH))),
    References("T. Apostol (1976), Modular Functions and Dirichlet Series in Number Theory, Springer. Theorem 1.13."))

make_entry(ID("9bf0ad"),
    Formula(Equal(WeierstrassP(z, tau), 1/z**2 + Sum((2*k+1)*EisensteinG(2*k+2,tau) * z**(2*k), For(k, 1, Infinity)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), Less(Abs(z), 
        Infimum(Set(Abs(s), ForElement(s, SetMinus(Lattice(1, tau), Set(0)))))))))

make_entry(ID("3e84e3"),
    Formula(Equal(WeierstrassZeta(z, tau), 1/z - Sum(EisensteinG(2*k+2,tau) * z**(2*k+1), For(k, 1, Infinity)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), Less(Abs(z), 
        Infimum(Set(Abs(s), ForElement(s, SetMinus(Lattice(1, tau), Set(0)))))))))

_ref = "B. C. Berndt and A. J. Yee (2002) Ramanujan's Contributions to Eisenstein Series, Especially in His Lost Notebook. In: Kanemitsu S., Jia C. (eds) Number Theoretic Methods. Developments in Mathematics, vol 8. Springer, Boston, MA. https://doi.org/10.1007/978-1-4757-3675-5_3"

make_entry(ID("7cda09"),
    Formula(Equal(ComplexDerivative(EisensteinE(2, tau), For(tau, tau)),
        2 * Pi * ConstI * Parentheses((EisensteinE(2,tau)**2 - EisensteinE(4,tau)) / 12))),
    Variables(tau),
    Assumptions(Element(tau, HH)),
    References(_ref))

make_entry(ID("af2ea9"),
    Formula(Equal(ComplexDerivative(EisensteinE(4, tau), For(tau, tau)),
        2 * Pi * ConstI * Parentheses((EisensteinE(2,tau)*EisensteinE(4,tau) - EisensteinE(6,tau)) / 3))),
    Variables(tau),
    Assumptions(Element(tau, HH)),
    References(_ref))

make_entry(ID("3bfced"),
    Formula(Equal(ComplexDerivative(EisensteinE(6, tau), For(tau, tau)),
        2 * Pi * ConstI * Parentheses((EisensteinE(2,tau)*EisensteinE(6,tau) - EisensteinE(4,tau)**2) / 2))),
    Variables(tau),
    Assumptions(Element(tau, HH)),
    References(_ref))

make_entry(ID("570399"),
    Formula(Equal(EisensteinG(2, ConstI), Pi)))

make_entry(ID("9ea739"),
    Formula(Equal(EisensteinG(2, Exp(2*Pi*ConstI/3)), 2*Pi/Sqrt(3))))

make_entry(ID("a691b3"),
    Formula(Equal(EisensteinE(2, ConstI), 3/Pi)))

make_entry(ID("30a054"),
    Formula(Equal(EisensteinE(2, Exp(2*Pi*ConstI/3)), (2*Sqrt(3))/Pi)))

make_entry(ID("e03b7c"),
    Formula(Equal(EisensteinG(4, ConstI), Gamma(Div(1,4))**8 / (960 * Pi**2))))

make_entry(ID("53fcdd"),
    Formula(Equal(EisensteinE(4, ConstI), (3 * Gamma(Div(1,4))**8) / (64 * Pi**6))))

make_entry(ID("3102a7"),
    Formula(Equal(EisensteinG(4, Exp(2*Pi*ConstI/3)), EisensteinE(4, Exp(2*Pi*ConstI/3)), 0)))

make_entry(ID("0fda1b"),
    Formula(Equal(EisensteinG(6, Exp(2*Pi*ConstI/3)), (Gamma(Div(1,3))**18) / (8960 * Pi**6))))

make_entry(ID("6c71c0"),
    Formula(Equal(EisensteinE(6, Exp(2*Pi*ConstI/3)), (27*Gamma(Div(1,3))**18) / (512 * Pi**12))))

make_entry(ID("a4109c"),
    Formula(Equal(EisensteinG(6, ConstI), EisensteinE(6, ConstI), 0)))

make_entry(ID("c6be24"),
    Formula(Equal(EisensteinG(2*k, ConstI*Infinity), ComplexLimit(EisensteinG(2*k, tau), For(tau, ConstI*Infinity)), 2 * RiemannZeta(2*k))),
    Variables(k),
    Assumptions(And(Element(k, ZZGreaterEqual(1)))))

make_entry(ID("ad9ba2"),
    Formula(Equal(EisensteinE(2*k, ConstI*Infinity), ComplexLimit(EisensteinE(2*k, tau), For(tau, ConstI*Infinity)), 1)),
    Variables(k),
    Assumptions(And(Element(k, ZZGreaterEqual(1)))))

make_entry(ID("e46697"),
    Formula(Equal(Zeros(EisensteinE(2*k, tau), ForElement(tau, HH)),
        Set(ModularGroupAction(gamma, tau), For(Tuple(gamma, tau)), And(Element(tau, Zeros(EisensteinE(2*k, z), ForElement(z, ModularGroupFundamentalDomain))), Element(gamma, PSL2Z))))),
    Variables(k),
    Assumptions(And(Element(k, ZZGreaterEqual(2)))))

make_entry(ID("2f6805"),
                Formula(Subset(Zeros(EisensteinE(2*k, tau), ForElement(tau, ModularGroupFundamentalDomain)), Set(Exp(ConstI*theta), ForElement(theta, ClosedInterval(Pi/2, 2*Pi/3))))),
    Variables(k),
    Assumptions(And(Element(k, ZZGreaterEqual(2)))),
    References("F. K. C. Rankin and H. P. F. Swinnerton-Dyer, On the zeros of Eisenstein Series, Bull. London Math. Soc., 2(1970),169-170."))

make_entry(ID("a50278"),
    Formula(GreaterEqual(Cardinality(Zeros(EisensteinE(2*k, tau), ForElement(tau, ModularGroupFundamentalDomain))), 1)),
    Variables(k),
    Assumptions(And(Element(k, ZZGreaterEqual(2)))),
    References("F. K. C. Rankin and H. P. F. Swinnerton-Dyer, On the zeros of Eisenstein Series, Bull. London Math. Soc., 2(1970),169-170."))

make_entry(ID("13cac5"),
    Formula(Where(Equal(Sum(w(tau) * ComplexZeroMultiplicity(EisensteinE(2*k, z), For(z, tau)), ForElement(tau, ModularGroupFundamentalDomain)), 2*k/12),
        Equal(w(tau), Cases(Tuple(Div(1,2), Equal(tau, ConstI)), Tuple(Div(1,3), Equal(tau, Exp(2*Pi*ConstI/3))), Tuple(1, Otherwise))))),
    Variables(k),
    Assumptions(Element(k, ZZGreaterEqual(2))),
    References("K. Ono and M. A. Papanikolas (2004). p-Adic Properties of Values of the Modular j-Function. In: Hashimoto K., Miyake K., Nakamura H. (eds) Galois Theory and Modular Forms. Developments in Mathematics, vol 11. Springer, Boston, MA, https://doi.org/10.1007/978-1-4613-0249-0_19",
    "S. Garthwaite, L. Long, H. Swisher, S. Treneer. Zeros of classical Eisenstein series and recent developments, Fields Communications Volume 60, WIN - Women In Numbers, Proceedings of the WIN Workshop, (2011), 251-263. http://math.oregonstate.edu/~swisherh/C1P.pdf"))

make_entry(ID("097efc"),
    Formula(Where(Equal(Sum(ModularJ(tau) * w(tau) * ComplexZeroMultiplicity(EisensteinE(2*k, z), For(z, tau)), ForElement(tau, ModularGroupFundamentalDomain)), 120*k - 2/RiemannZeta(1-2*k)),
        Equal(w(tau), Cases(Tuple(Div(1,2), Equal(tau, ConstI)), Tuple(1, Otherwise))))),
    Variables(k),
    Assumptions(Element(k, ZZGreaterEqual(2))),
    References("K. Ono and M. A. Papanikolas (2004). p-Adic Properties of Values of the Modular j-Function. In: Hashimoto K., Miyake K., Nakamura H. (eds) Galois Theory and Modular Forms. Developments in Mathematics, vol 11. Springer, Boston, MA, https://doi.org/10.1007/978-1-4613-0249-0_19",
    "S. Garthwaite, L. Long, H. Swisher, S. Treneer. Zeros of classical Eisenstein series and recent developments, Fields Communications Volume 60, WIN - Women In Numbers, Proceedings of the WIN Workshop, (2011), 251-263. http://math.oregonstate.edu/~swisherh/C1P.pdf"))

make_entry(ID("298bb1"),
    Formula(Implies(And(Equal(EisensteinE(2*k, tau), 0), NotElement(tau, Set(ConstI, Exp(2*Pi*ConstI/3)))), NotElement(tau, AlgebraicNumbers))),
    Variables(tau, k),
    Assumptions(And(Element(k, ZZGreaterEqual(2)), Element(tau, ModularGroupFundamentalDomain))),
    References("https://doi.org/10.14992/00008713"))

make_entry(ID("4a200a"),
    Formula(Equal(Zeros(EisensteinE(4, tau), ForElement(tau, ModularGroupFundamentalDomain)), Set(Exp(2*Pi*ConstI/3)))))

make_entry(ID("ec4f56"),
    Formula(Equal(Zeros(EisensteinE(6, tau), ForElement(tau, ModularGroupFundamentalDomain)), Set(ConstI))))

make_entry(ID("83566f"),
    Formula(Equal(Zeros(EisensteinE(8, tau), ForElement(tau, ModularGroupFundamentalDomain)), Set(Exp(2*Pi*ConstI/3)))))

make_entry(ID("26faf3"),
    Formula(Equal(Zeros(EisensteinE(10, tau), ForElement(tau, ModularGroupFundamentalDomain)), Set(ConstI, Exp(2*Pi*ConstI/3)))))

make_entry(ID("6ae250"),
    Formula(Equal(Zeros(EisensteinE(12, tau), ForElement(tau, ModularGroupFundamentalDomain)),
        Where(Set(ConstI * Hypergeometric2F1(Div(1,6),Div(5,6),1,a) / Hypergeometric2F1(Div(1,6),Div(5,6),1,1-a)),
            Equal(a, Div(1,2) + 21*Sqrt(10)*ConstI/100)))))

make_entry(ID("ad91ae"),
    Formula(Equal(Zeros(EisensteinE(14, tau), ForElement(tau, ModularGroupFundamentalDomain)), Set(ConstI, Exp(2*Pi*ConstI/3)))))

make_entry(ID("cae067"),
    Formula(Equal(Zeros(EisensteinE(2, tau), ForElement(tau, HH)),
        Set(tau+n, For(Tuple(tau, n)), And(Element(tau, Zeros(EisensteinE(2, z), For(z), And(Element(z, HH), Element(Re(z), ClosedOpenInterval(-Div(1,2), Div(1,2)))))),
            Element(n, ZZ))))))

make_entry(ID("f33f09"),
    Formula(Equal(Zeros(EisensteinE(2, tau), ForElement(tau, HH), Element(Re(tau), ClosedOpenInterval(-Div(1,2), Div(1,2)))),
        Where(Set(Parentheses(UniqueZero(EisensteinE(2, z), ForElement(z, D(c,d)))),
            For(Tuple(c, d)), And(Element(c, ZZ), Element(d, ZZ), Equal(GCD(c,d),1), Element(-(d/c), ClosedOpenInterval(-Div(1,2), Div(1,2))))),
            Equal(D(c,d), ClosedDisk(-(d/c) + (ConstI*Pi)/(6*c**2), (Decimal("0.000283")*Pi**2)/(36*c**2)))))),
    References("R. Wood and M. P. Young, Zeros of the weight two Eisenstein series, Journal of Number Theory Volume 143, October 2014, Pages 320-333. https://doi.org/10.1016/j.jnt.2014.04.007"))

make_entry(ID("67f2ef"),
    Formula(Element(UniqueZero(EisensteinE(2, ConstI*y), ForElement(y, OpenInterval(0, Infinity))),
        RealBall(Decimal("0.523521700017999266800534404806"), Decimal("1.10e-31")))))

make_entry(ID("be9790"),
    Formula(Element(UniqueZero(EisensteinE(2, -Div(1,2) + ConstI*y), ForElement(y, OpenInterval(0, Infinity))),
        RealBall(Decimal("0.130919030396762446904114826020"), Decimal("2.87e-31")))))

def_Topic(
    Title("Error functions"),
    Section("Definitions"),
    Entries(
        "e46223",
        "7375c0",
        "d2914b",
    ),
    Section("Illustrations"),
    Entries(
        "3be335",
    ),
    Section("Integral representations"),
    Entries(
        "2aaba8",
        "36ef64",
        "622772",
    ),
    Section("Connection formulas"),
    Entries(
        "7f355d",
        "bfc86e",
        "01440f",
    ),
    Section("Functional equations"),
    Entries(
        "94db18",
        "603a49",
        "ec0205",
    ),
    Section("Hypergeometric representations"),
    Entries(
        "abadc7",
        "98688d",
        "cb93ea",
        "ae3110",
    ),
    Section("Derivatives"),
    Entries(
        "b5bd5d",
        "fae9d3",
    ),
)

make_entry(ID("e46223"),
    SymbolDefinition(Erf, Erf(z), "Error function"))

make_entry(ID("7375c0"),
    SymbolDefinition(Erfc, Erfc(z), "Complementary error function"))

make_entry(ID("d2914b"),
    SymbolDefinition(Erfi, Erfi(z), "Imaginary error function"))

make_entry(ID("3be335"),
    Image(Description("X-ray of", Erf(z), "on", Element(z, ClosedInterval(-4,4) + ClosedInterval(-4,4)*ConstI)),
        ImageSource("xray_erf")),
    description_xray,
    )

make_entry(ID("2aaba8"),
    Formula(Equal(Erf(z), 2/Sqrt(Pi) * Integral(Exp(-(t**2)), For(t, 0, z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("36ef64"),
    Formula(Equal(Erfc(z), 2/Sqrt(Pi) * Integral(Exp(-(t**2)), For(t, z, Infinity)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("622772"),
    Formula(Equal(Erfi(z), 2/Sqrt(Pi) * Integral(Exp(t**2), For(t, 0, z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("94db18"),
    Formula(Equal(Erf(-z), -Erf(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("ec0205"),
    Formula(Equal(Erfc(-z), 2-Erfc(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("603a49"),
    Formula(Equal(Erfi(-z), -Erfi(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("abadc7"),
    Formula(Equal(Erf(z), (2*z)/Sqrt(Pi) * Hypergeometric1F1(Div(1,2), Div(3,2), -(z**2)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("98688d"),
    Formula(Equal(Erf(z), (2*z*Exp(-(z**2)))/Sqrt(Pi) * Hypergeometric1F1(1, Div(3,2), z**2))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("cb93ea"),
    Formula(Equal(Erf(z), z/Sqrt(z**2) - Exp(-(z**2))/(z*Sqrt(Pi)) * HypergeometricUStar(Div(1,2), Div(1,2), z**2))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotEqual(z, 0))))

make_entry(ID("ae3110"),
    Formula(Equal(Erfc(z), Exp(-(z**2))/(z*Sqrt(Pi)) * HypergeometricUStar(Div(1,2), Div(1,2), z**2))),
    Variables(z),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0))))

make_entry(ID("7f355d"),
    Formula(Equal(Erf(z) + Erfc(z), 1)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("bfc86e"),
    Formula(Equal(Erfc(z), 1 - Erf(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("01440f"),
    Formula(Equal(Erfi(z), -(ConstI*Erf(ConstI*z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("b5bd5d"),
    Formula(Equal(ComplexDerivative(Erf(z), For(z, z, 1)), 2/Sqrt(Pi) * Exp(-(z**2)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("fae9d3"),
    Formula(Equal(ComplexDerivative(Erf(z), For(z, z, n)), 2/Sqrt(Pi) * (-1)**(n+1) * HermitePolynomial(n-1, z) * Exp(-(z**2)))),
    Variables(z, n),
    Assumptions(And(Element(z, CC), Element(n, ZZGreaterEqual(1)))))

def_Topic(
    Title("Exponential function"),
    Section("Definitions"),
    Entries(
        "dfbcd9",
        "f758c6",
    ),
    Section("Illustrations"),
    Entries(
        "e74de0",
        "6ef3d1",
    ),
    Section("Domain and range"),
    Subsection("Numbers"),
    Entries(
        "be1092",
        "819b5f",
        "ca8b0a",
    ),
    Subsection("Infinities"),
    Entries(
        "66f4c8",
        "424db5",
    ),
    Subsection("Formal power series"),
    Entries(
        "a807a7",
        "0d82d4",
        "148f96",
    ),
    Subsection("Matrices"),
    Entries(
        "9e388b",
        "2ea614",
    ),
    Section("Particular values"),
    Entries(
        "27ca8d",
        "9a944c",
        "54aaf1",
        "a90f35",
        "bb7d22",
        "8f9143",
        "71a0b8",
        "e2b379",
    ),
    Section("Functional equations and connection formulas"),
    Entries(
        "812707",
        "e51ec3",
        "2f4f74",
        "77d6bf",
        "97ba8d",
        "1fa6b7",
        "1568e1",
        "e103e7",
        "296627",
        "987e3c",
    ),
    Section("Analytic properties"),
    Entries(
        "28d158",
        "0901a1",
        "be4b28",
        "184c11",
        "b62d05",
        "bceb84",
    ),
    Section("Complex parts"),
    Entries(
        "1b3014",
        "caf706",
        "b7d62b",
        "e2fac7",
        "a0d93c",
        "52d827",
    ),
    Section("Taylor series"),
    Entries(
        "1635f5",
        "bad502",
    ),
    Section("Derivatives and integrals"),
    Entries(
        "935b2f",
        "96af56",
        "4491b8",
    ),
    Section("Approximations"),
    Entries(
        "3c4480",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "2f57ad",
        "3ac8a5",
    ),
)

make_entry(ID("dfbcd9"),
    SymbolDefinition(Exp, Exp(z), "Exponential function"),
    Description("The exponential function", Exp(z), "is a function of one complex variable", z, ".",
        "It can be defined by the Taylor series", EntryReference("1635f5"), "."),
    Description("In rendered formulas,", SourceForm(Exp(z)), "is shown as", Exp(z), "or as", Call(Exp, z), "depending on the typographical requirements; no semantic difference is implied."))

make_entry(ID("f758c6"),
    SymbolDefinition(ConstE, ConstE, "The constant e (2.718...)"),
    Description("The real number giving the base of the natural logarithm, also known as Euler's number."))

make_entry(ID("e74de0"),
    Image(Description("Plot of", Exp(x), "on", Element(x, ClosedInterval(-4,4))),
        ImageSource("plot_exp")),
    )

make_entry(ID("6ef3d1"),
    Image(Description("X-ray of", Exp(z), "on", Element(z, ClosedInterval(-5,5) + ClosedInterval(-5,5)*ConstI)),
        ImageSource("xray_exp")),
    description_xray,
    )

make_entry(ID("be1092"),
    Formula(Implies(Element(z, Set(0)), Element(Exp(z), Set(1)))),
    Variables(z))

make_entry(ID("819b5f"),
    Formula(Implies(Element(z, RR), Element(Exp(z), OpenInterval(0,Infinity)))),
    Variables(z))

make_entry(ID("ca8b0a"),
    Formula(Implies(Element(z, CC), Element(Exp(z), SetMinus(CC, Set(0))))),
    Variables(z))

make_entry(ID("66f4c8"),
    Formula(Implies(Element(z, Set(Infinity)), Element(Exp(z), Set(Infinity)))),
    Variables(z))

make_entry(ID("424db5"),
    Formula(Implies(Element(z, Set(-Infinity)), Element(Exp(z), Set(0)))),
    Variables(z))

make_entry(ID("a807a7"),
    Formula(Implies(And(Element(z, PowerSeries(QQ, SerX)), Equal(Coefficient(z, SerX, 0), 0)),
        And(Element(Exp(z), PowerSeries(QQ, SerX)), Equal(Coefficient(Exp(z), SerX, 0), 1)))),
    Variables(z))

make_entry(ID("0d82d4"),
    Formula(Implies(Element(z, PowerSeries(RR, SerX)),
        And(Element(Exp(z), PowerSeries(RR, SerX)), NotEqual(Coefficient(Exp(z), SerX, 0), 0)))),
    Variables(z))

make_entry(ID("148f96"),
    Formula(Implies(Element(z, PowerSeries(CC, SerX)),
            And(Element(Exp(z), PowerSeries(CC, SerX)), NotEqual(Coefficient(Exp(z), SerX, 0), 0)))),
    Variables(z))

make_entry(ID("9e388b"),
    Formula(Implies(Element(A, Matrices(RR, n, n)), Element(Exp(A), GeneralLinearGroup(n, RR)))),
    Variables(A, n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("2ea614"),
    Formula(Implies(Element(A, Matrices(CC, n, n)), Element(Exp(A), GeneralLinearGroup(n, CC)))),
    Variables(A, n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("27ca8d"),
    Formula(Equal(Exp(0), 1)))

make_entry(ID("9a944c"),
    Formula(Equal(Exp(1), ConstE)))

make_entry(ID("54aaf1"),
    Formula(Equal(Exp(Pi*ConstI), -1)))

make_entry(ID("a90f35"),
    Formula(Equal(Exp(Pi*ConstI/2), ConstI)))

make_entry(ID("bb7d22"),
    Formula(NotElement(ConstE, QQ)))

make_entry(ID("8f9143"),
    Formula(NotElement(ConstE, AlgebraicNumbers)))

make_entry(ID("71a0b8"),
    Formula(All(NotElement(Exp(alpha), QQ), ForElement(alpha, SetMinus(QQ, Set(0))))))

make_entry(ID("e2b379"),
    Formula(All(NotElement(Exp(alpha), AlgebraicNumbers), ForElement(alpha, SetMinus(AlgebraicNumbers, Set(0))))))

make_entry(ID("812707"),
    Formula(Equal(Exp(a+b), Exp(a) * Exp(b))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("e51ec3"),
    Formula(Equal(Exp(z)**n, Exp(n*z))),
    Variables(z, n),
    Assumptions(And(Element(z, CC), Element(n, ZZ))))

make_entry(ID("2f4f74"),
    Formula(Equal(Exp(-z), 1 / Exp(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("77d6bf"),
    Formula(Equal(Exp(a+b*ConstI), Exp(a) * (Cos(b) + Sin(b)*ConstI))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("97ba8d"),
    Formula(Equal(Exp(z+n*Pi*ConstI), (-1)**n * Exp(z))),
    Variables(z, n),
    Assumptions(And(Element(z, CC), Element(n, ZZ))))

make_entry(ID("1fa6b7"),
    Formula(Equal(Exp(z+2*n*Pi*ConstI), Exp(z))),
    Variables(z, n),
    Assumptions(And(Element(z, CC), Element(n, ZZ))))

make_entry(ID("296627"),
    Formula(Equal(Exp(Log(z)), z)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("987e3c"),
    Formula(Implies(Element(Im(z), OpenClosedInterval(-Pi, Pi)), Equal(Log(Exp(z)), z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("28d158"),
    Formula(IsHolomorphic(Exp(z), ForElement(z, CC))))

make_entry(ID("0901a1"),
    Formula(Equal(Poles(Exp(z), ForElement(z, Union(CC, Set(UnsignedInfinity)))), Set())))

make_entry(ID("be4b28"),
    Formula(Equal(EssentialSingularities(Exp(z), z, Union(CC, Set(UnsignedInfinity))), Set(UnsignedInfinity))))

make_entry(ID("184c11"),
    Formula(Equal(BranchPoints(Exp(z), z, Union(CC, Set(UnsignedInfinity))), Set())))

make_entry(ID("b62d05"),
    Formula(Equal(BranchCuts(Exp(z), z, CC), Set())))

make_entry(ID("bceb84"),
    Formula(Equal(Zeros(Exp(z), ForElement(z, CC)), Set())))

make_entry(ID("1635f5"),
    Formula(Equal(Exp(z), Sum(z**k/Factorial(k), For(k, 0, Infinity)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("bad502"),
    Formula(Equal(Exp(c+z), Exp(c) * Sum(z**k/Factorial(k), For(k, 0, Infinity)))),
    Variables(c, z),
    Assumptions(And(Element(c, CC), Element(z, CC))))

make_entry(ID("935b2f"),
    Formula(Equal(Integral(Exp(z), For(z, a, b)), Exp(b) - Exp(a))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("96af56"),
    Formula(Equal(ComplexDerivative(Exp(z), For(z, z, 1)), Exp(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("4491b8"),
    Formula(Equal(ComplexDerivative(Exp(z), For(z, z, n)), Exp(z))),
    Variables(z, n),
    Assumptions(And(Element(z, CC), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("1568e1"),
    Formula(Equal(Exp(z), Cosh(z) + Sinh(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("e103e7"),
    Formula(Equal(Exp(ConstI*z), Cos(z) + ConstI*Sin(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("1b3014"),
    Formula(Equal(Abs(Exp(z)), Exp(Re(z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("caf706"),
    Formula(Equal(Sign(Exp(z)), Exp(Im(z)*ConstI))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("b7d62b"),
    Formula(Equal(Re(Exp(z)), Exp(Re(z))*Cos(Im(z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("e2fac7"),
    Formula(Equal(Im(Exp(z)), Exp(Re(z))*Sin(Im(z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("a0d93c"),
    Formula(Equal(Arg(Exp(z)), Im(z))),
    Variables(z),
    Assumptions(And(Element(z, CC), Element(Im(z), OpenClosedInterval(-Pi, Pi)))))

make_entry(ID("52d827"),
    Formula(Equal(Exp(Conjugate(z)), Conjugate(Exp(z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("3c4480"),
    Formula(LessEqual(Abs(Exp(z) - Sum(z**k/Factorial(k), For(k, 0, N-1))),
        Abs(z)**N/(Factorial(N)*(1-Abs(z)/N)))),
    Variables(z, N),
    Assumptions(And(Element(z, CC), Element(N, ZZ), Greater(N, Abs(z)))))

make_entry(ID("2f57ad"),
    Formula(LessEqual(Abs(Exp(z)), Exp(Abs(z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("3ac8a5"),
    Formula(LessEqual(Abs(Exp(x+a)-Exp(x)), Exp(x)*(Exp(Abs(a))-1))),
    Variables(x, a),
    Assumptions(And(Element(x, RR), Element(a, RR))))

def_Topic(
    Title("Factorials and binomial coefficients"),
    Entries(
        "81aeba",
        "def588",
        "579595",
        "3c2469",
        "d12aa0",
    ),
    Section("Specific values"),
    SeeTopics("Specific values of factorials and binomial coefficients"),
    Entries(
        "3009a7",
        "fb5d88",
        "29741c",
        "63f368",
    ),
    Section("Product representations"),
    Entries(
        "55bf43",
        "788fa4",
        "19f13b",
        "a5852d",
    ),
    Section("Functional equations and recurrence relations"),
    Entries(
        "4f20ff",
        "2362af",
        "081188",
        "209fc8",
        "6e1f13",
        "56d4ff",
        "02ee06",
        "d651d1",
        "c640bf",
        "41f950",
        "fe9fb7",
    ),
    Section("Connection formulas"),
    Entries(
        "62c6c9",
        "e87c43",
        "332721",
        "1d5e92",
        "22ee07",
        "c733f7",
        "e78989",
        "30652c",
    ),
    Section("Sums and generating functions"),
    Entries(
        "6f7746",
        "7c014b",
        "858c8f",
        "4d1365",
        "1635f5",            "65c610",
        "50f57e",
        "2b2066",
        "c9bcf7",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "bb8a75",
        "f9efd0",
        "25b7bd",
        "6b3af0",
        "001a0b",
        "5d6f99",
        "4e7120",
        "fc8d5d",
        "1745f5",
        "d3baaf",
        "5f7334",
        "433d8b",
        "fa3b53",
    ),
)

def_Topic(
    Title("Specific values of factorials and binomial coefficients"),
    SeeTopics("Factorials and binomial coefficients"),
    Section("Tables"),
    Entries(
        "3009a7",
        "fb5d88",
        "29741c",
        "63f368",
    ),
    Section("Special cases"),
    Entries(
        "d8c274",
        "988310",
        "8c21f5",
        "471485",
        "5b85bf",
        "1df686",
        "e78084",
        "973b2c",
        "0feb19",
        "5b414d",
        "a7b330",
        "355c22",
        "0d92f6",
    ),
)

make_entry(ID("81aeba"),
    SymbolDefinition(Factorial, Factorial(n), "Factorial"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(Element(n, ZZGreaterEqual(0)), Element(Factorial(n), ZZGreaterEqual(1))),
      )))

make_entry(ID("def588"),
    SymbolDefinition(Binomial, Binomial(n, k), "Binomial coefficient"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(And(Element(n, ZZGreaterEqual(0)), Element(k, ZZGreaterEqual(0))), Element(Binomial(n, k), ZZGreaterEqual(0))),
        Tuple(And(Element(n, CC), Element(k, ZZGreaterEqual(0))), Element(Binomial(n, k), CC)),
      )))

make_entry(ID("579595"),
    SymbolDefinition(RisingFactorial, RisingFactorial(z, k), "Rising factorial"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(And(Element(z, CC), Element(k, ZZGreaterEqual(0))), Element(RisingFactorial(z, k), CC)),
      )))

make_entry(ID("3c2469"),
    SymbolDefinition(FallingFactorial, FallingFactorial(z, k), "Falling factorial"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(And(Element(z, CC), Element(k, ZZGreaterEqual(0))), Element(FallingFactorial(z, k), CC)),
      )))

make_entry(ID("3009a7"),
    Description("Table of", Factorial(n), "for", LessEqual(0, n, 30)),
    Table(
      Var(n),
      TableValueHeadings(n, Factorial(n)),
      TableSplit(2),
      List(
    Tuple(0, 1),
    Tuple(1, 1),
    Tuple(2, 2),
    Tuple(3, 6),
    Tuple(4, 24),
    Tuple(5, 120),
    Tuple(6, 720),
    Tuple(7, 5040),
    Tuple(8, 40320),
    Tuple(9, 362880),
    Tuple(10, 3628800),
    Tuple(11, 39916800),
    Tuple(12, 479001600),
    Tuple(13, 6227020800),
    Tuple(14, 87178291200),
    Tuple(15, 1307674368000),
    Tuple(16, 20922789888000),
    Tuple(17, 355687428096000),
    Tuple(18, 6402373705728000),
    Tuple(19, 121645100408832000),
    Tuple(20, 2432902008176640000),
    Tuple(21, 51090942171709440000),
    Tuple(22, 1124000727777607680000),
    Tuple(23, 25852016738884976640000),
    Tuple(24, 620448401733239439360000),
    Tuple(25, 15511210043330985984000000),
    Tuple(26, 403291461126605635584000000),
    Tuple(27, 10888869450418352160768000000),
    Tuple(28, 304888344611713860501504000000),
    Tuple(29, 8841761993739701954543616000000),
    Tuple(30, 265252859812191058636308480000000),
    )))

make_entry(ID("fb5d88"),
    Description("Table of", Binomial(n, k), "for", LessEqual(0, n, 15), "and", LessEqual(0, k, 15)),
    Table(TableRelation(Tuple(n, k, y), Equal(Binomial(n, k), y)),
        TableHeadings(Description(n, "\\", k), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
        TableColumnHeadings(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
        List(
            Tuple(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            Tuple(1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            Tuple(1, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            Tuple(1, 3, 3, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            Tuple(1, 4, 6, 4, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            Tuple(1, 5, 10, 10, 5, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            Tuple(1, 6, 15, 20, 15, 6, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            Tuple(1, 7, 21, 35, 35, 21, 7, 1, 0, 0, 0, 0, 0, 0, 0, 0),
            Tuple(1, 8, 28, 56, 70, 56, 28, 8, 1, 0, 0, 0, 0, 0, 0, 0),
            Tuple(1, 9, 36, 84, 126, 126, 84, 36, 9, 1, 0, 0, 0, 0, 0, 0),
            Tuple(1, 10, 45, 120, 210, 252, 210, 120, 45, 10, 1, 0, 0, 0, 0, 0),
            Tuple(1, 11, 55, 165, 330, 462, 462, 330, 165, 55, 11, 1, 0, 0, 0, 0),
            Tuple(1, 12, 66, 220, 495, 792, 924, 792, 495, 220, 66, 12, 1, 0, 0, 0),
            Tuple(1, 13, 78, 286, 715, 1287, 1716, 1716, 1287, 715, 286, 78, 13, 1, 0, 0),
            Tuple(1, 14, 91, 364, 1001, 2002, 3003, 3432, 3003, 2002, 1001, 364, 91, 14, 1, 0),
            Tuple(1, 15, 105, 455, 1365, 3003, 5005, 6435, 6435, 5005, 3003, 1365, 455, 105, 15, 1),
    )))

make_entry(ID("29741c"),
    Description("Table of", RisingFactorial(n, k), "for", LessEqual(0, n, 10), "and", LessEqual(0, k, 10)),
    Table(TableRelation(Tuple(n, k, y), Equal(RisingFactorial(n, k), y)),
        TableHeadings(Description(n, "\\", k), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
        TableColumnHeadings(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
        List(
            Tuple(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            Tuple(1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800),
            Tuple(1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800, 39916800),
            Tuple(1, 3, 12, 60, 360, 2520, 20160, 181440, 1814400, 19958400, 239500800),
            Tuple(1, 4, 20, 120, 840, 6720, 60480, 604800, 6652800, 79833600, 1037836800),
            Tuple(1, 5, 30, 210, 1680, 15120, 151200, 1663200, 19958400, 259459200, 3632428800),
            Tuple(1, 6, 42, 336, 3024, 30240, 332640, 3991680, 51891840, 726485760, 10897286400),
            Tuple(1, 7, 56, 504, 5040, 55440, 665280, 8648640, 121080960, 1816214400, 29059430400),
            Tuple(1, 8, 72, 720, 7920, 95040, 1235520, 17297280, 259459200, 4151347200, 70572902400),
            Tuple(1, 9, 90, 990, 11880, 154440, 2162160, 32432400, 518918400, 8821612800, 158789030400),
            Tuple(1, 10, 110, 1320, 17160, 240240, 3603600, 57657600, 980179200, 17643225600, 335221286400),
    )))

make_entry(ID("63f368"),
    Description("Table of", FallingFactorial(n, k), "for", LessEqual(0, n, 10), "and", LessEqual(0, k, 10)),
    Table(TableRelation(Tuple(n, k, y), Equal(FallingFactorial(n, k), y)),
        TableHeadings(Description(n, "\\", k), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
        TableColumnHeadings(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
        List(
            Tuple(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            Tuple(1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            Tuple(1, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0),
            Tuple(1, 3, 6, 6, 0, 0, 0, 0, 0, 0, 0),
            Tuple(1, 4, 12, 24, 24, 0, 0, 0, 0, 0, 0),
            Tuple(1, 5, 20, 60, 120, 120, 0, 0, 0, 0, 0),
            Tuple(1, 6, 30, 120, 360, 720, 720, 0, 0, 0, 0),
            Tuple(1, 7, 42, 210, 840, 2520, 5040, 5040, 0, 0, 0),
            Tuple(1, 8, 56, 336, 1680, 6720, 20160, 40320, 40320, 0, 0),
            Tuple(1, 9, 72, 504, 3024, 15120, 60480, 181440, 362880, 362880, 0),
            Tuple(1, 10, 90, 720, 5040, 30240, 151200, 604800, 1814400, 3628800, 3628800),
    )))

make_entry(ID("55bf43"),
    Equal(Factorial(n), Product(k, For(k, 1, n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("788fa4"),
    Equal(Binomial(z, k), Product((z+1-i)/i, For(i, 1, k)), Product((z-i)/(i+1), For(i, 0, k-1))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("19f13b"),
    Equal(RisingFactorial(z, k), Product(Parentheses(z+i-1), For(i, 1, k)), Product(Parentheses(z+i), For(i, 0, k-1))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("a5852d"),
    Equal(FallingFactorial(z, k), Product(Parentheses(z-i+1), For(i, 1, k)), Product(Parentheses(z-i), For(i, 0, k-1))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("d8c274"),
    Formula(Equal(Factorial(0), 1)))

make_entry(ID("988310"),
    Formula(Equal(Binomial(n, 0), 1)),
    Variables(n),
    Assumptions(Element(n, CC)))

make_entry(ID("8c21f5"),
    Formula(Equal(Binomial(n, n), 1)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("471485"),
    Formula(Equal(Binomial(n, n+m), 0)),
    Variables(n, m),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(m, ZZGreaterEqual(1)))))

make_entry(ID("5b85bf"),
    Formula(Equal(Binomial(z, 1), z)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("1df686"),
    Formula(Equal(Binomial(z, 2), (z*(z-1))/2)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("e78084"),
    Formula(Equal(RisingFactorial(z, 0), 1)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("973b2c"),
    Formula(Equal(RisingFactorial(z, 1), z)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("0feb19"),
    Formula(Equal(RisingFactorial(1, k), Factorial(k))),
    Variables(k),
    Assumptions(Element(k, ZZGreaterEqual(0))))

make_entry(ID("5b414d"),
    Formula(Equal(FallingFactorial(z, 0), 1)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("a7b330"),
    Formula(Equal(FallingFactorial(z, 1), z)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("355c22"),
    Formula(Equal(FallingFactorial(k, k), Factorial(k))),
    Variables(k),
    Assumptions(Element(k, ZZGreaterEqual(0))))

make_entry(ID("0d92f6"),
    Formula(Equal(Binomial(2 * n, n), Factorial(2 * n) / Factorial(n)**2)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("4f20ff"),
    Formula(Equal(Factorial(n), (n) * Factorial(n-1))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("2362af"),
    Formula(Equal(Binomial(n, k), Binomial(n, n-k))),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(k, Range(0, n)))))

make_entry(ID("081188"),
    Formula(Equal(Binomial(z + 1, k + 1), Binomial(z, k) + Binomial(z, k + 1))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("209fc8"),
    Formula(Equal(Binomial(z, k + 1), ((z - k) / (k + 1)) * Binomial(z, k))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("6e1f13"),
    Formula(Equal(Binomial(z + 1, k + 1), ((z + 1) / (k + 1)) * Binomial(z, k))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("56d4ff"),
    Formula(Equal(Binomial(z, k), (-1)**k * Binomial(k-z-1, k))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("02ee06"),
    Formula(Equal(RisingFactorial(z, k + m), RisingFactorial(z, k) * RisingFactorial(z + k, m))),
    Variables(z, k, m),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)), Element(m, ZZGreaterEqual(0)))))

make_entry(ID("d651d1"),
    Formula(Equal(RisingFactorial(z, 2 * k), 4**k * RisingFactorial(z/2, k) * RisingFactorial((z+1)/2, k))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("c640bf"),
    Formula(Equal(RisingFactorial(-z, k), (-1)**k * RisingFactorial(z-k+1, k))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("41f950"),
    Formula(Equal(RisingFactorial(z + 1, k), ((z+k)/z) * RisingFactorial(z, k))),
    Variables(z, k),
    Assumptions(And(Element(z, SetMinus(CC, Set(0))), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("fe9fb7"),
    Formula(Equal(RisingFactorial(z, k + 1), (z + k) * RisingFactorial(z, k))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("62c6c9"),
    Formula(Equal(Factorial(n), Gamma(n+1))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("e87c43"),
    Formula(Equal(Binomial(z,k), Gamma(z+1) / (Gamma(k + 1) * Gamma(z - k + 1)))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)), NotElement(z-k, ZZLessEqual(-1)))))

make_entry(ID("332721"),
    Formula(Equal(Binomial(n, k), Factorial(n) / (Factorial(k) * Factorial(n-k)))),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("1d5e92"),
    Formula(Equal(Binomial(z, k), FallingFactorial(z, k) / Factorial(k))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("22ee07"),
    Formula(Equal(Binomial(z, k), RisingFactorial(z-k+1, k) / Factorial(k))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("c733f7"),
    Formula(Equal(RisingFactorial(z, k), Gamma(z+k)/Gamma(z))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)), NotElement(z+k, ZZLessEqual(0)))))

make_entry(ID("e78989"),
    Formula(Equal(RisingFactorial(z, k), FallingFactorial(z + k - 1, k))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("30652c"),
    Formula(Equal(RisingFactorial(n, k), Factorial(n+k-1)/Factorial(n-1))),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("6f7746"),
    Formula(Equal(Sum(Binomial(n, k) * x**k * y**(n-k), For(k, 0, n)), (x+y)**n)),
    Variables(x, y, n),
    Assumptions(And(Element(x, CC), Element(y, CC), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("7c014b"),
    Formula(Equal(Sum(Binomial(z, k) * x**k, For(k, 0, Infinity)), (1+x)**z)),
    Variables(z, x),
    Assumptions(And(Element(z, CC), Element(x, CC), Less(Abs(x), 1)),
                And(Element(z, ZZGreaterEqual(0)), Element(z, CC))))

make_entry(ID("858c8f"),
    Formula(Equal(Sum(Binomial(n, k), For(k, 0, n)), 2**n)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("4d1365"),
    Formula(Equal(Binomial(z, k), Sum(StirlingS1(k,i) * (z**i / Factorial(k)), For(i, 0, k)))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("65c610"),
    Formula(Equal(Exp(x+y), Sum(Sum(Binomial(n+k,k) * ((x**k * y**n) / Factorial(n+k)), For(n, 0, Infinity)), For(k, 0, Infinity)))),
    Variables(x, y),
    Assumptions(And(Element(x, CC), Element(y, CC))))

make_entry(ID("50f57e"),
    Formula(Equal(Sum(Binomial(2*n,n) * (x**n / Factorial(n)), For(n, 0, Infinity)), Exp(2*x) * BesselI(0, 2*x))),
    Variables(x),
    Assumptions(Element(x, CC)))

make_entry(ID("2b2066"),
    Formula(Equal(Sum(Binomial(2*n,n) * x**n, For(n, 0, Infinity)), 1/Sqrt(1-4*x))),
    Variables(x),
    Assumptions(And(Element(x, CC), Less(Abs(x), Div(1,4)))))

make_entry(ID("c9bcf7"),
    Formula(Equal(Sum((1/Binomial(2*n,n)) * x**n, For(n, 0, Infinity)), Hypergeometric2F1(1,1,Div(1,2),x/4),
        Where(1/(1-u) + (Sqrt(u) * Asin(Sqrt(u)))/(1-u)**Div(3,2), Equal(u, x/4)))),
    Variables(x),
    Assumptions(And(Element(x, CC), Less(Abs(x), 4))))

make_entry(ID("bb8a75"),
    Formula(LessEqual(Factorial(n), n**n)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("f9efd0"),
    Formula(Greater(Factorial(n), Exp(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(6))))

make_entry(ID("25b7bd"),
    Formula(Greater(Factorial(n), C**n)),
    Variables(C, n),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(C, OpenInterval(0, Infinity)), GreaterEqual(n, C * ConstE))))

make_entry(ID("6b3af0"),
    Formula(LessEqual(Binomial(n, k), n**k / Factorial(k))),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("001a0b"),
    Formula(GreaterEqual(Binomial(n, k), n**k / k**k)),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(k, Range(0, n)))))

make_entry(ID("5d6f99"),
    Formula(LessEqual(Binomial(n, k), (n*ConstE)**k / k**k)),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("4e7120"),
    Formula(LessEqual(Binomial(n, k), (n**n / (k**k * (n-k)**(n-k))))),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(k, Range(0, n)))))

make_entry(ID("fc8d5d"),
    Formula(Less(Factorial(n), Sqrt(2*Pi) * n**(n+Div(1,2)) * Exp(-n) * Exp(1/(12*n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))),
    References("H. Robbins (1955), A remark on Stirling's formula, Am. Math. Monthly 62(1), pp. 26-29."))

make_entry(ID("1745f5"),
    Formula(Greater(Factorial(n), Sqrt(2*Pi) * n**(n+Div(1,2)) * Exp(-n) * Exp(1/(12*n+1)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))),
    References("H. Robbins (1955), A remark on Stirling's formula, Am. Math. Monthly 62(1), pp. 26-29."))

make_entry(ID("d3baaf"),
    Formula(Less(Binomial(n, k), (1/Sqrt(2*Pi)) * Sqrt(n/(k*(n-k))) * (n**n / (k**k * (n-k)**(n-k))))),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(2)), Element(k, Range(1, n-1)))))

make_entry(ID("5f7334"),
    Formula(GreaterEqual(Binomial(n, k), (1/Sqrt(8)) * Sqrt(n/(k*(n-k))) * (n**n / (k**k * (n-k)**(n-k))))),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(2)), Element(k, Range(1, n-1)))))

make_entry(ID("433d8b"),
    Formula(Less(Binomial(2*n, n), 4**n / Sqrt(Pi * n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("fa3b53"),
    Formula(LessEqual(Binomial(n, k), 2**n)),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(k, ZZGreaterEqual(0)))))

def_Topic(
    Title("Fibonacci numbers"),
    Section("Definitions"),
    Entries(
        "fe11ce",
        "373aa1",     ),
    Section("Tables"),
    Entries(
        "b506ad",
        "5818e3",
    ),
    Section("Symmetry"),
    Entries(
        "ce6dd0",
    ),
    Section("Recurrence relations"),
    Subsection("Consecutive terms"),
    Entries(
        "22dc6e",
        "6d437c",
        "a8f2ac",
        "10165f",
    ),
    Subsection("Distant terms"),
    Entries(
        "7ef2c7",
        "cbfe21",
        "5cb57e",
        "a104b0",
        "70878b",
    ),
    Subsection("Doubling"),
    Entries(
        "35956b",
        "2ca869",
        "5745bd",
        "fc4fd1",
    ),
    Subsection("Cassini's identity and generalizations"),
    Entries(
        "073466",
        "ab563e",
        "8db61e",
        "301081",
    ),
    Section("Algebraic formulas"),
    Entries(
        "24107d",
        "050fdb",
        "ad0d7a",
    ),
    Section("Matrix formulas"),
    Entries(
        "8a548e",
        "0e2425",
        "3a9c67",
    ),
    Section("Generating functions"),
    Entries(
        "05209f",
        "d0d91a",
    ),
    Section("Sum representations"),
    Entries(
        "9638c1",
        "d7c89c",
        "b8ed8f",
    ),
    Section("Elementary functions"),
    Entries(
        "12b336",
        "fd732d",
        "bceed4",
        "c4d78a",
    ),
    Section("Chebyshev polynomials"),
    Entries(
        "aadf90",
        "223ce1",
        "ae76a3",
    ),
    Section("Hypergeometric functions"),
    Entries(
        "1c90fb",
        "90c290",
    ),
    Section("Finite sums"),
    Entries(
        "1eb5e7",
        "3bb7e4",
        "5eb446",
        "82373a",
        "ac4d13",
        "f95561",
        "d454a3",
    ),
    Section("Divisibility"),
    Entries(
        "4b3947",
        "7b0abf",
        "aaa244",
        "da45c0",
        "6db705",
        "c84407",
        "a0206a",
        "4ec333",
        "f5f706",
        "9d26d2",
    ),
    Section("Asymptotics and limits"),
    Entries(
        "0574c1",
        "fdfdcc",
        "d56025",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "f3aff5",
        "9c53d7",
        "412334",
    ),
    Section("Reciprocal series"),
    Entries(
        "ae9d30",
        "344963",
        "da1873",
        "22b67a",
        "6d8bf0",
    ),
)

make_entry(ID("fe11ce"),
    SymbolDefinition(Fibonacci, Fibonacci(n), "Fibonacci number"),
    References("http://oeis.org/A000045"))

make_entry(ID("ce6dd0"),
    Formula(Equal(Fibonacci(-n), (-1)**(n+1) * Fibonacci(n))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("b506ad"),
    Description("Table of", Fibonacci(n), "for", LessEqual(0, n, 100)),
    Table(
      Var(n),
      TableValueHeadings(n, Fibonacci(n)),
      TableSplit(2),
      List(
    Tuple(0, 0),
    Tuple(1, 1),
    Tuple(2, 1),
    Tuple(3, 2),
    Tuple(4, 3),
    Tuple(5, 5),
    Tuple(6, 8),
    Tuple(7, 13),
    Tuple(8, 21),
    Tuple(9, 34),
    Tuple(10, 55),
    Tuple(11, 89),
    Tuple(12, 144),
    Tuple(13, 233),
    Tuple(14, 377),
    Tuple(15, 610),
    Tuple(16, 987),
    Tuple(17, 1597),
    Tuple(18, 2584),
    Tuple(19, 4181),
    Tuple(20, 6765),
    Tuple(21, 10946),
    Tuple(22, 17711),
    Tuple(23, 28657),
    Tuple(24, 46368),
    Tuple(25, 75025),
    Tuple(26, 121393),
    Tuple(27, 196418),
    Tuple(28, 317811),
    Tuple(29, 514229),
    Tuple(30, 832040),
    Tuple(31, 1346269),
    Tuple(32, 2178309),
    Tuple(33, 3524578),
    Tuple(34, 5702887),
    Tuple(35, 9227465),
    Tuple(36, 14930352),
    Tuple(37, 24157817),
    Tuple(38, 39088169),
    Tuple(39, 63245986),
    Tuple(40, 102334155),
    Tuple(41, 165580141),
    Tuple(42, 267914296),
    Tuple(43, 433494437),
    Tuple(44, 701408733),
    Tuple(45, 1134903170),
    Tuple(46, 1836311903),
    Tuple(47, 2971215073),
    Tuple(48, 4807526976),
    Tuple(49, 7778742049),
    Tuple(50, 12586269025),
    Tuple(51, 20365011074),
    Tuple(52, 32951280099),
    Tuple(53, 53316291173),
    Tuple(54, 86267571272),
    Tuple(55, 139583862445),
    Tuple(56, 225851433717),
    Tuple(57, 365435296162),
    Tuple(58, 591286729879),
    Tuple(59, 956722026041),
    Tuple(60, 1548008755920),
    Tuple(61, 2504730781961),
    Tuple(62, 4052739537881),
    Tuple(63, 6557470319842),
    Tuple(64, 10610209857723),
    Tuple(65, 17167680177565),
    Tuple(66, 27777890035288),
    Tuple(67, 44945570212853),
    Tuple(68, 72723460248141),
    Tuple(69, 117669030460994),
    Tuple(70, 190392490709135),
    Tuple(71, 308061521170129),
    Tuple(72, 498454011879264),
    Tuple(73, 806515533049393),
    Tuple(74, 1304969544928657),
    Tuple(75, 2111485077978050),
    Tuple(76, 3416454622906707),
    Tuple(77, 5527939700884757),
    Tuple(78, 8944394323791464),
    Tuple(79, 14472334024676221),
    Tuple(80, 23416728348467685),
    Tuple(81, 37889062373143906),
    Tuple(82, 61305790721611591),
    Tuple(83, 99194853094755497),
    Tuple(84, 160500643816367088),
    Tuple(85, 259695496911122585),
    Tuple(86, 420196140727489673),
    Tuple(87, 679891637638612258),
    Tuple(88, 1100087778366101931),
    Tuple(89, 1779979416004714189),
    Tuple(90, 2880067194370816120),
    Tuple(91, 4660046610375530309),
    Tuple(92, 7540113804746346429),
    Tuple(93, 12200160415121876738),
    Tuple(94, 19740274219868223167),
    Tuple(95, 31940434634990099905),
    Tuple(96, 51680708854858323072),
    Tuple(97, 83621143489848422977),
    Tuple(98, 135301852344706746049),
    Tuple(99, 218922995834555169026),
    Tuple(100, 354224848179261915075),
    )))

make_entry(ID("5818e3"),
    Description("Table of", Fibonacci(10**n), "to 50 digits for", LessEqual(0, n, 20)),
    Table(
      Var(n),
      TableSplit(1),
      TableValueHeadings(n, NearestDecimal(Fibonacci(10**n), 50)),
      List(
    Tuple(0, Decimal("1")),
    Tuple(1, Decimal("55")),
    Tuple(2, Decimal("354224848179261915075")),
    Tuple(3, Decimal("4.3466557686937456435688527675040625802564660517372e+208")),
    Tuple(4, Decimal("3.3644764876431783266621612005107543310302148460680e+2089")),
    Tuple(5, Decimal("2.5974069347221724166155034021275915414880485386518e+20898")),
    Tuple(6, Decimal("1.9532821287077577316320149475962563324435429965919e+208987")),
    Tuple(7, Decimal("1.1298343782253997603170636377458663729448371904890e+2089876")),
    Tuple(8, Decimal("4.7371034734563369625489713133510386575486828937720e+20898763")),
    Tuple(9, Decimal("7.9523178745546834678293851961971481892555421852344e+208987639")),
    Tuple(10, Decimal("1.4135212296147024564096151864184089768135166603147e+2089876402")),
    Tuple(11, Decimal("4.4502906390486589597158064980525302063183707085571e+20898764024")),
    Tuple(12, Decimal("4.2584226889958835886348336943722259069350042910726e+208987640249")),
    Tuple(13, Decimal("2.7406444081225493607051434240988555526172053810282e+2089876402499")),
    Tuple(14, Decimal("3.3411188533931480763928505837976694567574715082316e+20898764024997")),
    Tuple(15, Decimal("2.4226142638072665895512781785852365306378154520894e+208987640249978")),
    Tuple(16, Decimal("9.7321259036507402774301623570261041248903959860292e+2089876402499786")),
    Tuple(17, Decimal("1.0652271003503856899342263856673297764435665668329e+20898764024997873")),
    Tuple(18, Decimal("2.6289788186792204674075064891600428077435502009263e+208987640249978733")),
    Tuple(19, Decimal("2.2041233236015343583064006979459206416375776690474e+2089876402499787337")),
    Tuple(20, Decimal("3.7820208747205569470350747417141015056709733674715e+20898764024997873376")),
    )))

make_entry(ID("22dc6e"),
    Formula(Equal(Fibonacci(n), Fibonacci(n-1) + Fibonacci(n-2))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("6d437c"),
    Formula(Equal(Fibonacci(n), Fibonacci(n+2) - Fibonacci(n+1))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("a8f2ac"),
    Formula(Equal(Fibonacci(n+1), Fibonacci(n) + Fibonacci(n-1))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("10165f"),
    Formula(Equal(Fibonacci(n+2), Fibonacci(n+1) + Fibonacci(n))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("7ef2c7"),
    Formula(Equal(Fibonacci(n), 2 * Fibonacci(n-2) + Fibonacci(n-3))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("cbfe21"),
    Formula(Equal(Fibonacci(n), 3 * Fibonacci(n-3) + 2 * Fibonacci(n-4))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("5cb57e"),
    Formula(Equal(Fibonacci(n), Fibonacci(m+1) * Fibonacci(n-m) + Fibonacci(m) * Fibonacci(n-m-1))),
    Variables(m, n),
    Assumptions(And(Element(m, ZZ), Element(n, ZZ))))

make_entry(ID("a104b0"),
    Formula(Equal(Fibonacci(m+n), Fibonacci(m) * Fibonacci(n+1) + Fibonacci(m-1) * Fibonacci(n))),
    Variables(m, n),
    Assumptions(And(Element(m, ZZ), Element(n, ZZ))))

make_entry(ID("70878b"),
    Formula(Equal(Fibonacci(m+n-1), Fibonacci(m) * Fibonacci(n) + Fibonacci(m-1) * Fibonacci(n-1))),
    Variables(m, n),
    Assumptions(And(Element(m, ZZ), Element(n, ZZ))))

make_entry(ID("35956b"),
    Formula(Equal(Fibonacci(2*n), Fibonacci(n+1)**2 - Fibonacci(n-1)**2)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("2ca869"),
    Formula(Equal(Fibonacci(2*n), (Fibonacci(n+1) + Fibonacci(n-1))*Fibonacci(n))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("5745bd"),
    Formula(Equal(Fibonacci(2*n), (Fibonacci(n+2)**2 - Fibonacci(n+1)**2 - 2*Fibonacci(n)**2))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("fc4fd1"),
    Formula(Equal(Fibonacci(2*n+1), Fibonacci(n+1)**2 + Fibonacci(n)**2)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("073466"),
    Formula(Equal(Fibonacci(n)**2, Fibonacci(n+1)*Fibonacci(n-1) - (-1)**n)),
    Description("Cassini's identity"),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("ab563e"),
    Formula(Equal(Fibonacci(n)**2, Fibonacci(n+m)*Fibonacci(n-m) + (-1)**(n+m) * Fibonacci(m)**2)),
    Description("Catalan's identity"),
    Variables(n, m),
    Assumptions(And(Element(n, ZZ), Element(m, ZZ))))

make_entry(ID("8db61e"),
    Formula(Equal(Fibonacci(n+i)*Fibonacci(n+j) - Fibonacci(n)*Fibonacci(n+i+j), (-1)**n * Fibonacci(i)*Fibonacci(j))),
    Description("Vajda's identity"),
    Variables(n, i, j),
    Assumptions(And(Element(n, ZZ), Element(i, ZZ), Element(j, ZZ))))

make_entry(ID("301081"),
    Formula(Equal(Fibonacci(m)*Fibonacci(n+1) - Fibonacci(m+1)*Fibonacci(n), (-1)**n * Fibonacci(m-n))),
    Description("d'Ocagne's identity"),
    Variables(n, m),
    Assumptions(And(Element(n, ZZ), Element(m, ZZ))))

make_entry(ID("24107d"),
    Formula(Equal(Fibonacci(n), (GoldenRatio**n - (-GoldenRatio)**(-n)) / Sqrt(5))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("050fdb"),
    Formula(Equal(Fibonacci(n), Floor(GoldenRatio**n / Sqrt(5) + Div(1,2)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("ad0d7a"),
    Formula(Equal(Fibonacci(n), (GoldenRatio**n - Cos(Pi*n) * GoldenRatio**(-n)) / Sqrt(5))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("8a548e"),
    Formula(Equal(Pow(Matrix2x2(1,1,1,0), n), Matrix2x2(Fibonacci(n+1), Fibonacci(n), Fibonacci(n), Fibonacci(n-1)))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("0e2425"),
    Formula(Equal(Matrix2x1(Fibonacci(n+1), Fibonacci(n)), Matrix2x2(1,1,1,0) * Matrix2x1(Fibonacci(n), Fibonacci(n-1)))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("3a9c67"),
    Formula(Equal(Matrix2x1(Fibonacci(n+m), Fibonacci(n+m-1)), Matrix2x2(1,1,1,0)**m * Matrix2x1(Fibonacci(n), Fibonacci(n-1)))),
    Variables(n, m),
    Assumptions(And(Element(n, ZZ), Element(m, ZZ))))

make_entry(ID("05209f"),
    Formula(Equal(Sum(Fibonacci(n) * z**n, For(n, 0, Infinity)), z/(1-z-z**2))),
    Variables(z),
    Assumptions(And(Element(z, CC), Less(Abs(z), GoldenRatio-1))))

make_entry(ID("d0d91a"),
    Formula(Equal(Sum(Fibonacci(n) * (z**n / Factorial(n)), For(n, 0, Infinity)),
        (2/Sqrt(5)) * Exp(z/2) * Sinh((Sqrt(5)/2) * z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("9638c1"),
    Formula(Equal(Fibonacci(n), Sum(Binomial(n-k-1,k), For(k, 0, n-1)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("d7c89c"),
    Formula(Equal(Fibonacci(n), Sum(Binomial(n-k-1,k), For(k, 0, Floor((n-1)/2))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("b8ed8f"),
    Formula(Equal(Fibonacci(n), (1/2**(n-1)) * Sum(5**k * Binomial(n,2*k+1), For(k, 0, Floor((n-1)/2))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("12b336"),
    Formula(Equal(Fibonacci(n), Where((Exp(n*u) - Cos(Pi*n)*Exp(-n*u))/Sqrt(5), Equal(u, Log(GoldenRatio))))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("fd732d"),
    Formula(Equal(Fibonacci(n), (2/Sqrt(5)) * Where(Cases(Tuple(Sinh(n*u), Even(n)),
            Tuple(Cosh(n*u), Odd(n))), Equal(u, Log(GoldenRatio))))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("bceed4"),
    Formula(Equal(Fibonacci(n), Where(((1+Cos(Pi*n))*Sinh(n*u) + (1-Cos(Pi*n))*Cosh(n*u)) / Sqrt(5), Equal(u, Log(GoldenRatio))))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("c4d78a"),
    Formula(Equal(Fibonacci(n), (2/Sqrt(5)) * (-ConstI)**n * Sinh(n*(Log(GoldenRatio) + Div(1,2)*Pi*ConstI)))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("aadf90"),
    Formula(Equal(Fibonacci(2*n), ChebyshevU(n-1, Div(3,2)))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("223ce1"),
    Formula(Equal(Fibonacci(2*n+1), (2/Sqrt(5)) * ChebyshevT(2*n+1, Sqrt(5)/2))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("ae76a3"),
    Formula(Equal(Fibonacci(n), ConstI**(n-1) * ChebyshevU(n-1, -(ConstI/2)))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("1c90fb"),
    Formula(Equal(Fibonacci(n), (n/2**(n-1)) * Hypergeometric2F1((1-n)/2, (2-n)/2, Div(3,2), 5))),
    Variables(n),
    Assumptions(Element(n, ZZ)),
    References("http://functions.wolfram.com/IntegerFunctions/Fibonacci/26/01/01/0007/"))

make_entry(ID("90c290"),
    Formula(Equal(Fibonacci(n), Hypergeometric2F1((1-n)/2, (2-n)/2, 1-n, -4))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("4b3947"),
    Formula(Divides(Fibonacci(d), Fibonacci(d*n))),
    Variables(d, n),
    Assumptions(And(Element(d, SetMinus(ZZ, Set(0))), Element(n, ZZ))))

make_entry(ID("7b0abf"),
    Formula(Equal(GCD(Fibonacci(n), Fibonacci(n+1)), 1)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("aaa244"),
    Formula(Equal(GCD(Fibonacci(n), Fibonacci(n+2)), 1)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("6db705"),
    Formula(Divides(p, Fibonacci(p - KroneckerSymbol(p, 5)))),
    Variables(p),
    Assumptions(Element(p, PP)))

make_entry(ID("c84407"),
    Formula(CongruentMod(Fibonacci(p), KroneckerSymbol(p, 5), p)),
    Variables(p),
    Assumptions(Element(p, PP)))

make_entry(ID("a0206a"),
    Formula(Equivalent(Element(x, Set(Fibonacci(n), ForElement(n, ZZGreaterEqual(0)))),
        Or(Element(Sqrt(5*x**2+4), ZZ), Element(Sqrt(5*x**2-4), ZZ)))),
    Variables(x),
    Assumptions(Element(x, ZZGreaterEqual(0))))

make_entry(ID("4ec333"),
    Formula(Equal(Cardinality(Set(k, For(k), And(Element(k, ZZ), Divides(n, Fibonacci(k))))), Cardinality(ZZ))),
    Variables(n),
    Assumptions(Element(n, SetMinus(ZZ, Set(0)))))

make_entry(ID("f5f706"),
    Formula(CongruentMod(Fibonacci(n+60), Fibonacci(n), 10)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("9d26d2"),
    Formula(Equal(Set(Fibonacci(n), For(n), And(Element(n, ZZGreaterEqual(0)), Element(Sqrt(Fibonacci(n)), ZZ))),
        Set(Fibonacci(0), Fibonacci(1), Fibonacci(2), Fibonacci(12)), Set(0, 1, 144))))

make_entry(ID("1eb5e7"),
    Formula(Equal(Sum(Fibonacci(k), For(k, 0, n)), Fibonacci(n+2)-1)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("3bb7e4"),
    Formula(Equal(Sum(Fibonacci(2*k), For(k, 0, n)), Fibonacci(2*n+1)-1)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("5eb446"),
    Formula(Equal(Sum(Fibonacci(2*k+1), For(k, 0, n)), Fibonacci(2*n+2))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("82373a"),
    Formula(Equal(Sum(Fibonacci(k)**2, For(k, 0, n)), Fibonacci(n)*Fibonacci(n+1))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("ac4d13"),
    Formula(Equal(Sum(Binomial(n,k) * Fibonacci(k), For(k, 0, n)), Fibonacci(2*n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("f95561"),
    Formula(Equal(Sum((-1)**(k+1) * Binomial(n,k) * Fibonacci(k), For(k, 0, n)), Fibonacci(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("d454a3"),
    Formula(Equal(Sum(Binomial(n,k) * 2**k * Fibonacci(k), For(k, 0, n)), Fibonacci(3*n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("0574c1"),
    Formula(AsymptoticTo(Fibonacci(n), GoldenRatio**n / Sqrt(5), n, Infinity)))

make_entry(ID("fdfdcc"),
    Formula(Equal(SequenceLimit(Fibonacci(n+1)/Fibonacci(n), For(n, Infinity)), GoldenRatio)))

make_entry(ID("d56025"),
    Formula(Equal(SequenceLimit(Fibonacci(n+m)/Fibonacci(n), For(n, Infinity)), GoldenRatio**m)),
    Variables(m),
    Assumptions(Element(m, ZZ)))

make_entry(ID("f3aff5"),
    Formula(Less(Fibonacci(n), (GoldenRatio**n + 1)/Sqrt(5))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("9c53d7"),
    Formula(Greater(Fibonacci(n), (GoldenRatio**n - 1)/Sqrt(5))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("412334"),
    Formula(Less(Fibonacci(2*n), Fibonacci(n+1)**2, Fibonacci(2*n+1))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(2))))

make_entry(ID("ae9d30"),
    Formula(Equal(Sum(1/(Fibonacci(2*n+1)+1), For(n, 0, Infinity)),
        Sqrt(5)/2)),
    References("J. M. Borwein and P. B. Borwein. Pi and the AGM. Wiley, New York, 1987."))

make_entry(ID("344963"),
    Formula(Equal(Sum((-1)**(n+1)/(Fibonacci(n)*Fibonacci(n+1)), For(n, 1, Infinity)),
        (Sqrt(5)-1)/2)),
    References("J. M. Borwein and P. B. Borwein. Pi and the AGM. Wiley, New York, 1987."))

make_entry(ID("da1873"),
    Formula(Equal(Sum(1/Fibonacci(2*n+1), For(n, 0, Infinity)),
        Where((Sqrt(5)/4) * JacobiTheta(2,0, tau)**2, Equal(tau, (1/(Pi*ConstI)) * Log((3-Sqrt(5))/2))))),
    References("J. M. Borwein and P. B. Borwein. Pi and the AGM. Wiley, New York, 1987."))

make_entry(ID("22b67a"),
    Formula(Equal(Sum(1/Fibonacci(n)**2, For(n, 1, Infinity)),
        Where(Div(5,24) * (JacobiTheta(2,0, tau)**4 - JacobiTheta(4,0, tau)**4 + 1), Equal(tau, (1/(Pi*ConstI)) * Log((3-Sqrt(5))/2))))),
    References("J. M. Borwein and P. B. Borwein. Pi and the AGM. Wiley, New York, 1987."))

make_entry(ID("6d8bf0"),
    Formula(Equal(Sum(1/Fibonacci(2**n), For(n, 0, Infinity)),
        (7-Sqrt(5))/2)),
    References("J. M. Borwein and P. B. Borwein. Pi and the AGM. Wiley, New York, 1987."))

def_Topic(
    Title("Gamma function"),
    Section("Definitions"),
    Entries(
        "09e2ed",
        "c6038c",
    ),
    Section("Illustrations"),
    Entries(
        "7ddf69",
        "aa967b",
        "b0f293",
        "c7d4c2",
    ),
    Section("Particular values"),
    Entries(
        "f1d31a",
        "e68d11",
        "19d480",
        "f826a6",
        "48ac55",
    ),
    Section("Functional equations"),
    Entries(
        "78f1f4",
        "639d91",
        "14af98",
        "56d710",
        "b510b6",
        "a787eb",
        "90a1e1",
        "a26ac7",
        "774d37",
    ),
    Section("Integral representations"),
    Entries(
        "4e4e0f",
    ),
    Section("Series expansions"),
    Entries(
        "661054",
        "37a95a",
        "8cf1fd",
        "53a2a1",
        "6d0a95",
    ),
    Section("Analytic properties"),
    Entries(
        "798c5d",
        "2870f0",
        "34d6ae",
        "d086bd",
        "9a44c5",
        "a76328",
    ),
    Section("Complex parts"),
    Entries(
        "d7d2a0",
    ),
    Section("Bounds and inequalities"),
    SeeTopics("Bounds and inequalities for the gamma function"),
    Entries(
        "a0ca3e",
        "b7fec0",
    ),
    Section("Representation of other functions"),
    Subsection("Factorials and binomial coefficients"),
    Entries(
        "62c6c9",         "e87c43",         "c733f7",     ),
    Subsection("Beta function"),
    Entries(
        "888581",     ),
    Subsection("Elementary functions"),
    Entries(
        "d38a03",         "b7a578",
        "ee56b9",
        "d16cb4",
        "6430cc",
    ),
)

make_entry(ID("09e2ed"),
    SymbolDefinition(Gamma, Gamma(z), "Gamma function"),
    Description("The gamma function", Gamma(z), "is a function of one complex variable", z,
        ". It is a meromorphic function with simple poles at the nonpositive integers and no zeros.",
        "It can be defined by the integral representation", EntryReference("4e4e0f"),
        "in the right half-plane, together with the functional equation", EntryReference("78f1f4"), "for analytic continuation.",
        "The following table lists all conditions such that", SourceForm(Gamma(z)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(Element(z, ZZGreaterEqual(1)), Element(Gamma(z), ZZGreaterEqual(1))),
        Tuple(Element(z, OpenInterval(0, Infinity)), Element(Gamma(z), OpenInterval(Decimal("0.8856"), Infinity))),
        Tuple(Element(z, SetMinus(RR, ZZLessEqual(0))), Element(Gamma(z), SetMinus(RR, Set(0)))),
        Tuple(Element(z, SetMinus(CC, ZZLessEqual(0))), Element(Gamma(z), SetMinus(CC, Set(0)))),
        TableSection("Infinities"),
        Tuple(Element(z, ZZLessEqual(0)), Element(Gamma(z), Set(UnsignedInfinity))),
        Tuple(Element(z, Set(Infinity)), Element(Gamma(z), Set(Infinity))),
        Tuple(Element(z, Set(ConstI*Infinity, -(ConstI*Infinity))), Element(Gamma(z), Set(0))),
        TableSection("Formal power series"),
        Tuple(And(Element(z, PowerSeries(RR, x)), NotElement(SeriesCoefficient(z, x, 0), ZZLessEqual(0))),
            And(Element(Gamma(z), PowerSeries(RR, x)), NotEqual(SeriesCoefficient(Gamma(z), x, 0), 0))),
        Tuple(And(Element(z, PowerSeries(CC, x)), NotElement(SeriesCoefficient(z, x, 0), ZZLessEqual(0))),
            And(Element(Gamma(z), PowerSeries(CC, x)), NotEqual(SeriesCoefficient(Gamma(z), x, 0), 0))),
        Tuple(And(Element(z, PowerSeries(RR, x)), NotElement(z, ZZLessEqual(0))),
            Element(Gamma(z), LaurentSeries(RR, x))),
        Tuple(And(Element(z, PowerSeries(CC, x)), NotElement(z, ZZLessEqual(0))),
            Element(Gamma(z), LaurentSeries(CC, x))),
      )),
    )

make_entry(ID("c6038c"),
    SymbolDefinition(LogGamma, LogGamma(z), "Logarithmic gamma function"),
    Description("The logarithmic gamma function", LogGamma(z), "is a function of one complex variable", z, ".",
        "It satisfies", Equal(LogGamma(x), Log(Gamma(x))), "for real", Greater(x, 0), "and is defined on the complex plane",
        "through analytic continuation, with branch cuts on", OpenClosedInterval(-Infinity, 0), ".",
        "An explicit construction uses", EntryReference("37a95a"), "combined with", EntryReference("774d37"), "for analytic continuation.",
        "In general,", NotEqual(LogGamma(z), Log(Gamma(z))), " as the latter has an infinite set of branch cuts off the real line.",
        "The following table lists all conditions such that", SourceForm(LogGamma(z)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(Element(z, OpenInterval(0, Infinity)), Element(LogGamma(z), OpenInterval(Decimal("-0.1215"), Infinity))),
        Tuple(Element(z, SetMinus(CC, ZZLessEqual(0))), Element(LogGamma(z), CC)),
        TableSection("Infinities"),
        Tuple(Element(z, Set(Infinity)), Element(LogGamma(z), Set(Infinity))),
        TableSection("Formal power series"),
        Tuple(And(Element(z, PowerSeries(RR, x)), Greater(SeriesCoefficient(z, x, 0), 0)),
            And(Element(LogGamma(z), PowerSeries(RR, x)))),
        Tuple(And(Element(z, PowerSeries(CC, x)), NotElement(SeriesCoefficient(z, x, 0), ZZLessEqual(0))),
            And(Element(LogGamma(z), PowerSeries(CC, x)))),
      )),
    )

make_entry(ID("7ddf69"),
    Image(Description("Plot of", Gamma(x), "on", Element(x, ClosedInterval(-4,4))),
        ImageSource("plot_gamma"))
    )

make_entry(ID("aa967b"),
    Image(Description("Plot of", LogGamma(x), "on", Element(x, ClosedInterval(-4,4))),
        ImageSource("plot_log_gamma"))
    )

make_entry(ID("b0f293"),
    Image(Description("X-ray of", Gamma(z), "on", Element(z, ClosedInterval(-5,5) + ClosedInterval(-5,5)*ConstI)),
        ImageSource("xray_gamma")),
    description_xray,
    )

make_entry(ID("c7d4c2"),
    Image(Description("X-ray of", LogGamma(z), "on", Element(z, ClosedInterval(-5,5) + ClosedInterval(-5,5)*ConstI)),
        ImageSource("xray_log_gamma")),
    description_xray,
    )

Gamma_domain = SetMinus(CC, ZZLessEqual(0))

Gamma_sub1_domain = SetMinus(CC, ZZLessEqual(1))

make_entry(ID("f1d31a"),
    Formula(Equal(Gamma(n), Factorial(n-1))),
    Variables(n),
    Assumptions(Element(n, Gamma_domain)))

make_entry(ID("e68d11"),
    Formula(Equal(Gamma(1), 1)))

make_entry(ID("19d480"),
    Formula(Equal(Gamma(2), 1)))

make_entry(ID("f826a6"),
    Formula(Equal(Gamma(Div(1,2)), Sqrt(Pi))))

make_entry(ID("48ac55"),
    Formula(Equal(Gamma(Div(3,2)), Sqrt(Pi)/2)))

make_entry(ID("78f1f4"),
    Formula(Equal(Gamma(z+1), z * Gamma(z))),
    Variables(z),
    Assumptions(Element(z, Gamma_domain)))

make_entry(ID("639d91"),
    Formula(Equal(Gamma(z), (z-1) * Gamma(z-1))),
    Variables(z),
    Assumptions(Element(z, Gamma_sub1_domain)))

make_entry(ID("14af98"),
    Formula(Equal(Gamma(z-1), Gamma(z) / (z-1))),
    Variables(z),
    Assumptions(Element(z, Gamma_sub1_domain)))

make_entry(ID("56d710"),
    Formula(Equal(Gamma(z+n), RisingFactorial(z, n) * Gamma(z))),
    Variables(z, n),
    Assumptions(And(Element(z, Gamma_domain), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("b510b6"),
    Formula(Equal(Gamma(z), (Pi/Sin(Pi*z)) * (1/Gamma(1-z)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, ZZ))))

make_entry(ID("a787eb"),
    Formula(Equal(Gamma(z) * Gamma(z+Div(1,2)), 2**(1-2*z) * Sqrt(Pi) * Gamma(2*z))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(2*z, ZZLessEqual(0)))))

make_entry(ID("90a1e1"),
    Formula(Equal(Product(Gamma(z+Div(k,m)), For(k, 0, m-1)), (2*Pi)**((m-1)/2) * m**(Div(1,2)-m*z) * Gamma(m*z))),
    Variables(z, m),
    Assumptions(And(Element(z, CC), Element(m, ZZGreaterEqual(1)), NotElement(m*z, ZZLessEqual(0)))))

make_entry(ID("a26ac7"),
    Formula(Equal(Gamma(z), Exp(LogGamma(z)))),
    Variables(z),
    Assumptions(And(Element(z, Gamma_domain))))

make_entry(ID("774d37"),
    Formula(Equal(LogGamma(z+1), LogGamma(z) + Log(z))),
    Variables(z),
    Assumptions(And(Element(z, Gamma_domain))))

make_entry(ID("4e4e0f"),
    Formula(Equal(Gamma(z), Integral(t**(z-1) * Exp(-t), For(t, 0, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Greater(Re(z), 0))))

make_entry(ID("661054"),
    Formula(Equal(LogGamma(1+z), -(ConstGamma*z) + Sum(RiemannZeta(k)/k * (-z)**k, For(k, 2, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Less(Abs(z), 1))))

make_entry(ID("37a95a"),
    Formula(Equal(LogGamma(z), (z-Div(1,2))*Log(z) - z + Log(2*Pi)/2
        + Sum(BernoulliB(2*k)/(2*k*(2*k-1)*z**(2*k-1)), For(k, 1, n-1)) + StirlingSeriesRemainder(n, z))),
    Variables(z, n),
    Assumptions(And(Element(z, CC), NotElement(z, OpenClosedInterval(-Infinity, 0)), Element(n, ZZGreaterEqual(1)))))

make_entry(ID("8cf1fd"),
    SymbolDefinition(StirlingSeriesRemainder, StirlingSeriesRemainder(n, z), "Remainder term in the Stirling series for the logarithmic gamma function"))

make_entry(ID("53a2a1"),
    Formula(Equal(StirlingSeriesRemainder(n, z), Integral((BernoulliB(2*n) - BernoulliPolynomial(2*n, t-Floor(t)))/(2*n*(z+t)**(2*n)), For(t, 0, Infinity)))),
    Variables(z, n),
    Assumptions(And(Element(z, CC), NotElement(z, OpenClosedInterval(-Infinity, 0)), Element(n, ZZGreaterEqual(1)))))

make_entry(ID("6d0a95"),
    Formula(Equal(Gamma(z), (2*Pi)**Div(1,2) * z**(z-Div(1,2)) * Exp(-z) * Exp(Sum((z+n-Div(1,2))*Log((z+n)/(z+n-1))-1, For(n, 1, Infinity))))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, OpenClosedInterval(-Infinity, 0)))),
    References("B. C. Carlson (1977), Special functions of applied mathematics, Academic Press. Proposition 3.8-1."))

make_entry(ID("798c5d"),
    Formula(IsHolomorphic(Gamma(z), ForElement(z, Gamma_domain))))

make_entry(ID("2870f0"),
    Formula(Equal(Poles(Gamma(z), ForElement(z, Union(CC, Set(UnsignedInfinity)))), ZZLessEqual(0))))

make_entry(ID("34d6ae"),
    Formula(Equal(EssentialSingularities(Gamma(z), z, Union(CC, Set(UnsignedInfinity))), Set(UnsignedInfinity))))

make_entry(ID("d086bd"),
    Formula(Equal(BranchPoints(Gamma(z), z, Union(CC, Set(UnsignedInfinity))), Set())))

make_entry(ID("9a44c5"),
    Formula(Equal(BranchCuts(Gamma(z), z, CC), Set())))

make_entry(ID("a76328"),
    Formula(Equal(Zeros(Gamma(z), ForElement(z, CC)), Set())))

make_entry(ID("d7d2a0"),
    Formula(Equal(Gamma(Conjugate(z)), Conjugate(Gamma(z)))),
    Variables(z),
    Assumptions(Element(z, Gamma_domain)))

make_entry(ID("ee56b9"),
    Formula(Equal(Tan(Pi*z), (Gamma(Div(1,2)+z) * Gamma(Div(1,2)-z)) / (Gamma(z)*Gamma(1-z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("b7a578"),
    Formula(Equal(Cos(Pi * z), Pi / (Gamma(Div(1,2)+z) * Gamma(Div(1,2)-z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("d16cb4"),
    Formula(Equal(Sinc(Pi * z), 1 / (Gamma(1+z) * Gamma(1-z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("6430cc"),
    Formula(Equal(Exp(Pi * z), Pi * (1/(Gamma(Div(1,2)+ConstI*z) * Gamma(Div(1,2)-ConstI*z)) + z/(Gamma(1+ConstI*z)*Gamma(1-ConstI*z))))),
    Variables(z),
    Assumptions(Element(z, CC)))

def_Topic(
    Title("Bounds and inequalities for the gamma function"),
    SeeTopics("Gamma function"),
    Section("Real argument"),
    Entries(
        "1bbbc7",
        "e010c9",
        "b05f2b",
        "2a47d7",
        "a0ca3e",
        "2398a1",
        "99a9c6",
    ),
    Section("Complex argument"),
    Entries(
        "f50ec9",
        "143002",
        "b7fec0",
        "80f7dc",
        "931d89",
        "1976db",
        "c7b921",
        "94db60",
        "513a30",
        "4a2ac8",
        "dd5e3a",
        "e0b322",
        "7af1b9",
        "06260c",
    ),
    Section("Derivatives"),
    Entries(
        "cb5071",
    ),
)

make_entry(ID("1bbbc7"),
    Formula(Element(ArgMinUnique(Gamma(x), ForElement(x, OpenInterval(0, Infinity))), RealBall(Decimal("1.46163214496836234126265954233"), Decimal("4.28e-30")))))

make_entry(ID("e010c9"),
    Formula(Element(Minimum(Gamma(x), ForElement(x, OpenInterval(0, Infinity))), RealBall(Decimal("0.885603194410888700278815900583"), Decimal("4.12e-31")))))

make_entry(ID("b05f2b"),
    Formula(Element(Minimum(LogGamma(x), ForElement(x, OpenInterval(0, Infinity))), RealBall(Decimal("-0.121486290535849608095514557178"), Decimal("3.09e-31")))))

make_entry(ID("2a47d7"),
    Formula(Greater(Gamma(x), (2*Pi)**Div(1,2) * x**(x-Div(1,2)) * Exp(-x))),
    Variables(x),
    Assumptions(Element(x, OpenInterval(0, Infinity))))

make_entry(ID("a0ca3e"),
    Formula(Less(Gamma(x), (2*Pi)**Div(1,2) * x**(x-Div(1,2)) * Exp(-x) * Exp(1/(12*x)))),
    Variables(x),
    Assumptions(Element(x, OpenInterval(0, Infinity))))

make_entry(ID("2398a1"),
    Formula(Greater(LogGamma(x), (x-Div(1,2))*Log(x)-x+Log(2*Pi)/2 + Sum(BernoulliB(2*k)/(2*k*(2*k-1)*x**(2*k-1)), For(k, 1, 2*n)))),
    Variables(x, n),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(n, ZZGreaterEqual(0)))),
    References("H. Alzer, On some inequalities for the gamma and psi functions, Math. Comp. 66(217), pp. 373-389. Theorem 8."))

make_entry(ID("99a9c6"),
    Formula(Less(LogGamma(x), (x-Div(1,2))*Log(x)-x+Log(2*Pi)/2 + Sum(BernoulliB(2*k)/(2*k*(2*k-1)*x**(2*k-1)), For(k, 1, 2*n+1)))),
    Variables(x, n),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(n, ZZGreaterEqual(0)))),
    References("H. Alzer, On some inequalities for the gamma and psi functions, Math. Comp. 66(217), pp. 373-389. Theorem 8."))

make_entry(ID("f50ec9"),
    Formula(Greater(Abs(Gamma(z)), 0)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("143002"),
    Formula(Less(Abs(1/Gamma(z)), Infinity)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("b7fec0"),
    Formula(Where(LessEqual(Abs(Gamma(z)), (2*Pi)**Div(1,2) * Abs(z)**(x-Div(1,2)) * Exp(-(Pi*Abs(y)/2)) * Exp(Div(1,6*Abs(z)))), Equal(z, x+y*ConstI))),
    Variables(x, y),
    Assumptions(And(Element(x, ClosedOpenInterval(0, Infinity)), Element(y, RR), NotEqual(x+y*ConstI, 0))),
    References("R. B. Paris and D. Kaminski (2001), Asymptotics of Mellin-Barnes integrals, Cambridge University Press. (2.1.19), p. 34."))

make_entry(ID("80f7dc"),
    Formula(LessEqual(Abs(Gamma(z)), (2*Pi)**Div(1,2) * Abs(z**(z-Div(1,2)) * Exp(-z)) * Exp(Div(1,6*Abs(z))))),
    Variables(z),
    Assumptions(And(Element(z, CC), GreaterEqual(Re(z), 0), NotEqual(z, 0))),
    References("R. B. Paris and D. Kaminski (2001), Asymptotics of Mellin-Barnes integrals, Cambridge University Press. (2.1.18), p. 34."))

make_entry(ID("931d89"),
    Formula(GreaterEqual(Abs(Gamma(z)), (2*Pi)**Div(1,2) * Abs(z**(z-Div(1,2)) * Exp(-z)) * Exp(-Div(1,6*Abs(z))))),
    Variables(z),
    Assumptions(And(Element(z, CC), GreaterEqual(Re(z), 0), NotEqual(z, 0))))

make_entry(ID("1976db"),
    Formula(Equal(Abs(Gamma(y*ConstI)), Sqrt(Pi/(y*Sinh(Pi*y))))),
    Variables(y),
    Assumptions(Element(y, SetMinus(RR, Set(0)))))

make_entry(ID("c7b921"),
    Formula(Equal(Abs(Gamma(Div(1,2)+y*ConstI)), Sqrt(Pi/(Cosh(Pi*y))))),
    Variables(y),
    Assumptions(Element(y, RR)))

make_entry(ID("94db60"),
    Formula(Equal(Abs(Gamma(1+y*ConstI)), Sqrt((Pi*y/(Sinh(Pi*y)))))),
    Variables(y),
    Assumptions(Element(y, SetMinus(RR, Set(0)))))

make_entry(ID("513a30"),
    Formula(Equal(Abs(Gamma(x+y*ConstI)), Abs(Gamma(x)) * Product((1+y**2/(x+k)**2)**(-Div(1,2)), For(k, 0, Infinity)))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR), NotElement(x+y*ConstI, ZZLessEqual(0)))),
    References("Abramowitz & Stegun 6.1.25"))

make_entry(ID("4a2ac8"),
    Formula(LessEqual(Abs(Gamma(x+y*ConstI)), Abs(Gamma(x)))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))),
    References("B. C. Carlson (1977), Special functions of applied mathematics, Academic Press. Inequality 3.10-3."))

make_entry(ID("dd5e3a"),
    Formula(Less(Abs(Gamma(x+y*ConstI)), Abs(Gamma(x+t*ConstI)))),
    Variables(x, y, t),
    Assumptions(And(Element(x, RR), Element(y, RR), Element(t, RR), Greater(Abs(y), Abs(t)))))

make_entry(ID("e0b322"),
    Formula(GreaterEqual(Abs(Gamma(x+y*ConstI)), Gamma(x) / Sqrt(Cosh(Pi*y)))),
    Variables(x, y),
    Assumptions(And(Element(x, ClosedOpenInterval(Div(1,2),Infinity)), Element(y, RR))),
    References("B. C. Carlson (1977), Special functions of applied mathematics, Academic Press. Inequality 3.10-4."))

make_entry(ID("7af1b9"),
    Formula(GreaterEqual(Abs(Gamma(x+y*ConstI)), Gamma(x) * Exp(-(Pi*Abs(y)/2)))),
    Variables(x, y),
    Assumptions(And(Element(x, ClosedOpenInterval(Div(1,2),Infinity)), Element(y, RR))),
    References("B. C. Carlson (1977), Special functions of applied mathematics, Academic Press. Inequality 3.10-4."))

make_entry(ID("06260c"),
    Formula(LessEqual(Abs(1/Gamma(z)), Where(Exp(Pi*R/2) * R**(R+Div(1,2)), Equal(R, Abs(z))))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("cb5071"),
    Formula(LessEqual(Abs((1/Factorial(n)) * ComplexDerivative(1/Gamma(x), For(x, 0, n))), 2/Sqrt(Factorial(n)))),
        Variables(n),
    Assumptions(And(Element(n, ZZGreaterEqual(0)))),
    References("L. Fekih-Ahmed, On the Power Series Expansion of the Reciprocal Gamma Function, https://arxiv.org/abs/1407.5983 (simplified version of (1.5))"))

def_Topic(
    Title("Gauss hypergeometric function"),
    Entries(
        "e03016",
        "c43abd",
    ),
    Section("Hypergeometric series"),
    Entries(
        "ad8db2",
        "306ef7",
        "fe6e74",
        "65693e",
    ),
    Section("Differential equations"),
    Entries(
        "f1bd89",
    ),
    Section("Specific values"),
    Entries(
        "18d955",
        "659ce8",
        "a85994",
        "20bf69",
    ),
    Section("Symmetries"),
    Entries(
        "0e0393",
        "3d6d7e",
    ),
    Section("Linear fractional transformations"),
    Entries(
        "651a4a",
        "b25089",
        "504717",
        "90ac58",
        "27bc34",
        "db3eb9",
        "ca9123",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "c60679",
        "853a62",
    ),
)

make_entry(ID("e03016"),
    SymbolDefinition(Hypergeometric2F1, Hypergeometric2F1(a,b,c,z), "Gauss hypergeometric function"))

make_entry(ID("c43abd"),
    SymbolDefinition(Hypergeometric2F1Regularized, Hypergeometric2F1Regularized(a,b,c,z), "Regularized Gauss hypergeometric function"))

make_entry(ID("ad8db2"),
    Formula(Equal(Hypergeometric2F1(a,b,c,z), Sum((RisingFactorial(a,k) * RisingFactorial(b,k) / RisingFactorial(c,k)) * (z**k / Factorial(k)), For(k, 0, Infinity)))),
    Variables(a,b,c,z),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(c, SetMinus(CC, ZZLessEqual(0))), Element(z,CC), Or(Less(Abs(z), 1), Element(a, ZZLessEqual(0)), Element(b, ZZLessEqual(0))))))

make_entry(ID("306ef7"),
    Formula(Equal(Hypergeometric2F1Regularized(a,b,c,z), Sum((RisingFactorial(a,k) * RisingFactorial(b,k) / Gamma(c+k)) * (z**k / Factorial(k)), For(k, 0, Infinity)))),
    Variables(a,b,c,z),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(c, CC), Element(z,CC), Or(Less(Abs(z), 1), Element(a, ZZLessEqual(0)), Element(b, ZZLessEqual(0)), Element(c, ZZLessEqual(0))))))

make_entry(ID("fe6e74"),
    Formula(Equal(Hypergeometric2F1Regularized(a,b,c,z), Hypergeometric2F1(a,b,c,z) / Gamma(c))),
    Variables(a,b,c,z),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(c, SetMinus(CC, ZZLessEqual(0))), Element(z,CC))))

make_entry(ID("65693e"),
    Formula(Equal(Hypergeometric2F1Regularized(a,b,-n,z),
        (RisingFactorial(a,n+1) * RisingFactorial(b,n+1) * z**(n+1) / Factorial(n+1)) * Hypergeometric2F1(a+n+1,b+n+1,n+2,z))),
    Variables(a,b,n,z),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(n, ZZGreaterEqual(0)), Element(z,SetMinus(CC, Set(1))))))

make_entry(ID("f1bd89"),
    Formula(Where(Equal(z*(1-z) * ComplexDerivative(y(z), For(z, z, 2)) + (c - (a+b+1)*z)*ComplexDerivative(y(z), For(z, z, 1)) - a*b*y(z), 0),
        Equal(y(z), Hypergeometric2F1(a,b,c,z)))),
    Variables(a, b, c, z),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(c, SetMinus(CC, ZZLessEqual(0))), Element(z, SetMinus(CC, ClosedOpenInterval(1, Infinity))))))

make_entry(ID("18d955"),
    Formula(Equal(Hypergeometric2F1(a,b,c,0), 1)),
    Variables(a,b,c),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(c, SetMinus(CC, ZZLessEqual(0))))))

make_entry(ID("659ce8"),
    Formula(Equal(Hypergeometric2F1(a,b,c,1), (Gamma(c)*Gamma(c-a-b))/(Gamma(c-a)*Gamma(c-b)))),
    Variables(a,b,c),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(c, SetMinus(CC, ZZLessEqual(0))), Greater(Re(c-a-b), 0))))

make_entry(ID("a85994"),
    Formula(Equal(Hypergeometric2F1(1,1,2,z), -(Log(1-z)/z))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0, 1)))))

make_entry(ID("20bf69"),
    Formula(Equal(Hypergeometric2F1(a,b,b,z), (1-z)**(-a))),
    Variables(a, b, z),
    Assumptions(And(Element(a, CC), Element(b, SetMinus(CC, ZZLessEqual(0))), Element(z, SetMinus(CC, Set(0, 1))))))

make_entry(ID("0e0393"),
    Formula(Equal(Hypergeometric2F1(a,b,c,z), Hypergeometric2F1(b,a,c,z))),
    Variables(a,b,c,z),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(c, SetMinus(CC, ZZLessEqual(0))), Element(z, CC))))

make_entry(ID("3d6d7e"),
    Formula(Equal(Hypergeometric2F1(a,b,c,z), Conjugate(Hypergeometric2F1(Conjugate(a),Conjugate(b),Conjugate(c),Conjugate(z))))),
    Variables(a,b,c,z),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(c, SetMinus(CC, ZZLessEqual(0))), Element(z, SetMinus(CC, ClosedOpenInterval(1, Infinity))))))

make_entry(ID("651a4a"),
    Formula(Equal(Hypergeometric2F1Regularized(a,b,c,z),
        (1-z)**(c-a-b) * Hypergeometric2F1Regularized(c-a, c-b, c, z))),
    Variables(a,b,c,z),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(c, CC), Element(z,CC), NotEqual(z, 1))))

make_entry(ID("b25089"),
    Formula(Equal(Hypergeometric2F1Regularized(a,b,c,z),
        (1-z)**(-a) * Hypergeometric2F1Regularized(a, c-b, c, z/(z-1)))),
    Variables(a,b,c,z),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(c, CC), Element(z,CC), NotElement(z, ClosedOpenInterval(1, Infinity)))))

make_entry(ID("504717"),
    Formula(Equal(Hypergeometric2F1Regularized(a,b,c,z),
        (1-z)**(-b) * Hypergeometric2F1Regularized(c-a, b, c, z/(z-1)))),
    Variables(a,b,c,z),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(c, CC), Element(z,CC), NotElement(z, ClosedOpenInterval(1, Infinity)))))

make_entry(ID("90ac58"),
    Formula(Equal((Sin(Pi * (b-a)) / Pi) * Hypergeometric2F1Regularized(a,b,c,z),
        ((-z)**(-a) / (Gamma(b) * Gamma(c-a))) * Hypergeometric2F1Regularized(a, a-c+1, a-b+1, 1/z) - 
        ((-z)**(-b) / (Gamma(a) * Gamma(c-b))) * Hypergeometric2F1Regularized(b, b-c+1, b-a+1, 1/z))),
    Variables(a,b,c,z),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(c, CC), Element(z,CC), NotElement(z, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("27bc34"),
    Formula(Equal((Sin(Pi * (b-a)) / Pi) * Hypergeometric2F1Regularized(a,b,c,z),
        ((1-z)**(-a) / (Gamma(b) * Gamma(c-a))) * Hypergeometric2F1Regularized(a, c-b, a-b+1, 1/(1-z)) - 
        ((1-z)**(-b) / (Gamma(a) * Gamma(c-b))) * Hypergeometric2F1Regularized(b, c-a, b-a+1, 1/(1-z)))),
    Variables(a,b,c,z),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(c, CC), Element(z,CC), NotElement(z, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("db3eb9"),
    Formula(Equal((Sin(Pi * (c-a-b)) / Pi) * Hypergeometric2F1Regularized(a,b,c,z),
        (1 / (Gamma(c-a) * Gamma(c-b))) * Hypergeometric2F1Regularized(a, b, a+b-c+1, 1-z) - 
        ((1-z)**(c-a-b) / (Gamma(a) * Gamma(b))) * Hypergeometric2F1Regularized(c-a, c-b, c-a-b+1, 1-z))),
    Variables(a,b,c,z),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(c, CC), Element(z,CC), NotElement(z, OpenClosedInterval(-Infinity, 0)), NotElement(z, ClosedOpenInterval(1, Infinity)))))

make_entry(ID("ca9123"),
    Formula(Equal((Sin(Pi * (c-a-b)) / Pi) * Hypergeometric2F1Regularized(a,b,c,z),
        (z**(-a) / (Gamma(c-a) * Gamma(c-b))) * Hypergeometric2F1Regularized(a, a-c+1, a+b-c+1, 1-1/z) - 
        ((z**(a-c) * (1-z)**(c-a-b)) / (Gamma(a) * Gamma(b))) * Hypergeometric2F1Regularized(c-a, 1-a, c-a-b+1, 1-1/z))),
    Variables(a,b,c,z),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(c, CC), Element(z,CC), NotElement(z, OpenClosedInterval(-Infinity, 0)), NotElement(z, ClosedOpenInterval(1, Infinity)))))

make_entry(ID("c60679"),
    Formula(Where(LessEqual(Abs(Hypergeometric2F1(a,b,c,z) - Sum((RisingFactorial(a,k) * RisingFactorial(b,k) / RisingFactorial(c,k)) * (z**k / Factorial(k)), For(k, 0, N-1))),
        Abs((RisingFactorial(a,N) * RisingFactorial(b,N) / RisingFactorial(c,N)) * (z**N / Factorial(N))) * Cases(Tuple(1/(1-D), Less(D, 1)), Tuple(Infinity, Otherwise))),
            Equal(D, Abs(z) * (1 + Abs(a-c)/Abs(c+N)) * (1 + Abs(b-1)/Abs(1+N)))
            )),
    Variables(a,b,c,z,N),
    Assumptions(And(Element(a,CC), Element(b, CC), Element(c, SetMinus(CC, ZZLessEqual(0))), Element(z,CC), Less(Abs(z), 1), Element(N, ZZGreaterEqual(0)),
        Greater(Re(c)+N, 0))))

make_entry(ID("853a62"),
    Formula(Where(LessEqual(Abs(ComplexDerivative(f(z), For(z, z, k)) / Factorial(k)), A * Binomial(N+k, k) * nu**k),
        Equal(f(z), Hypergeometric2F1Regularized(a,b,c,z)), Equal(nu, Max(1/Abs(z-1),1/Abs(z))),
            Equal(N, 2*Max(Sqrt(nu**(-1)*Abs(a*b)), (Abs(a+b+1)+2*Abs(c)))),
            Equal(A, Max(Abs(f(z)), Abs(ComplexDerivative(f(z), For(z, z, 1)))/(nu*(N+1)))))),
        Description("Actually valid when", f(z), "is any branch of any solution of the hypergeometric ODE, away from the branch points", Equal(z, 0), "and", Equal(z, 1), ".",
        "The variables", nu, ",", N, ", and", A, "can be replaced by any upper bounds."),
    Variables(a, b, c, z, k),
    Assumptions(And(Element(a, CC), Element(b, CC), Element(c, CC), Element(z, SetMinus(CC, Union(Set(0), ClosedOpenInterval(1, Infinity)))), Element(k, ZZGreaterEqual(0)))),
    References("F. Johansson, Computing hypergeometric functions rigorously, https://arxiv.org/abs/1606.06977"))

def_Topic(
    Title("Gaussian quadrature"),
    Section("Gauss-Legendre quadrature"),
    SeeTopics("Legendre polynomials"),
    Entries(
        "0745ee",           "ea4754",           "47b181",           "545987",       ),
)

make_entry(ID("ea4754"),
    Formula(Equal(GaussLegendreWeight(n, k), 2 / ((1 - LegendrePolynomialZero(n,k)**2) * ComplexDerivative(LegendrePolynomial(n, t), For(t, LegendrePolynomialZero(n, k), 1))**2))),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(k, Range(1, n)))))

make_entry(ID("47b181"),
    Formula(Where(LessEqual(Abs(Integral(f(t), For(t, -1, 1)) - Sum(GaussLegendreWeight(n,k) * f(LegendrePolynomialZero(n,k)), For(k, 1, n))),
        64*M/(15*(1-rho**-2)*rho**(2*n))), Equal(M, Supremum(Abs(f(t)), ForElement(t, BernsteinEllipse(rho)))))),
    Variables(f, n, rho),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(rho, RR), Greater(rho, 1),
        IsHolomorphic(f(z), ForElement(z, InteriorClosure(BernsteinEllipse(rho)))))),
    References("L. N. Trefethen, Is Gauss Quadrature Better than Clenshaw-Curtis? SIAM Rev., 50(1), 67-87. DOI:10.1137/060659831"))

make_entry(ID("545987"),
    Formula(Where(LessEqual(Abs(Integral(f(t), For(t, a, b)) - (b-a)/2 * Sum(GaussLegendreWeight(n,k) * f((b-a)/2 * LegendrePolynomialZero(n,k) + (a+b)/2), For(k, 1, n))),
        (Abs(b-a)/2) * (64*M/(15*(1-rho**-2)*rho**(2*n)))), Equal(M, Supremum(Abs(f((b-a)/2 * t + (a+b)/2)), ForElement(t, BernsteinEllipse(rho)))))),
    Variables(f, a, b, n, rho),
    Assumptions(And(Element(a, CC), Element(b, CC), Element(n, ZZGreaterEqual(1)), Element(rho, RR), Greater(rho, 1),
        IsHolomorphic(f(z), ForElement(z, Subset(InteriorClosure(BernsteinEllipse(rho))))))),
    References("L. N. Trefethen, Is Gauss Quadrature Better than Clenshaw-Curtis? SIAM Rev., 50(1), 67-87. DOI:10.1137/060659831"))

def_Topic(
    Title("Greatest common divisor"),
    Section("Definitions"),
    Entries(
        "287e28",
        "c03ed9",
        "5daceb",
    ),
    Section("Tables"),
    Entries(
        "8b2743",
        "a0d13f",
        "99dc4a",
    ),
    Section("Divisibility"),
    Entries(
        "6880d0",
        "805c7a",
        "7638c5",
        "3605cc",
        "5d03d2",
        "a9c81e",
        "272bc8",
        "67978f",
        "4f1441",
        "65cfe5",
        "b60924",
        "1277f6",
        "e3392b",
        "663d9c",
    ),
    Section("Bézout identity"),
    Entries(
        "be5fcd",
        "965ac0",
        "e922c4",
        "f20503",
    ),
    Section("Connection formulas"),
    Entries(
        "4d3127",
        "6572c5",
        "927e6e",
        "126f3e",
    ),
    Section("Specific values"),
    Entries(
        "19ceaa",
        "af512f",
        "554b2e",
        "34378a",
        "c40be0",
        "0a7aff",
        "720766",
        "8d90e9",
        "0f26cc",
        "c6631e",
        "5fb5e2",
        "157c33",
        "c70178",
        "e19e40",
        "80f20f",
        "7a1799",
    ),
    Subsection("Canonical Bézout coefficients"),
    Entries(
        "e352ca",
        "6fd925",
        "13ed5e",
        "bf877e",
        "945be9",
        "0bb73e",
        "b66d1e",
        "1b47db",
        "a5ef5f",
        "633265",
        "4e5aad",
        "da7d00",
        "569278",
    ),
    Section("Functional equations"),
    Subsection("Symmetry"),
    Entries(
        "258fc7",
        "14b96c",
        "f1817f",
        "dc0823",
    ),
    Subsection("Addition and multiplication formulas"),
    Entries(
        "e65763",
        "b36dba",
        "07ac4a",
        "959a25",
        "d4852c",
        "9500d3",
        "5781de",
        "e74d86",
        "1bbdaf",
        "646745",
        "cb9f61",
    ),
    Subsection("Distributivity"),
    Entries(
        "4366b2",
        "1cde02",
        "8dc1c9",
        "c4a892",
        "1d1653",
        "7009cc",
    ),
    Section("Factorization"),
    Subsection("Coprime factors"),
    Entries(
        "8621f6",
        "fbe121",
    ),
    Subsection("Coprime arguments"),
    Entries(
        "5aad5c",
        "250a45",
    ),
    Subsection("Prime factorization"),
    Entries(
        "062423",
        "499cfc",
        "25986e",
        "6cefd7",
    ),
    Section("Special sequences"),
    Entries(
        "fdae67",
        "da45c0",
    ),
    Section("Summation and counting"),
    Entries(
        "7b27cd",
        "4099d2",
        "aaef97",
        "c24323",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "125606",
        "56acd6",
        "f91d1c",
        "b43dac",
        "10ed14",
    ),
)

make_entry(ID("287e28"),
    SymbolDefinition(GCD, GCD(a,b), "Greatest common divisor"),
    Description("The greatest common divisor function can be called either with with an arbitrary number of integer arguments or with a single finite set of integers as the argument. The current entries only deal with the case of two arguments."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(And(Element(a, ZZ), Element(b, ZZ)), Element(GCD(a,b), ZZGreaterEqual(0))),
        Tuple(And(Element(S, PowerSet(ZZ)), Less(Cardinality(S), Cardinality(ZZ))), Element(GCD(S), ZZGreaterEqual(0))),
      )))

make_entry(ID("c03ed9"),
    SymbolDefinition(LCM, LCM(a,b), "Least common multiple"),
    Description("The least common multiple function can be called either with with an arbitrary number of integer arguments or with a single finite set of integers as the argument. The current entries only deal with the case of two arguments."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(And(Element(a, ZZ), Element(b, ZZ)), Element(LCM(a,b), ZZGreaterEqual(0))),
        Tuple(And(Element(S, PowerSet(ZZ)), Less(Cardinality(S), Cardinality(ZZ))), Element(LCM(S), ZZGreaterEqual(0))),
      )))

make_entry(ID("5daceb"),
    SymbolDefinition(XGCD, XGCD(a,b), "Extended greatest common divisor"),
        Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(And(Element(a, ZZ), Element(b, ZZ)),
            Where(And(Element(d, ZZGreaterEqual(0)), Element(u, ZZ), Element(v, ZZ)), Equal(Tuple(d, u, v), XGCD(a, b)))),
      )))

make_entry(ID("8b2743"),
    Description("Table of", GCD(n, k), "for", LessEqual(0, n, 15), "and", LessEqual(0, k, 15)),
    Table(TableRelation(Tuple(n, k, y), Equal(GCD(n, k), y)),
        TableHeadings(Description(n, "\\", k), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
        TableColumnHeadings(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
        List(
        Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
        Tuple(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1),
        Tuple(2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1),
        Tuple(3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3),
        Tuple(4, 1, 2, 1, 4, 1, 2, 1, 4, 1, 2, 1, 4, 1, 2, 1),
        Tuple(5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5, 1, 1, 1, 1, 5),
        Tuple(6, 1, 2, 3, 2, 1, 6, 1, 2, 3, 2, 1, 6, 1, 2, 3),
        Tuple(7, 1, 1, 1, 1, 1, 1, 7, 1, 1, 1, 1, 1, 1, 7, 1),
        Tuple(8, 1, 2, 1, 4, 1, 2, 1, 8, 1, 2, 1, 4, 1, 2, 1),
        Tuple(9, 1, 1, 3, 1, 1, 3, 1, 1, 9, 1, 1, 3, 1, 1, 3),
        Tuple(10, 1, 2, 1, 2, 5, 2, 1, 2, 1, 10, 1, 2, 1, 2, 5),
        Tuple(11, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 1, 1, 1),
        Tuple(12, 1, 2, 3, 4, 1, 6, 1, 4, 3, 2, 1, 12, 1, 2, 3),
        Tuple(13, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 13, 1, 1),
        Tuple(14, 1, 2, 1, 2, 1, 2, 7, 2, 1, 2, 1, 2, 1, 14, 1),
        Tuple(15, 1, 1, 3, 1, 5, 3, 1, 1, 3, 5, 1, 3, 1, 1, 15),
    )))

make_entry(ID("a0d13f"),
    Description("Table of", LCM(n, k), "for", LessEqual(0, n, 15), "and", LessEqual(0, k, 15)),
    Table(TableRelation(Tuple(n, k, y), Equal(LCM(n, k), y)),
        TableHeadings(Description(n, "\\", k), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
        TableColumnHeadings(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
        List(
        Tuple(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        Tuple(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15),
        Tuple(0, 2, 2, 6, 4, 10, 6, 14, 8, 18, 10, 22, 12, 26, 14, 30),
        Tuple(0, 3, 6, 3, 12, 15, 6, 21, 24, 9, 30, 33, 12, 39, 42, 15),
        Tuple(0, 4, 4, 12, 4, 20, 12, 28, 8, 36, 20, 44, 12, 52, 28, 60),
        Tuple(0, 5, 10, 15, 20, 5, 30, 35, 40, 45, 10, 55, 60, 65, 70, 15),
        Tuple(0, 6, 6, 6, 12, 30, 6, 42, 24, 18, 30, 66, 12, 78, 42, 30),
        Tuple(0, 7, 14, 21, 28, 35, 42, 7, 56, 63, 70, 77, 84, 91, 14, 105),
        Tuple(0, 8, 8, 24, 8, 40, 24, 56, 8, 72, 40, 88, 24, 104, 56, 120),
        Tuple(0, 9, 18, 9, 36, 45, 18, 63, 72, 9, 90, 99, 36, 117, 126, 45),
        Tuple(0, 10, 10, 30, 20, 10, 30, 70, 40, 90, 10, 110, 60, 130, 70, 30),
        Tuple(0, 11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 11, 132, 143, 154, 165),
        Tuple(0, 12, 12, 12, 12, 60, 12, 84, 24, 36, 60, 132, 12, 156, 84, 60),
        Tuple(0, 13, 26, 39, 52, 65, 78, 91, 104, 117, 130, 143, 156, 13, 182, 195),
        Tuple(0, 14, 14, 42, 28, 70, 42, 14, 56, 126, 70, 154, 84, 182, 14, 210),
        Tuple(0, 15, 30, 15, 60, 15, 30, 105, 120, 45, 30, 165, 60, 195, 210, 15),
    )))

make_entry(ID("99dc4a"),
    Description("Table of", XGCD(n, k), "for", LessEqual(0, n, 10), "and", LessEqual(0, k, 10)),
    Table(TableRelation(Tuple(n, k, Tuple(d, u, v)), Equal(XGCD(n, k), Tuple(d, u, v))),
        TableHeadings(Description(n, "\\", k), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
        TableColumnHeadings(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
        List(
    Tuple(Tuple(0,0,0), Tuple(1,0,1), Tuple(2,0,1), Tuple(3,0,1), Tuple(4,0,1), Tuple(5,0,1), Tuple(6,0,1), Tuple(7,0,1), Tuple(8,0,1), Tuple(9,0,1), Tuple(10,0,1)),
    Tuple(Tuple(1,1,0), Tuple(1,0,1), Tuple(1,1,0), Tuple(1,1,0), Tuple(1,1,0), Tuple(1,1,0), Tuple(1,1,0), Tuple(1,1,0), Tuple(1,1,0), Tuple(1,1,0), Tuple(1,1,0)),
    Tuple(Tuple(2,1,0), Tuple(1,0,1), Tuple(2,0,1), Tuple(1,-1,1), Tuple(2,1,0), Tuple(1,-2,1), Tuple(2,1,0), Tuple(1,-3,1), Tuple(2,1,0), Tuple(1,-4,1), Tuple(2,1,0)),
    Tuple(Tuple(3,1,0), Tuple(1,0,1), Tuple(1,1,-1), Tuple(3,0,1), Tuple(1,-1,1), Tuple(1,2,-1), Tuple(3,1,0), Tuple(1,-2,1), Tuple(1,3,-1), Tuple(3,1,0), Tuple(1,-3,1)),
    Tuple(Tuple(4,1,0), Tuple(1,0,1), Tuple(2,0,1), Tuple(1,1,-1), Tuple(4,0,1), Tuple(1,-1,1), Tuple(2,-1,1), Tuple(1,2,-1), Tuple(4,1,0), Tuple(1,-2,1), Tuple(2,-2,1)),
    Tuple(Tuple(5,1,0), Tuple(1,0,1), Tuple(1,1,-2), Tuple(1,-1,2), Tuple(1,1,-1), Tuple(5,0,1), Tuple(1,-1,1), Tuple(1,3,-2), Tuple(1,-3,2), Tuple(1,2,-1), Tuple(5,1,0)),
    Tuple(Tuple(6,1,0), Tuple(1,0,1), Tuple(2,0,1), Tuple(3,0,1), Tuple(2,1,-1), Tuple(1,1,-1), Tuple(6,0,1), Tuple(1,-1,1), Tuple(2,-1,1), Tuple(3,-1,1), Tuple(2,2,-1)),
    Tuple(Tuple(7,1,0), Tuple(1,0,1), Tuple(1,1,-3), Tuple(1,1,-2), Tuple(1,-1,2), Tuple(1,-2,3), Tuple(1,1,-1), Tuple(7,0,1), Tuple(1,-1,1), Tuple(1,4,-3), Tuple(1,3,-2)),
    Tuple(Tuple(8,1,0), Tuple(1,0,1), Tuple(2,0,1), Tuple(1,-1,3), Tuple(4,0,1), Tuple(1,2,-3), Tuple(2,1,-1), Tuple(1,1,-1), Tuple(8,0,1), Tuple(1,-1,1), Tuple(2,-1,1)),
    Tuple(Tuple(9,1,0), Tuple(1,0,1), Tuple(1,1,-4), Tuple(3,0,1), Tuple(1,1,-2), Tuple(1,-1,2), Tuple(3,1,-1), Tuple(1,-3,4), Tuple(1,1,-1), Tuple(9,0,1), Tuple(1,-1,1)),
    Tuple(Tuple(10,1,0), Tuple(1,0,1), Tuple(2,0,1), Tuple(1,1,-3), Tuple(2,1,-2), Tuple(5,0,1), Tuple(2,-1,2), Tuple(1,-2,3), Tuple(2,1,-1), Tuple(1,1,-1), Tuple(10,0,1)),
    )))

make_entry(ID("6880d0"),
    Formula(Equal(GCD(a,b), Maximum(Set(d, For(d), And(Element(d, ZZGreaterEqual(1)), Divides(d, a), Divides(d, b)))))),
    Variables(a,b),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ), Or(NotEqual(a, 0), NotEqual(b, 0)))))

make_entry(ID("805c7a"),
    Formula(Equal(LCM(a,b), Minimum(Set(m, For(m), And(Element(m, ZZGreaterEqual(1)), Divides(a, m), Divides(b, m)))))),
    Variables(a,b),
    Assumptions(And(Element(a,SetMinus(ZZ, Set(0))), Element(b, SetMinus(ZZ, Set(0))))))

make_entry(ID("7638c5"),
    Formula(Implies(And(Divides(d,a), Divides(d,b)), Divides(d, GCD(a,b)))),
    Variables(a,b,d),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ), Element(d, ZZ))))

make_entry(ID("3605cc"),
    Formula(Implies(And(Divides(a,m), Divides(b,m)), Divides(LCM(a,b), m))),
    Variables(a,b,m),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ), Element(m, ZZ))))

make_entry(ID("5d03d2"),
    Formula(Implies(Or(Divides(d,a), Divides(d,b)), Divides(d, LCM(a,b)))),
    Variables(a,b,d),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ), Element(d, ZZ))))

make_entry(ID("a9c81e"),
    Formula(Divides(GCD(a, b), a)),
    Variables(a,b),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ), Or(NotEqual(a, 0), NotEqual(b, 0)))))

make_entry(ID("272bc8"),
    Formula(Divides(GCD(a, b), b)),
    Variables(a,b),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ), Or(NotEqual(a, 0), NotEqual(b, 0)))))

make_entry(ID("67978f"),
    Formula(Divides(a, LCM(a, b))),
    Variables(a,b),
    Assumptions(And(Element(a,SetMinus(ZZ, Set(0))), Element(b, ZZ))))

make_entry(ID("4f1441"),
    Formula(Divides(b, LCM(a, b))),
    Variables(a,b),
    Assumptions(And(Element(a,ZZ), Element(b, SetMinus(ZZ, Set(0))))))

make_entry(ID("65cfe5"),
    Formula(Divides(LCM(a, b), a*b)),
    Variables(a,b),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ), And(NotEqual(a, 0), NotEqual(b, 0)))))

make_entry(ID("b60924"),
    Formula(Divides(GCD(a, b), a*b)),
    Variables(a,b),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ), Or(NotEqual(a, 0), NotEqual(b, 0)))))

make_entry(ID("1277f6"),
    Formula(Divides(GCD(a, b), LCM(a, b))),
    Variables(a,b),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ), And(NotEqual(a, 0), NotEqual(b, 0)))))

make_entry(ID("e3392b"),
    Formula(Divides(GCD(a, b), a+b)),
    Variables(a,b),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ), Or(NotEqual(a, 0), NotEqual(b, 0)))))

make_entry(ID("663d9c"),
    Formula(Divides(GCD(a, b), a*x+b*y)),
    Variables(a,b,x,y),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ), Element(x, ZZ), Element(y, ZZ), Or(NotEqual(a, 0), NotEqual(b, 0)))))

make_entry(ID("be5fcd"),
    Formula(Where(Equal(GCD(a,b), d, a*u + b*v), Equal(Tuple(d, u, v), XGCD(a, b)))),
    Variables(a,b),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ))))

make_entry(ID("965ac0"),
    Formula(Where(Equal(Set(a*x+b*y, For(Tuple(x,y)), And(Element(x, ZZ), Element(y, ZZ))),
        Set(n*d, ForElement(n, ZZ))), Equal(d, GCD(a,b)))),
    Variables(a,b),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ))))

make_entry(ID("e922c4"),
    Formula(Equal(GCD(a,b), Minimum(Set(a*x + b*y, For(Tuple(x, y)), And(Element(x, ZZ), Element(y, ZZ), GreaterEqual(a*x + b*y, 1)))))),
    Variables(a,b),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ), Or(NotEqual(a, 0), NotEqual(b, 0)))))

make_entry(ID("f20503"),
    Formula(Where(Equal(d, a*x + b*y), Equal(Tuple(d, u, v), XGCD(a, b)), Equal(Tuple(x, y), Tuple(u+k*b/d, v-k*a/d)))),
    Variables(a,b,k),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ), Element(k, ZZ), Or(NotEqual(a, 0), NotEqual(b, 0)))))

make_entry(ID("4d3127"),
    Formula(Equal(GCD(a,b)*LCM(a,b), Abs(a*b))),
    Variables(a,b),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ))))

make_entry(ID("6572c5"),
    Formula(Equal(GCD(a,b), Abs(a*b) / LCM(a,b))),
    Variables(a,b),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ), NotEqual(a, 0), NotEqual(b, 0))))

make_entry(ID("927e6e"),
    Formula(Equal(LCM(a,b), Abs(a*b) / GCD(a,b))),
    Variables(a,b),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ), Or(NotEqual(a, 0), NotEqual(b, 0)))))

make_entry(ID("126f3e"),
    Formula(Equal(GCD(a,b), Where(d, Equal(Tuple(d, u, v), XGCD(a, b))))),
    Variables(a,b),
    Assumptions(And(Element(a,ZZ), Element(b, ZZ))))

make_entry(ID("19ceaa"),
    Formula(Equal(GCD(0,0), 0)))

make_entry(ID("af512f"),
    Formula(Equal(LCM(0,0), 0)))

make_entry(ID("554b2e"),
    Formula(Equal(GCD(1,1), 1)))

make_entry(ID("34378a"),
    Formula(Equal(LCM(1,1), 1)))

make_entry(ID("c40be0"),
    Formula(Equal(GCD(a,0), Abs(a))),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("0a7aff"),
    Formula(Equal(LCM(a,0), 0)),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("720766"),
    Formula(Equal(GCD(a,1), 1)),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("8d90e9"),
    Formula(Equal(LCM(a,1), Abs(a))),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("0f26cc"),
    Formula(Equal(GCD(a, a), Abs(a))),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("c6631e"),
    Formula(Equal(LCM(a, a), Abs(a))),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("5fb5e2"),
    Formula(Equal(GCD(a, 2), 1 + (1 + (-1)**a)/2)),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("157c33"),
    Formula(Equal(LCM(a, 2), Abs(a) * (1 + (1 - (-1)**a)/2))),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("c70178"),
    Formula(Equal(GCD(a, a-1), 1)),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("e19e40"),
    Formula(Equal(LCM(a, a-1), a*(a-1))),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("80f20f"),
    Formula(Equal(GCD(a, a - 2), 1 + (1 + (-1)**a)/2)),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("7a1799"),
    Formula(Equal(LCM(a, a-2), (Abs(a*(a-2))/2) * (1 + (1 - (-1)**a)/2))),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("e352ca"),
    Formula(Equal(XGCD(a,0), Tuple(Abs(a), Sign(a), 0))),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("6fd925"),
    Formula(Equal(XGCD(0,b), Tuple(Abs(b), 0, Sign(b)))),
    Variables(b),
    Assumptions(Element(b, ZZ)))

make_entry(ID("13ed5e"),
    Formula(Equal(XGCD(a,1), Tuple(1, 0, 1))),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("bf877e"),
    Formula(Equal(XGCD(1,b), Tuple(1, Abs(Sign((b-1)*(b+1))), Sign(b)*(Sign(b+1)-Sign(b-1))))),
    Variables(b),
    Assumptions(Element(b, ZZ)))

make_entry(ID("945be9"),
    Formula(Equal(XGCD(a,a), Tuple(Abs(a), 0, Sign(a)))),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("0bb73e"),
    Formula(Equal(XGCD(a,-a), Tuple(Abs(a), 0, -Sign(a)))),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("b66d1e"),
    Formula(Equal(XGCD(a,-1), Tuple(1, 0, -1))),
    Variables(a),
    Assumptions(Element(a, ZZ)))

make_entry(ID("1b47db"),
    Formula(Equal(XGCD(-1,b), Tuple(1, -Abs(Sign((b-1)*(b+1))), Sign(b)*(Sign(b+1)-Sign(b-1))))),
    Variables(b),
    Assumptions(Element(b, ZZ)))

make_entry(ID("a5ef5f"),
    Formula(Where(Implies(Equal(Abs(a), Abs(b)), Equal(Tuple(u, v), Tuple(0, Sign(b)))), Equal(Tuple(d, u, v), XGCD(a, b)))),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(ZZ, Set(0))), Element(b, SetMinus(ZZ, Set(0))))))

make_entry(ID("633265"),
    Formula(Where(Implies(And(NotEqual(Abs(a), Abs(b)), NotEqual(Abs(a), Abs(2*d))), Less(2*d*Abs(v), Abs(a))), Equal(Tuple(d, u, v), XGCD(a, b)))),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(ZZ, Set(0))), Element(b, SetMinus(ZZ, Set(0))))))

make_entry(ID("4e5aad"),
    Formula(Where(Implies(And(NotEqual(Abs(a), Abs(b)), Equal(Abs(a), Abs(2*d))), Equal(v, Sign(b))), Equal(Tuple(d, u, v), XGCD(a, b)))),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(ZZ, Set(0))), Element(b, SetMinus(ZZ, Set(0))))))

make_entry(ID("da7d00"),
    Formula(Where(Implies(And(NotEqual(Abs(a), Abs(b)), NotEqual(Abs(b), Abs(2*d))), Less(2*d*Abs(u), Abs(b))), Equal(Tuple(d, u, v), XGCD(a, b)))),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(ZZ, Set(0))), Element(b, SetMinus(ZZ, Set(0))))))

make_entry(ID("569278"),
    Formula(Where(Implies(And(NotEqual(Abs(a), Abs(b)), Equal(Abs(b), Abs(2*d))), Equal(u, Sign(a))), Equal(Tuple(d, u, v), XGCD(a, b)))),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(ZZ, Set(0))), Element(b, SetMinus(ZZ, Set(0))))))

make_entry(ID("258fc7"),
    Formula(Equal(GCD(a, b), GCD(b, a))),
    Variables(a, b),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ))))

make_entry(ID("14b96c"),
    Formula(Equal(LCM(a, b), LCM(b, a))),
    Variables(a, b),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ))))

make_entry(ID("f1817f"),
    Formula(Equal(GCD(a, b), GCD(-a, b), GCD(a, -b), GCD(-a, -b))),
    Variables(a, b),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ))))

make_entry(ID("dc0823"),
    Formula(Equal(LCM(a, b), LCM(-a, b), LCM(a, -b), LCM(-a, -b))),
    Variables(a, b),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ))))

make_entry(ID("e65763"),
    Formula(Equal(GCD(a+b, b), GCD(a, b))),
    Variables(a, b),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ))))

make_entry(ID("b36dba"),
    Formula(Equal(GCD(a-b, b), GCD(a, b))),
    Variables(a, b),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ))))

make_entry(ID("07ac4a"),
    Formula(Equal(GCD(a+n*b, b), GCD(a, b))),
    Variables(a, b, n),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ), Element(n, ZZ))))

make_entry(ID("959a25"),
    Formula(Equal(GCD(Mod(a,b), b), GCD(a, b))),
    Variables(a, b),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ), NotEqual(b, 0))))

make_entry(ID("d4852c"),
    Formula(Equal(GCD(n*a, n*b), Abs(n)*GCD(a, b))),
    Variables(a, b, n),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ), Element(n, ZZ))))

make_entry(ID("9500d3"),
    Formula(Equal(LCM(n*a, n*b), Abs(n)*LCM(a, b))),
    Variables(a, b, n),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ), Element(n, ZZ))))

make_entry(ID("5781de"),
    Formula(Equal(LCM(a+b, b), Abs(a+b) * LCM(a,b) / Abs(a))),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(ZZ, Set(0))), Element(b, ZZ))))

make_entry(ID("e74d86"),
    Formula(Equal(LCM(a-b, b), Abs(a-b) * LCM(a,b) / Abs(a))),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(ZZ, Set(0))), Element(b, ZZ))))

make_entry(ID("1bbdaf"),
    Formula(Equal(LCM(a+n*b, b), Abs(a+n*b) * LCM(a,b) / Abs(a))),
    Variables(a, b, n),
    Assumptions(And(Element(a, SetMinus(ZZ, Set(0))), Element(b, ZZ), Element(n, ZZ))))

make_entry(ID("646745"),
    Formula(Equal(GCD(a/d, b/d), GCD(a,b)/Abs(d))),
    Variables(a, b, d),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ), Element(d, ZZ), Divides(d, a), Divides(d, b))))

make_entry(ID("cb9f61"),
    Formula(Equal(LCM(a/d, b/d), LCM(a,b)/Abs(d))),
    Variables(a, b, d),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ), Element(d, ZZ), Divides(d, a), Divides(d, b))))

make_entry(ID("4366b2"),
    Formula(Equal(GCD(a, GCD(b, c)), GCD(GCD(a, b), c))),
    Variables(a, b, c),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ), Element(c, ZZ))))

make_entry(ID("1cde02"),
    Formula(Equal(LCM(a, LCM(b, c)), LCM(LCM(a, b), c))),
    Variables(a, b, c),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ), Element(c, ZZ))))

make_entry(ID("8dc1c9"),
    Formula(Equal(GCD(a, LCM(b, c)), LCM(GCD(a, b), GCD(a, c)))),
    Variables(a, b, c),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ), Element(c, ZZ))))

make_entry(ID("c4a892"),
    Formula(Equal(LCM(a, GCD(b, c)), GCD(LCM(a, b), LCM(a, c)))),
    Variables(a, b, c),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ), Element(c, ZZ))))

make_entry(ID("1d1653"),
    Formula(Equal(GCD(a, LCM(a, b)), Abs(a))),
    Variables(a, b),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ))))

make_entry(ID("7009cc"),
    Formula(Equal(LCM(a, GCD(a, b)), Abs(a))),
    Variables(a, b),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ))))

make_entry(ID("8621f6"),
    Formula(Equal(GCD(r*s, c), GCD(r,c)*GCD(s,c))),
    Variables(r, s, c),
    Assumptions(And(Element(r, ZZ), Element(s, ZZ), Element(c, ZZ), Equal(GCD(r,s), 1))))

make_entry(ID("fbe121"),
    Formula(Equal(LCM(r*s, c), LCM(r,c)*LCM(s,c)/Abs(c))),
    Variables(r, s, c),
    Assumptions(And(Element(r, ZZ), Element(s, ZZ), Element(c, ZZ), Equal(GCD(r,s), 1), NotEqual(c, 0))))

make_entry(ID("5aad5c"),
    Formula(Equal(GCD(r**m, s**n), 1)),
    Variables(r, s, m, n),
    Assumptions(And(Element(r, ZZ), Element(s, ZZ), Equal(GCD(r, s), 1), Element(m, ZZGreaterEqual(0)), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("250a45"),
    Formula(Equal(LCM(r, s), Abs(r*s))),
    Variables(r, s),
    Assumptions(And(Element(r, ZZ), Element(s, ZZ), Equal(GCD(r, s), 1))))

make_entry(ID("062423"),
    Formula(Equal(GCD(p, q), 1)),
    Variables(p, q),
    Assumptions(And(Element(p, PP), Element(q, PP), NotEqual(p, q))))

make_entry(ID("499cfc"),
    Formula(Equal(GCD(p**m, q**n), 1)),
    Variables(p, q, m, n),
    Assumptions(And(Element(p, PP), Element(q, PP), NotEqual(p, q), Element(m, ZZGreaterEqual(0)), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("25986e"),
    Formula(Equal(GCD(Product(PrimeNumber(k)**Subscript(e,k), For(k, 1, m)),
                      Product(PrimeNumber(k)**Subscript(f,k), For(k, 1, m))),
                Product(PrimeNumber(k)**Min(Subscript(e,k), Subscript(f,k)), For(k, 1, m)))),
    Variables(e, f, m),
    Assumptions(And(Element(Subscript(e, k), ZZGreaterEqual(0)),
                    Element(Subscript(f, k), ZZGreaterEqual(0)),
                    Element(m, ZZGreaterEqual(0)))))

make_entry(ID("6cefd7"),
    Formula(Equal(LCM(Product(PrimeNumber(k)**Subscript(e,k), For(k, 1, m)),
                      Product(PrimeNumber(k)**Subscript(f,k), For(k, 1, m))),
                Product(PrimeNumber(k)**Max(Subscript(e,k), Subscript(f,k)), For(k, 1, m)))),
    Variables(e, f, m),
    Assumptions(And(Element(Subscript(e, k), ZZGreaterEqual(0)),
                    Element(Subscript(f, k), ZZGreaterEqual(0)),
                    Element(m, ZZGreaterEqual(0)))))

make_entry(ID("fdae67"),
    Formula(Equal(GCD(n**a-1, n**b-1), n**GCD(a,b)-1)),
    Variables(a, b, n),
    Assumptions(And(Element(a, ZZGreaterEqual(0)), Element(b, ZZGreaterEqual(0)), Element(n, ZZGreaterEqual(1)))))

make_entry(ID("da45c0"),
    Formula(Equal(GCD(Fibonacci(m), Fibonacci(n)), Fibonacci(GCD(m, n)))),
    Variables(m, n),
    Assumptions(And(Element(m, ZZ), Element(n, ZZ))))

make_entry(ID("7b27cd"),
    Formula(Equal(Cardinality(Set(k, For(k), And(Element(k, Range(1, n)), Equal(GCD(n,k), 1)))), Totient(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("4099d2"),
    Formula(Equal(SequenceLimit(
        (1/N**n) * Cardinality(Set(T, For(T), And(Element(T, Pow(Range(1, N), n)), Equal(GCD(T), 1)))),
        For(N, Infinity)), 1/RiemannZeta(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(2))))

make_entry(ID("aaef97"),
    Formula(Equal(Sum(GCD(n,k), For(k,1,n)), DivisorSum(d*Totient(n/d), For(d, n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("c24323"),
    Formula(Equal(Sum(LCM(n,k), For(k,1,n)), (n/2)*(1+DivisorSum(d*Totient(d), For(d, n))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("125606"),
    Formula(LessEqual(LCM(a,b), Abs(a*b))),
    Variables(a, b),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ))))

make_entry(ID("56acd6"),
    Formula(LessEqual(GCD(a,b), Max(Abs(a), Abs(b)))),
    Variables(a, b),
    Assumptions(And(Element(a, ZZ), Element(b, ZZ))))

make_entry(ID("f91d1c"),
    Formula(LessEqual(GCD(a,b), Min(Abs(a), Abs(b)))),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(ZZ, Set(0))), Element(b, SetMinus(ZZ, Set(0))))))

make_entry(ID("b43dac"),
    Formula(Where(LessEqual(Abs(u), Abs(b)/d), Equal(Tuple(d, u, v), XGCD(a, b)))),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(ZZ, Set(0))), Element(b, SetMinus(ZZ, Set(0))))))

make_entry(ID("10ed14"),
    Formula(Where(LessEqual(Abs(v), Abs(a)/d), Equal(Tuple(d, u, v), XGCD(a, b)))),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(ZZ, Set(0))), Element(b, SetMinus(ZZ, Set(0))))))

def_Topic(
    Title("General analytic functions"),
    Section("Taylor series"),
    Entries(
        "1b1ec5",
        "b6582a",
        "78bb08",
    ),
    Section("Quadrature"),
    SeeTopics("Gaussian quadrature"),
    Entries(
        "545987",
    ),
    Section("Euler-Maclaurin formula"),
    Entries(
        "ce2272",
        "af2d4b",
    ),
)

make_entry(ID("1b1ec5"),
    Formula(Equal(f(z+x), Sum(ComplexDerivative(f(z), For(z, z, k)) / Factorial(k) * x**k, For(k, 0, Infinity)))),
    Variables(f, z, x),
    Assumptions(And(Element(z, CC), Element(x, CC),
        IsHolomorphic(f(t), ForElement(t, ClosedDisk(z, Abs(x)))))))

make_entry(ID("b6582a"),
    Formula(Where(LessEqual(Abs(ComplexDerivative(f(z), For(z, z, k)) / Factorial(k)), C / R**k),
        Equal(C, Supremum(Abs(f(t)), ForElement(t, CC), Equal(Abs(t-z), R))))),
    Variables(f, z, k, R),
    Assumptions(And(Element(z, CC), Element(k, ZZGreaterEqual(0)),
        Element(R, RR), Greater(R, 0),
        IsHolomorphic(f(t), ForElement(t, Subset(ClosedDisk(z, R)))))))

make_entry(ID("78bb08"),
    Formula(Where(LessEqual(Abs(f(z+x) - Sum(ComplexDerivative(f(z), For(z, z, k)) / Factorial(k) * x**k, For(k, 0, N - 1))), C * D**N / (1 - D)),
        Equal(C, Supremum(Abs(f(t)), For(t), And(Element(t, CC), Equal(Abs(t-z), R)))), Equal(D, Abs(x)/R))),
    Variables(f, z, x, N, R),
    Assumptions(And(Element(z, CC), Element(x, CC), Element(N, ZZGreaterEqual(1)),
        Element(R, RR), Less(Abs(x), R),
        IsHolomorphic(f(t), ForElement(t, Subset(ClosedDisk(z, R)))))))

EM_rem = (f(N) + f(U))/2 + Sum(BernoulliB(2*k)/Factorial(2*k) * (ComplexDerivative(f(t), For(t, U, 2*k-1)) - ComplexDerivative(f(t), For(t, N, 2*k-1))), For(k, 1, M))

EM_tail = Integral(BernoulliPolynomial(2*M,t-Floor(t))/Factorial(2*M) * ComplexDerivative(f(t), For(t, t, 2*M)), For(t, N, U))

EM_assumptions = And(Element(N, ZZ), Element(U, ZZ), LessEqual(N, U), Element(M, ZZGreaterEqual(1)), IsHolomorphic(f(t), ForElement(t, Subset(ClosedInterval(N, U)))))

make_entry(ID("ce2272"),
    Formula(Equal(Sum(f(k), For(k, N, U)), Integral(f(t), For(t, N, U)) + EM_rem + EM_tail)),
    Variables(f, N, U, M),
    Assumptions(EM_assumptions))

make_entry(ID("af2d4b"),
    Formula(LessEqual(Abs(Sum(f(k), For(k, N, U)) - Parentheses(Integral(f(t), For(t, N, U)) + EM_rem)),
            Div(4, (2*Pi)**(2*M)) * Integral(Abs(ComplexDerivative(f(t), For(t, t, 2 * M))), For(t, N, U)))),
    Variables(f, N, U, M),
    Assumptions(EM_assumptions))

def_Topic(
    Title("Golden ratio"),
    Section("Definitions"),
    Entries(
        "37f505",
    ),
    Section("Numerical value"),
    Entries(
        "08fcaf",
        "77d2f8",
        "e09458",
    ),
    Section("Algebraic equations"),
    Entries(
        "31f52c",
        "b464d3",
        "d774fe",
        "77c324",
        "6d2709",
        "2e0596",
        "ebfcd8",
    ),
    Section("Trigonometric formulas"),
    Entries(
        "98a765",
        "487e35",
        "fad16f",
    ),
    Section("Recurrence relations"),
    Entries(
        "0cd1a4",
        "6a11ce",
    ),
    Section("Limit representations"),
    Entries(
        "2b6e60",
    ),
    Section("Special function representations"),
    Entries(
        "e9a269",
    ),
)

make_entry(ID("37f505"),
    SymbolDefinition(GoldenRatio, GoldenRatio, "The golden ratio (1.618...)"))

make_entry(ID("08fcaf"),
    Formula(Element(GoldenRatio,
        RealBall(Decimal("1.6180339887498948482045868343656381177203091798058"), Decimal("3.72e-50")))))

make_entry(ID("77d2f8"),
    Formula(Equal(GoldenRatio, (1+Sqrt(5))/2)))

make_entry(ID("e09458"),
    Formula(NotElement(GoldenRatio, QQ)))

make_entry(ID("31f52c"),
    Formula(Equal(1/GoldenRatio, GoldenRatio - 1)))

make_entry(ID("b464d3"),
    Formula(Equal(GoldenRatio**2 - GoldenRatio - 1, 0)))

make_entry(ID("d774fe"),
    Formula(Implies(Equal((a+b)/a, a/b), Equal(a/b, GoldenRatio))),
    Variables(a, b),
    Assumptions(And(Element(a, OpenInterval(0, Infinity)), Element(b, OpenInterval(0, Infinity)))))

make_entry(ID("77c324"),
    Formula(Equal(Zeros(x**2-x-1, ForElement(x, CC)), Set(GoldenRatio, 1-GoldenRatio))))

make_entry(ID("6d2709"),
    Formula(Equal(GoldenRatio, 1+1/GoldenRatio)))

make_entry(ID("2e0596"),
    Formula(Equal(GoldenRatio, 1+1/(1+1/GoldenRatio))))

make_entry(ID("ebfcd8"),
    Formula(Equal(Spectrum(Matrix2x2(1, 1, 1, 0)), Set(GoldenRatio, 1-GoldenRatio))))

make_entry(ID("98a765"),
    Formula(Equal(GoldenRatio, 2*Cos(Pi/5))))

make_entry(ID("487e35"),
    Formula(Equal(GoldenRatio, 2*Sin(3*Pi/10))))

make_entry(ID("fad16f"),
    Formula(Equal(GoldenRatio, 2*Sin(Pi/10)+1)))

make_entry(ID("0cd1a4"),
    Formula(Equal(GoldenRatio**(n+1), GoldenRatio**n + GoldenRatio**(n-1))),
    Variables(n),
    Assumptions(Element(n, CC)))

make_entry(ID("6a11ce"),
    Formula(Equal(GoldenRatio**n, Fibonacci(n) * GoldenRatio + Fibonacci(n-1))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("2b6e60"),
    Formula(Equal(GoldenRatio, SequenceLimit(Fibonacci(n+1)/Fibonacci(n), For(n, Infinity)))))

make_entry(ID("e9a269"),
    Formula(Equal(GoldenRatio, Div(1,5) * (DedekindEta(ConstI) / DedekindEta(5*ConstI))**2)))

def_Topic(
    Title("Halphen's constant"),
    Section("Definitions"),
    Entries(
        "6161c7",
    ),
    Section("Numerical value"),
    Entries(
        "e2bfdb",
        "f5e0b0",
        "d0993b",
    ),
    Section("Approximation theory"),
    Entries(
        "5c1e44",
    ),
    Section("Formulas"),
    Entries(
        "9758ac",
        "31adf6",
        "831ea4",
        "c26bc9",
        "06c468",
    ),
)

make_entry(ID("6161c7"),
    SymbolDefinition(HalphenConstant, HalphenConstant, "Halphen's constant (one-ninth constant) 0.10765..."),
    CodeExample(HalphenConstant, "Represents Halphen's constant, also known as the one-ninth constant."),
    CodeExample(1/HalphenConstant, "Represents the reciprocal of Halphen's constant, also called Varga's constant."),
    References("S. Finch (2003), Mathematical Constants, Cambridge University Press, section 4.5",
        "https://www.chebfun.org/examples/approx/Halphen.html",
        "http://mathworld.wolfram.com/One-NinthConstant.html"))

make_entry(ID("e2bfdb"),
    Formula(EqualNearestDecimal(HalphenConstant, 
        Decimal("0.10765391922648457661532344509094719058797656329012"), 50)),
    References(SloaneA("A072558")))

make_entry(ID("f5e0b0"),
    Formula(EqualNearestDecimal(1/HalphenConstant, 
        Decimal("9.2890254919208189187554494359517450610316948677501"), 50)),
    References(SloaneA("A073007")))

make_entry(ID("d0993b"),
    Formula(NotEqual(HalphenConstant, Div(1,9))))

make_entry(ID("5c1e44"),
    Formula(Equal(HalphenConstant,
        Where(SequenceLimit(Pow(Subscript(lamda, n), 1/n), For(n, Infinity)),
            Equal(R, Set(r, ForElement(r, RationalFunctions(RR, t)), LessEqual(RationalFunctionDegree(r), Tuple(n, n)))),
            Equal(Subscript(lamda, n), Infimum(
                Supremum(Abs(Exp(x) - r(x)), ForElement(x, OpenClosedInterval(-Infinity, 0))),
                ForElement(r, R)))))))

make_entry(ID("9758ac"),
    Formula(Equal(HalphenConstant,
        UniqueZero(-Div(1,8) + Sum(n*x**n/(1-(-x)**n), For(n, 1, Infinity)),
            ForElement(x, OpenInterval(0, 1))))))

make_entry(ID("31adf6"),
    Formula(Equal(HalphenConstant,
        UniqueZero(Brackets(Sum((2*n+1)**2 * (-x)**(n*(n+1)/2), For(n, 0, Infinity))), ForElement(x, OpenInterval(0, 1))))))

make_entry(ID("831ea4"),
    Formula(Equal(HalphenConstant,
        UniqueZero(-Div(1,8) + Sum(Abs(DivisorSum((-1)**d * d, For(d, n))) * x**n, For(n, 1, Infinity)),
            ForElement(x, OpenInterval(0, 1))))))

make_entry(ID("c26bc9"),
    Formula(Equal(HalphenConstant,
        Where(Exp(-(Pi*EllipticK(1-c)/EllipticK(c))),
            Equal(c, UniqueZero(EllipticK(m) - 2*EllipticE(m), ForElement(m, OpenInterval(0, 1))))))))

make_entry(ID("06c468"),
    Formula(Equal(HalphenConstant,
        UniqueZero(Brackets(JacobiTheta(2, 0, Log(-x)/(2*Pi*ConstI), 2)), ForElement(x, OpenInterval(0, 1))))))

def_Topic(
    Title("Hurwitz zeta function"),
    Section("Definitions"),
    Entries(
        "04217b",
    ),
    Section("Illustrations"),
    Entries(
        "855201",
        "583bf9",
        "0e2bcb",
    ),
    Section("Domain and range"),
    Entries(
        "56dcbd",
        "ad269f",
        "e7224b",
        "b0f500",
        "cc523f",
        "ec2dd5",
        "a5980a",
        "d0b234",
        "c5d844",
    ),
    Subsection("As a function of the argument"),
    Entries(
        "4bf3da",
        "ea271f",
        "26418b",
    ),
    Subsection("As a function of the parameter"),
    Entries(
        "93e149",
        "8c7cdb",
        "05c2dd",
        "f045b3",
    ),
    Section("Specific values"),
    Entries(
        "af23f7",
        "b721b4",
        "fc6fe0",
        "6e69fc",
        "af7d3d",
        "c6d6e2",
        "6c3523",
        "8bbb6f",
        "4d1f6b",
        "575b8f",
        "ac8d3c",
        "b4ed44",
        "4dd87c",
        "2d4828",
        "33690e",
        "868061",
        "9417f4",
        "4064f5",
        "3e82c3",
        "951f86",
        "eda0f3",
        "b347d3",
        "2fabeb",
        "edad97",
        "84196a",
        "532f31",
        "5bdba2",
        "7dab87",
        "d99808",
        "150b3e",
        "3db90c",
        "6419ac",
    ),
    Section("Series representations"),
    Subsection("Dirichlet series"),
    Entries(
        "448d90",
        "77e507",
        "0bd6aa",
    ),
    Subsection("Laurent series"),
    Description("Related topic: ", TopicReference("Stieltjes constants")),
    Entries(
        "60c6da",
    ),
    Section("Integral representations"),
    Entries(
        "1699a9",
        "498036",
    ),
    Section("Functional equations"),
    Subsection("Recurrence relations"),
    Entries(
        "ed4f6f",
        "bed7ee",
        "95e270",
    ),
    Subsection("Multiplication formula"),
    Entries(
        "ba7f85",
        "ebc49c",
        "7d9feb",
    ),
    Subsection("Reflection formula"),
    Entries(
        "69a1a9",
    ),
    Section("Derivatives and differential equations"),
    Subsection("Argument derivatives"),
    Entries(
        "3ba544",
        "d0d03b",
    ),
    Subsection("Parameter derivatives"),
    Entries(
        "83065e",
        "40c3e2",
    ),
    Section("Euler-Maclaurin formula"),
    Entries(
        "d25d10",
    ),
    Section("Representation of other functions"),
    Subsection("Riemann zeta function"),
    Description("Related topic: ", TopicReference("Riemann zeta function")),
    Entries(
        "febdd2",
    ),
    Subsection("Bernoulli polynomials"),
    Description("Related topic: ", TopicReference("Bernoulli numbers and polynomials")),
    Entries(
        "4228cd",
    ),
    Subsection("Gamma and related functions"),
    Description("Related topics: ", TopicReference("Digamma function"), ", ", TopicReference("Barnes G-function")),
    Entries(
        "53026a",
        "f3b870",
        "693e0e",
        "bba4ec",          "e05807",      ),
    Subsection("Dirichlet L-functions"),
    Description("Related topic: ", TopicReference("Dirichlet L-functions")),
    Entries(
        "c31c10",          "4c3678",      ),
    Subsection("Polylogarithms"),
    Entries(
        "52ea5f",
    ),
)

make_entry(ID("04217b"),
    SymbolDefinition(HurwitzZeta, HurwitzZeta(s, a), "Hurwitz zeta function"),
    CodeExample(HurwitzZeta(s, a), "represents the Hurwitz zeta function of argument", s, "and parameter", a, "."),
    CodeExample(HurwitzZeta(s, a, 1), "represents the Hurwitz zeta function of argument", s, "and parameter", a, ", differentiated once with respect to", s, "."),
    CodeExample(HurwitzZeta(s, a, r), "represents the Hurwitz zeta function of argument", s, "and parameter", a, ", differentiated to order", r, "with respect to", s, "."),
    References("https://dlmf.nist.gov/25.11", "http://functions.wolfram.com/ZetaFunctionsandPolylogarithms/Zeta2/"))

make_entry(ID("855201"),
    Image(Description("Plot of", HurwitzZeta(s, a), "on", Element(s, ClosedInterval(-25,11)), "for",  Element(a, Set(Decimal("0.6"), Decimal("0.8"), Decimal("1.4")))),
        ImageSource("plot_hurwitz_zeta")))

make_entry(ID("583bf9"),
    Image(Description("X-ray of", HurwitzZeta(s, 1+ConstI/2), "on", Element(s, ClosedInterval(-20,20) + ClosedInterval(-20,20)*ConstI)),
        ImageSource("xray_hurwitz_zeta")),
    description_xray,
    )

make_entry(ID("0e2bcb"),
    Image(Description("X-ray of", HurwitzZeta(2+3*ConstI, a), "on", Element(a, ClosedInterval(-5,5) + ClosedInterval(-5,5)*ConstI)),
        ImageSource("xray_hurwitz_zeta_param")),
    description_xray,
    )

make_entry(ID("56dcbd"),
    Formula(Implies(And(Element(s, SetMinus(CC, Set(1))), Element(a, SetMinus(CC, ZZLessEqual(0)))), Element(HurwitzZeta(s, a), CC))),
    Variables(s, a))

make_entry(ID("ad269f"),
    Formula(Implies(And(Element(s, CC), Less(Re(s), 0), Element(a, CC)), Element(HurwitzZeta(s, a), CC))),
    Variables(s, a))

make_entry(ID("e7224b"),
    Formula(Implies(And(Element(s, SetMinus(RR, Set(1))), Element(a, OpenInterval(0, Infinity))), Element(HurwitzZeta(s, a), RR))),
    Variables(s, a))

make_entry(ID("b0f500"),
    Formula(Implies(And(Element(s, SetMinus(ZZ, Set(1))), Element(a, SetMinus(RR, ZZLessEqual(0)))), Element(HurwitzZeta(s, a), RR))),
    Variables(s, a))

make_entry(ID("cc523f"),
    Formula(Implies(And(Element(s, ZZLessEqual(0)), Element(a, QQ)), Element(HurwitzZeta(s, a), QQ))),
    Variables(s, a))

make_entry(ID("ec2dd5"),
    Formula(Implies(And(Element(s, ZZLessEqual(0)), Element(a, RR)), Element(HurwitzZeta(s, a), RR))),
    Variables(s, a))

make_entry(ID("a5980a"),
    Formula(Implies(And(Element(s, ZZLessEqual(0)), Element(a, CC)), Element(HurwitzZeta(s, a), CC))),
    Variables(s, a))

make_entry(ID("d0b234"),
    Formula(Implies(And(Element(s, Set(1)), Element(a, SetMinus(CC, ZZLessEqual(0)))), Element(HurwitzZeta(s, a), Set(UnsignedInfinity)))),
    Variables(s, a))

make_entry(ID("c5d844"),
    Formula(Implies(And(Element(s, ZZGreaterEqual(2)), Element(a, ZZLessEqual(0))), Element(HurwitzZeta(s, a), Set(UnsignedInfinity)))),
    Variables(s, a))

make_entry(ID("4bf3da"),
    Formula(Implies(Element(a, SetMinus(CC, ZZLessEqual(0))), IsHolomorphic(HurwitzZeta(s, a), ForElement(s, SetMinus(CC, Set(1)))))),
    Variables(a))

make_entry(ID("ea271f"),
    Formula(Implies(Element(a, SetMinus(CC, ZZLessEqual(0))), IsMeromorphic(HurwitzZeta(s, a), ForElement(s, CC)))),
    Variables(a))

make_entry(ID("26418b"),
    Formula(Implies(Element(a, CC), IsHolomorphic(HurwitzZeta(s, a), ForElement(s, Set(t, ForElement(t, CC), Less(Re(t), 0)))))),
    Variables(a))

make_entry(ID("93e149"),
    Formula(Implies(Element(s, SetMinus(CC, Set(1))), IsHolomorphic(HurwitzZeta(s, a), ForElement(a, SetMinus(CC, OpenClosedInterval(-Infinity, 0)))))),
    Variables(s))

make_entry(ID("8c7cdb"),
    Formula(Implies(Element(s, ZZGreaterEqual(2)), IsHolomorphic(HurwitzZeta(s, a), ForElement(a, SetMinus(CC, ZZLessEqual(0)))))),
    Variables(s))

make_entry(ID("05c2dd"),
    Formula(Implies(Element(s, ZZGreaterEqual(2)), IsMeromorphic(HurwitzZeta(s, a), ForElement(a, CC)))),
    Variables(s))

make_entry(ID("f045b3"),
    Formula(Implies(Element(s, ZZLessEqual(0)), IsHolomorphic(HurwitzZeta(s, a), ForElement(a, CC)))),
    Variables(s))

make_entry(ID("af23f7"),
    Formula(Equal(HurwitzZeta(s, 1), RiemannZeta(s))),
    Variables(s),
    Assumptions(Element(s, CC)))

make_entry(ID("b721b4"),
    Formula(Equal(HurwitzZeta(s, 2), RiemannZeta(s) - 1)),
    Variables(s),
    Assumptions(Element(s, CC)))

make_entry(ID("fc6fe0"),
    Formula(Equal(HurwitzZeta(s, 3), RiemannZeta(s) - 1 - 1/2**s)),
    Variables(s),
    Assumptions(Element(s, CC)))

make_entry(ID("6e69fc"),
    Formula(Equal(HurwitzZeta(s, n), RiemannZeta(s) - Sum(1/k**s, For(k, 1, n-1)))),
    Variables(s, n),
    Assumptions(And(Element(s, CC), Element(n, ZZGreaterEqual(1)))))

make_entry(ID("af7d3d"),
    Formula(Equal(HurwitzZeta(s, Div(1,2)), (2**s-1) * RiemannZeta(s))),
    Variables(s),
    Assumptions(Element(s, CC)))

make_entry(ID("c6d6e2"),
    Formula(Equal(HurwitzZeta(s, Div(3,2)), (2**s-1) * RiemannZeta(s) - 2**s)),
    Variables(s),
    Assumptions(Element(s, CC)))

make_entry(ID("6c3523"),
    Formula(Equal(HurwitzZeta(s, Div(1,2) + n), (2**s-1) * RiemannZeta(s) - 2**s * Sum(1/(2*k+1)**s, For(k, 0, n-1)))),
    Variables(s, n),
    Assumptions(And(Element(s, CC), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("8bbb6f"),
    Formula(Equal(HurwitzZeta(s, Div(1,4)) + HurwitzZeta(s, Div(3,4)), 2**s * (2**s-1) * RiemannZeta(s))),
    Variables(s),
    Assumptions(And(Element(s, CC), NotEqual(s, 1))))

make_entry(ID("4d1f6b"),
    Formula(Equal(HurwitzZeta(s, Div(1,6)) + HurwitzZeta(s, Div(5,6)), (2**s-1) * (3**s-1) * RiemannZeta(s))),
    Variables(s),
    Assumptions(And(Element(s, CC), NotEqual(s, 1))))

make_entry(ID("575b8f"),
    Formula(Equal(HurwitzZeta(2, 1), Pi**2 / 6)))

make_entry(ID("ac8d3c"),
    Formula(Equal(HurwitzZeta(2, 2), Pi**2 / 6 - 1)))

make_entry(ID("b4ed44"),
    Formula(Equal(HurwitzZeta(3, 1), RiemannZeta(3))))

make_entry(ID("4dd87c"),
    Formula(Equal(HurwitzZeta(3, 2), RiemannZeta(3) - 1)))

make_entry(ID("2d4828"),
    Formula(Equal(HurwitzZeta(4, 1), Pi**4/90)))

make_entry(ID("33690e"),
    Formula(Equal(HurwitzZeta(4, 2), Pi**4/90 - 1)))

make_entry(ID("868061"),
    Formula(Equal(HurwitzZeta(2, Div(1,2)), Pi**2 / 2)))

make_entry(ID("9417f4"),
    Formula(Equal(HurwitzZeta(3, Div(1,2)), 7 * RiemannZeta(3))))

make_entry(ID("4064f5"),
    Formula(Equal(HurwitzZeta(4, Div(1,2)), Pi**4 / 6)))

make_entry(ID("3e82c3"),
    Formula(Equal(HurwitzZeta(2, Div(1,4)), Pi**2 + 8*ConstCatalan)))

make_entry(ID("951f86"),
    Formula(Equal(HurwitzZeta(2, Div(3,4)), Pi**2 - 8*ConstCatalan)))

make_entry(ID("eda0f3"),
    Formula(Equal(HurwitzZeta(3, Div(1,4)), 28*RiemannZeta(3)+Pi**3)))

make_entry(ID("b347d3"),
    Formula(Equal(HurwitzZeta(3, Div(3,4)), 28*RiemannZeta(3)-Pi**3)))

make_entry(ID("2fabeb"),
    Formula(Equal(HurwitzZeta(3, Div(1,6)), 91*RiemannZeta(3)+2*Sqrt(3)*Pi**3)))

make_entry(ID("edad97"),
    Formula(Equal(HurwitzZeta(3, Div(5,6)), 91*RiemannZeta(3)-2*Sqrt(3)*Pi**3)))

make_entry(ID("84196a"),
    Formula(Equal(HurwitzZeta(n, a), (-1)**n / Factorial(n-1) * DigammaFunction(a, n-1))),
    Variables(n, a),
    Assumptions(And(Element(n, ZZGreaterEqual(2)), Element(a, CC))))

make_entry(ID("532f31"),
    Formula(Equal(HurwitzZeta(1, a), UnsignedInfinity)),
    Variables(a),
    Assumptions(Element(a, SetMinus(CC, ZZLessEqual(0)))))

make_entry(ID("5bdba2"),
    Formula(Equal(HurwitzZeta(-n, a), -(BernoulliPolynomial(n+1, a)/(n+1)))),
    Variables(n, a),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(a, CC))))

make_entry(ID("7dab87"),
    Formula(Equal(HurwitzZeta(-n, 0), -(BernoulliB(n+1)/(n+1)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("d99808"),
    Formula(Equal(HurwitzZeta(0, a), Div(1,2)-a)),
    Variables(a),
    Assumptions(Element(a, CC)))

make_entry(ID("150b3e"),
    Formula(Equal(HurwitzZeta(0, 0), Div(1,2))))

make_entry(ID("3db90c"),
    Formula(Equal(HurwitzZeta(0, Div(1,2)), 0)))

make_entry(ID("6419ac"),
    Formula(Equal(HurwitzZeta(2, a), a**(-2) * Hypergeometric3F2(1, a, a, a+1, a+1, 1))),
    Variables(a),
    Assumptions(Element(a, SetMinus(CC, ZZLessEqual(0)))))

make_entry(ID("448d90"),
    Formula(Equal(HurwitzZeta(s, a), Sum(1/(n+a)**s, For(n, 0, Infinity)))),
    Variables(s, a),
    Assumptions(And(Element(s, CC), Greater(Re(s), 1), Element(a, SetMinus(CC, ZZLessEqual(0))))))

make_entry(ID("77e507"),
    Formula(Equal(HurwitzZeta(s, a, r), (-1)**r * Sum(Log(n+a)**r/(n+a)**s, For(n, 0, Infinity)))),
    Variables(s, a, r),
    Assumptions(And(Element(s, CC), Greater(Re(s), 1), Element(a, SetMinus(CC, ZZLessEqual(0))), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("0bd6aa"),
    Formula(Equal(HurwitzZeta(s, N), Sum(1/n**s, For(n, N, Infinity)))),
    Variables(s, N),
    Assumptions(And(Element(s, CC), Greater(Re(s), 1), Element(N, ZZGreaterEqual(1)))))

make_entry(ID("1699a9"),
    Formula(Equal(HurwitzZeta(s, a), (Pi/(2*(s-1))) * Integral((a-Div(1,2)+ConstI*x)**(1-s) / Cosh(Pi*x)**2, For(x, -Infinity, Infinity)))),
    Variables(s, a),
    Assumptions(And(Element(s, CC), NotEqual(s, 1), Element(a, CC), Greater(Re(a), Div(1,2)))),
    References("https://doi.org/10.1090/mcom/3401"))

make_entry(ID("498036"),
    Formula(Equal(HurwitzZeta(s, a), (1/Gamma(s)) * Integral((x**(s-1) * Exp(-(a*x))) / (1 - Exp(-x)), For(x, 0, Infinity)))),
    Variables(s, a),
    Assumptions(And(Element(s, CC), Greater(Re(s), 1), Element(a, CC), Greater(Re(a), 0))))

make_entry(ID("ed4f6f"),
    Formula(Equal(HurwitzZeta(s, a+1), HurwitzZeta(s, a) - 1/a**s)),
    Variables(s, a),
    Assumptions(And(Element(s, CC), Element(a, CC), NotEqual(s, 1), Or(NotElement(a, ZZLessEqual(0)), Less(Re(s), 0), Equal(s, 0)))))

make_entry(ID("bed7ee"),
    Formula(Equal(HurwitzZeta(s, a+N), HurwitzZeta(s, a) - Sum(1/(n+a)**s, For(n, 0, N-1)))),
    Variables(s, a, N),
    Assumptions(And(Element(s, CC), Element(a, CC), NotEqual(s, 1), Or(NotElement(a, ZZLessEqual(0)), Less(Re(s), 0), Equal(s, 0)), Element(N, ZZGreaterEqual(1)))))

make_entry(ID("95e270"),
    Formula(Equal(HurwitzZeta(s, a+N, r), HurwitzZeta(s, a, r) + (-1)**(r+1) * Sum(Log(a+k)**r / (a+k)**s, For(k, 0, N-1)))),
    Variables(s, a, N, r),
    Assumptions(And(Element(s, CC), Element(a, CC), NotEqual(s, 1), Or(NotElement(a, ZZLessEqual(0)), Less(Re(s), 0)), Element(N, ZZGreaterEqual(1)), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("ebc49c"),
    Formula(Equal(HurwitzZeta(s, a), (1/2**s) * (HurwitzZeta(s, a/2) + HurwitzZeta(s, (a+1)/2)))),
    Variables(s, a),
    Assumptions(And(Element(s, CC), Element(a, CC), NotEqual(s, 1), Greater(Re(a), 0))))

make_entry(ID("7d9feb"),
    Formula(Equal(HurwitzZeta(s, a), (1/N**s) * Sum(HurwitzZeta(s, (a + k)/N), For(k, 0, N-1)))),
    Variables(s, a, N),
    Assumptions(And(Element(s, CC), Element(a, CC), NotEqual(s, 1), Greater(Re(a), 0), Element(N, ZZGreaterEqual(1)))))

make_entry(ID("ba7f85"),
    Formula(Equal(HurwitzZeta(s, N*a), (1/N**s) * Sum(HurwitzZeta(s, a + k/N), For(k, 0, N-1)))),
    Variables(s, a, N),
    Assumptions(And(Element(s, CC), Element(a, CC), NotEqual(s, 1), Greater(Re(a), 0), Element(N, ZZGreaterEqual(1)))))

make_entry(ID("69a1a9"),
    Formula(Equal(HurwitzZeta(1-s, p/q), (2*Gamma(s))/(2*Pi*q)**s * Sum(Cos(Pi*s/2 - 2*Pi*k*p/q) * HurwitzZeta(s, k/q), For(k, 1, q)))),
    Variables(s, p, q),
    Assumptions(And(Element(s, CC), NotElement(s, ZZ), Element(q, ZZGreaterEqual(1)), Element(p, Range(1, q)))))

make_entry(ID("3ba544"),
    Formula(Equal(ComplexDerivative(HurwitzZeta(s, a), For(s, s)), HurwitzZeta(s, a, 1))),
    Variables(s, a),
    Assumptions(And(Element(s, CC), NotEqual(s, 1), Element(a, CC), Greater(Re(a), 0))))

make_entry(ID("d0d03b"),
    Formula(Equal(ComplexDerivative(HurwitzZeta(s, a), For(s, s, r)), HurwitzZeta(s, a, r))),
    Variables(s, a, r),
    Assumptions(And(Element(s, CC), NotEqual(s, 1), Element(a, CC), Greater(Re(a), 0), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("83065e"),
    Formula(Equal(ComplexDerivative(HurwitzZeta(s, a), For(a, a)), -(s*HurwitzZeta(s+1, a)))),
    Variables(s, a),
    Assumptions(And(Element(s, CC), NotElement(s, Set(0, 1)), Element(a, CC), Greater(Re(a), 0))))

make_entry(ID("40c3e2"),
    Formula(Equal(ComplexDerivative(HurwitzZeta(s, a), For(a, a, r)), RisingFactorial(1-s-r, r) * HurwitzZeta(s+r, a))),
    Variables(s, a, r),
    Assumptions(And(Element(s, CC), NotEqual(s, 1), NotEqual(s+r, 1), Element(a, CC), Greater(Re(a), 0), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("d25d10"),
    Formula(Equal(HurwitzZeta(s, a),
        Sum(1/(a+k)**s, For(k, 0, N-1)) +
        (a+N)**(1-s) / (s-1) +
        1/(a+N)**s * (Div(1,2) + Sum((BernoulliB(2*k)/Factorial(2*k)) * (RisingFactorial(s,2*k-1)/(a+N)**(2*k-1)), For(k, 1, M))) -
        Integral((BernoulliPolynomial(2*M, t - Floor(t)) / Factorial(2*M)) * (RisingFactorial(s, 2*M) / (a+t)**(s+2*M)), For(t, N, Infinity)))),
    Variables(s, a, N, M),
    Assumptions(And(Element(s, CC), NotEqual(s, 1), Element(a, CC), Element(N, ZZGreaterEqual(1)), Element(M, ZZGreaterEqual(1)),
        Greater(Re(a+N), 0), Greater(Re(s+2*M-1), 0), Or(NotElement(a, ZZLessEqual(0)), Less(Re(s), 0), Equal(s, 0)))),
    References("http://dx.doi.org/10.1007/s11075-014-9893-1"))

make_entry(ID("febdd2"),
    Formula(Equal(RiemannZeta(s), HurwitzZeta(s,1))),
    Variables(s),
    Assumptions(Element(s, CC)))

make_entry(ID("4228cd"),
    Formula(Equal(BernoulliPolynomial(n,z), -(n*HurwitzZeta(1-n,z)))),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(z, CC))))

make_entry(ID("f3b870"),
    Formula(Equal(LogGamma(z), HurwitzZeta(0, z, 1) + Log(2*Pi)/2)),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, ZZLessEqual(0)))))

make_entry(ID("53026a"),
    Formula(Equal(Gamma(z), Sqrt(2*Pi) * Exp(HurwitzZeta(0, z, 1)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, ZZLessEqual(0)))))

make_entry(ID("693e0e"),
    Formula(Equal(DigammaFunction(z), ComplexLimit(Brackets(1/(s-1) - HurwitzZeta(s,z)), For(s, 1)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, ZZLessEqual(0)))))

make_entry(ID("52ea5f"),
    Formula(Equal(PolyLog(s, z), (Gamma(1-s) / (2*Pi)**(1-s)) * (ConstI**(1-s) * HurwitzZeta(1-s, Div(1,2) + Log(-z) / (2*Pi*ConstI))
        + ConstI**(s-1) * HurwitzZeta(1-s, Div(1,2) - Log(-z) / (2*Pi*ConstI))))),
    Variables(s, z),
    Assumptions(And(Element(s, CC), Element(z, CC), NotElement(z, Set(0, 1)), NotElement(s, ZZGreaterEqual(0)))))

def_Topic(
    Title("Imaginary unit"),
    Section("Definitions"),
    Entries(
        "be8e05",
    ),
    Section("Domain"),
    Entries(
        "88ad6f",
        "cd8a07",
        "a08fb9",
    ),
    Section("Quadratic equations"),
    Entries(
        "08ad28",
    ),
    Section("Numerical value"),
    Entries(
        "72cef9",
        "27586f",
    ),
    Section("Complex parts"),
    Entries(
        "65bbd6",
        "249fd6",
        "61784f",
        "735409",
        "089f85",
        "09c107",
    ),
    Section("Transformations"),
    Entries(
        "31b0df",
        "8be138",
        "e0425a",
        "c12a41",
        "44ae4a",
        "67c262",
        "f8a56f",
        "15f92d",
        "0ad836",
        "a39534",
    ),
    Section("Special functions at this value"),
    Entries(
        "c331da",         "9c93bb",
        "3ac0ce",
        "208da7",
    ),
)

make_entry(ID("be8e05"),
    SymbolDefinition(ConstI, ConstI, "Imaginary unit"),
    Description("Represents the constant", i, ", the imaginary unit."))

make_entry(ID("88ad6f"),
    Formula(Element(ConstI, CC)))

make_entry(ID("cd8a07"),
    Formula(Element(ConstI, AlgebraicNumbers)))

make_entry(ID("a08fb9"),
    Formula(NotElement(ConstI, RR)))

make_entry(ID("08ad28"),
    Formula(Equal(Solutions(Brackets(Equal(x**2 + 1, 0)), ForElement(x, CC)), Set(ConstI, -ConstI))))

make_entry(ID("72cef9"),
    Formula(Equal(ConstI, Sqrt(-1))))

make_entry(ID("27586f"),
    Formula(Equal(ConstI, Pow(-1, Div(1,2)))))

make_entry(ID("65bbd6"),
    Formula(Equal(Abs(ConstI), 1)))

make_entry(ID("249fd6"),
    Formula(Equal(Re(ConstI), 0)))

make_entry(ID("61784f"),
    Formula(Equal(Im(ConstI), 1)))

make_entry(ID("09c107"),
    Formula(Equal(Sign(ConstI), ConstI)))

make_entry(ID("31b0df"),
    Formula(Equal(ConstI**2, -1)))

make_entry(ID("8be138"),
    Formula(Equal(ConstI**3, -ConstI)))

make_entry(ID("e0425a"),
    Formula(Equal(ConstI**4, 1)))

make_entry(ID("c12a41"),
    Formula(Equal(ConstI**n, Cases(
        Tuple(1, CongruentMod(n, 0, 4)),
        Tuple(ConstI, CongruentMod(n, 1, 4)),
        Tuple(-1, CongruentMod(n, 2, 4)),
        Tuple(-ConstI, CongruentMod(n, 3, 4))))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("44ae4a"),
    Formula(Equal(Conjugate(ConstI), -ConstI)))

make_entry(ID("67c262"),
    Formula(Equal(1/ConstI, -ConstI)))

make_entry(ID("f8a56f"),
    Formula(Equal(ConstI**z, Exp(Pi*ConstI*z/2))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("15f92d"),
    Formula(Equal(ConstI**z, Cos(Pi/2 * z) + Sin(Pi/2 * z) * ConstI)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("a39534"),
    Formula(Equal(ConstI**ConstI, Exp(-(Pi/2)))))

make_entry(ID("9c93bb"),
    Formula(Equal(Abs(Gamma(ConstI)), Sqrt(Pi/Sinh(Pi)))))

make_entry(ID("3ac0ce"),
    Formula(Equal(Im(DigammaFunction(ConstI)), Div(1,2)*(Pi*Coth(Pi) + 1))))

make_entry(ID("208da7"),
    Formula(Equal(PolyLog(2, ConstI), -(Pi**2/48) + ConstCatalan*ConstI)))

def_Topic(
    Title("Integer sequences"),
    Section("Definitions"),
    Entries(
        "aac67f",
        "963387",
    ),
    Section("Core sequences"),
    Description("Main topic: ", TopicReference("Prime numbers")),
    Entries(
        "9d0839",
    ),
    Description("Main topic: ", TopicReference("Partition function")),
    Entries(
        "8eed2c",
    ),
    Description("Main topic: ", TopicReference("Fibonacci numbers")),
    Entries(
        "373aa1",
    ),
    Description("Main topic: ", TopicReference("Bell numbers")),
    Entries(
        "60dc3e",
    ),
    Description("Main topic: ", TopicReference("Factorials and binomial coefficients")),
    Entries(
        "d12aa0",
    ),
    Description("Prime counting function - Main topic: ", TopicReference("Prime numbers")),
    Entries(
        "4fa169",
    ),
    Description("Main topic: ", TopicReference("Landau's function")),
    Entries(
        "6af603",
    ),
    Description("Main topic: ", TopicReference("Pi")),
    Entries(
        "483547",
    ),
    Description("Main topic: ", TopicReference("Bernoulli numbers and polynomials")),
    Entries(
        "b6111c",
    ),
)

make_entry(ID("aac67f"),
    SymbolDefinition(SloaneA, SloaneA(X, n), "Sequence X in Sloane's OEIS"),
    Description(SourceForm(SloaneA(X, n)), ", rendered as", SloaneA(X, n),
        "gives the integer at position", n, "in sequence number", X,
        "in Sloane's On-Line Encyclopedia of Integer Sequences (OEIS). ",
        "The identifier", X, "can be specified as an integer (e.g. 55) or a text (e.g. \"A000055\")"),
    Description("Semantically, this function represents the intended infinite extension of each (non-finite) ",
        "OEIS sequence although the OEIS database itself of course only lists a finite number of terms."))

make_entry(ID("963387"),
    Formula(Implies(And(Element(X, ZZGreaterEqual(1)), Element(n, ZZ)), Element(SloaneA(X, n), Union(ZZ, Set(Undefined))))),
    Variables(X, n))

make_entry(ID("9d0839"),
    Formula(Equal(PrimeNumber(n), SloaneA("A000040", n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("8eed2c"),
    Formula(Equal(PartitionsP(n), SloaneA("A000041", n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("373aa1"),
    Formula(Equal(Fibonacci(n), SloaneA("A000045", n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("60dc3e"),
    Formula(Equal(BellNumber(n), SloaneA("A000110", n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("d12aa0"),
    Formula(Equal(Factorial(n), SloaneA("A000142", n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("4fa169"),
    Formula(Equal(PrimePi(n), SloaneA("A000720", n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("6af603"),
    Formula(Equal(LandauG(n), SloaneA("A000793", n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("483547"),
    Formula(Equal(Pi, Sum(SloaneA("A000796", n) * 10**(1-n), For(n, 1, Infinity)))))

make_entry(ID("b6111c"),
    Formula(Equal(BernoulliB(n), SloaneA("A027641", n) / SloaneA("A027642", n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

def_Topic(
    Title("Definite integrals"),
    Section("Powers"),
    Entries(
        "463077",
    ),
    Section("Exponential functions"),
    Entries(
        "02e3d2",
        "9a06fb",
        "f8de2e",
        "16a1f4",
    ),
    Section("Sophomore's dream"),
    Entries(
        "b77faf",
        "66fefb",
    ),
)

make_entry(ID("463077"),
    Formula(Equal(Integral(1/(a*x+b)**c, For(x, z, Infinity)),
        1/(a * (c-1) * (a*z+b)**(c-1)))),
    Variables(a, b, c, z),
    Assumptions(And(Element(a, RR), Element(b, RR), Element(c, RR),
        Element(z, RR), Greater(a, 0), Greater(a*z+b, 0), Greater(c, 1))))

make_entry(ID("02e3d2"),
    Formula(Equal(Integral(Exp(-(a*x)+b), For(x, z, Infinity)),
        Exp(b-a*z)/a)),
    Variables(a, b, z),
    Assumptions(And(Element(a, CC), Element(b, CC), Element(z, CC), Greater(Re(a), 0))))

make_entry(ID("9a06fb"),
    Formula(Equal(Integral(x**c * Exp(-(a*x)+b), For(x, z, Infinity)),
        Exp(b) / a**(c+1) * UpperGamma(c+1, a*z))),
    Variables(a, b, c, z),
    Assumptions(And(Element(a, RR), Element(b, RR), Element(c, RR), Element(z, RR),
        Greater(a, 0), Greater(c, 0), Greater(z, 0))))

make_entry(ID("f8de2e"),
    Formula(Equal(Integral(Exp(-(a*x**2)+b), For(x, z, Infinity)),
        Exp(b) / 2 * Sqrt(Pi/a) * Erfc(Sqrt(a) * z))),
    Variables(a, b, z),
    Assumptions(And(Element(a, CC), Element(b, CC), Element(z, CC),
        Greater(Re(a), 0))))

make_entry(ID("16a1f4"),
    Formula(Equal(Integral(Exp(-(a*x**c)+b), For(x, z, Infinity)),
        Exp(b) / (c * a**(1/c)) * UpperGamma(1/c, a*z**c))),
    Variables(a, b, c, z),
    Assumptions(And(Element(a, RR), Element(b, RR), Element(c, RR), Element(z, RR),
        Greater(a, 0), Greater(c, 0), Greater(z, 0))))

make_entry(ID("b77faf"),
    Formula(Equal(Integral(x**(-x), For(x, 0, 1)), Sum(n**(-n), For(n, 1, Infinity)))))

make_entry(ID("66fefb"),
    Formula(Equal(Integral(x**x, For(x, 0, 1)), Sum((-1)**(n+1) * n**(-n), For(n, 1, Infinity)))))

def_Topic(
    Title("Jacobi theta functions"),
    Section("Definitions"),
    Entries(
        "f96eac",
    ),
    Section("Illustrations"),
    Description("Main topic:", TopicReference("Illustrations of Jacobi theta functions")),
    Subsection("Variable argument"),
    Entries(
        "bac5fb",
    ),
    Subsection("Variable lattice parameter"),
    Entries(
        "e2035a",
    ),
    Section("Series and product representations"),
    Description("Main topic:", TopicReference("Series and product representations of Jacobi theta functions")),
    Subsection("Trigonometric Fourier series"),
    Entries(
        "2ba423",
        "06633e",
        "f3e75c",
        "8a34d1",
    ),
    Subsection("Jacobi triple product"),
    Entries(
        "13d2a1",
    ),
    Section("Zeros"),
    Entries(
        "154c44",
        "ad1eaf",
        "caf10a",
        "926b2c",
    ),
    Section("Specific values"),
    Description("Main topic:", TopicReference("Specific values of Jacobi theta functions")),
    Entries(
        "8f43ab",
        "d15f11",
        "7d7c65",
    ),
    Section("Argument transformations"),
    Description("Main topic:", TopicReference("Argument transformations for Jacobi theta functions")),
    Subsection("Even-odd symmetry"),
    Entries(
        "59f8e1",
        "fb55cb",
        "380076",
        "4f939e",
    ),
    Subsection("Conjugate symmetry"),
    Entries(
        "a891da",
    ),
    Subsection("Periodicity"),
    Entries(
        "2faeb9",
        "b46534",
        "e56f77",
        "4448f1",
    ),
    Subsection("Quasi-periodicity"),
    Entries(
        "43fa0e",
        "d29148",
        "2e4da0",
        "8d6a1d",
    ),
    Section("Lattice transformations"),
    Description("Main topic:", TopicReference("Lattice transformations for Jacobi theta functions")),
    Subsection("Basic modular transformations"),
    Entries(
        "6b2078",
        "cde93e",
        "9c1e9a",
        "a5c258",
        "e8ce0b",
        "06319a",
        "c4b16c",
        "ed8ba7",
    ),
    Subsection("General modular transformations"),
    Entries(
        "4d8b0f",
    ),
    Subsection("Multiplication of the lattice parameter"),
    Entries(
        "69b32e",
        "3479be",
        "53fef4",
    ),
    Section("Sums and products"),
    Description("See also", TopicReference("Argument transformations for Jacobi theta functions"), "and",
        TopicReference("Lattice transformations for Jacobi theta functions"), "for sum and product identities involving transformations."),
    Subsection("Fourth powers"),
    Entries(
        "1fbc09",
        "08822c",
        "5a3ebf",
        "e08bb4",
    ),
    Subsection("Sums of squares"),
    Entries(
        "fa7251",
        "265d9c",
        "0e2635",
        "6fad93",
        "abbe42",
        "1c67c8",
    ),
    Section("Differential equations"),
    Description("Main topic:", TopicReference("Differential equations for Jacobi theta functions")),
    Subsection("Notation and conversion to argument derivatives"),
    Entries(
        "a222ed",
        "37e644",
    ),
    Subsection("Heat equation"),
    Entries(
        "ebc673",
    ),
    Subsection("Jacobi's differential equation"),
    Entries(
        "936694",
    ),
    Subsection("Derivatives of ratios"),
    Entries(
        "cb493d",
    ),
    Section("Integrals"),
    Description("Main topic:", TopicReference("Integrals of Jacobi theta functions")),
    Subsection("Laplace transforms"),
    Entries(
        "8a857c",
        "74be8f",
        "026e44",
        "a46f94",
    ),
    Subsection("Mellin transforms"),
    Entries(
        "9376ec",
        "41631f",
        "709905",
    ),
    Subsection("Constant definite integrals"),
    Entries(
        "ecb406",
        "727715",
    ),
    Section("Representation of other functions"),
    Subsection("Modular forms and functions"),
    Entries(
        "737805",
        "cedcfc",
        "5b9c02",
        "903962",
        "04d3a6",
        "cc579c",
        "10f3b2",
    ),
    Subsection("Weierstrass elliptic functions"),
    Entries(
        "af0dfc",
        "0207dc",
        "b96c9d",
    ),
    Section("Representation by other functions"),
    Entries(
        "a9c825",
        "85b2ff",
        "9448f2",
        "557b19",
    ),
    Section("Approximations"),
    Description("Main topic:", TopicReference("Approximations of Jacobi theta functions")),
    Entries(
        "24a793",
    ),
)

def_Topic(
    Title("Approximations of Jacobi theta functions"),
    Description("See", TopicReference("Jacobi theta functions"), "for an introduction to these functions."),
    Section("Approximation by truncated Fourier series"),
    Entries(
        "001234",
        "dac0aa",
        "24a793",
        "c574fd",
    ),
)

def_Topic(
    Title("Illustrations of Jacobi theta functions"),
    SeeTopics("Jacobi theta functions"),
    Section("X-ray plots, variable argument"),
    Subsection("Square lattice"),
    Entries(
        "d7a4e5",
        "a75407",
        "bac5fb",
        "8c9f96",
    ),
    Subsection("Rectangular lattice"),
    Entries(
        "56acfe",
        "e47bfb",
        "d98ccc",
        "7902fc",
    ),
    Subsection("Nonrectangular lattice"),
    Entries(
        "c4febd",
        "fa8e96",
        "80f43a",
        "0ce854",
    ),
    Section("X-ray plots, variable lattice parameter"),
    Subsection("Zero argument (theta constants)"),
    Entries(
        "ad8a9a",
        "6636f2",
        "9522c6",
    ),
    Subsection("Nonzero argument"),
    Entries(
        "e2035a",
        "9b868d",
        "c2c002",
        "d3b45d",
    ),
)

def_Topic(
    Title("Series and product representations of Jacobi theta functions"),
    Description("See", TopicReference("Jacobi theta functions"), "for an introduction to these functions."),
    Section("Fourier series"),
    Subsection("Trigonometric Fourier series"),
    Entries(
        "2ba423",
        "06633e",
        "f3e75c",
        "8a34d1",
    ),
    Subsection("Exponential Fourier series"),
    Entries(
        "700d94",
        "495a98",
        "2f97f5",
        "d923de",
    ),
    Subsection("Pure exponential series"),
    Entries(
        "ed4ce5",
        "7cb651",
        "580ba0",
        "27c319",
    ),
    Section("Fourier series for derivatives"),
    Subsection("Exponential Fourier series"),
    Entries(
        "2ae142",
        "42d832",
        "f551ca",
        "1842d9",
    ),
    Section("Infinite products"),
    Subsection("Infinite q-products with trigonometric factors"),
    Entries(
        "024a84",
        "d6a799",
        "77aed2",
        "2a2a38",
    ),
    Subsection("Infinite q-products with exponential factors"),
    Entries(
        "39b699",
        "465810",
        "21851b",
        "d45548",
    ),
    Subsection("Jacobi triple product"),
    Entries(
        "13d2a1",
    ),
    Subsection("Trigonometric infinite products"),
    Entries(
        "d2f183",
        "64081c",
        "816057",
        "3c88a7",
    ),
    Section("Series for logarithmic derivatives"),
    Subsection("Lambert series with trigonometric factors"),
    Entries(
        "dfbddd",
        "c7f7a5",
        "44e8fb",
        "1848f1",
    ),
    Subsection("Reciprocal trigonometric series"),
    Entries(
        "d81f05",
        "561d75",
    ),
    Section("Taylor series"),
    Entries(
        "1cdd7b",
        "d637c5",
    ),
    Section("Theta constants"),
    Subsection("Fourier series (q-series) with linear exponents"),
    Entries(
        "a5e568",
        "7c90eb",
        "df88a0",
        "290f36",
    ),
    Subsection("Infinite products for quotients"),
    Entries(
        "a0ba58",
        "f1f42f",
    ),
    Subsection("Lambert series"),
    Entries(
        "e4e707",
        "0650f8",
        "c743eb",
        "8a316c",
        "dc7c83",
        "1cec67",
        "4d26ec",
    ),
    Subsection("Reciprocal trigonometric series"),
    Entries(
        "9b7d8c",
        "f8cd8f",
        "7b3ac4",
        "ab1c77",
    ),
)

def_Topic(
    Title("Lattice transformations for Jacobi theta functions"),
    Description("This topic lists identities for how Jacobi theta functions", JacobiTheta(j,z,tau), "transform when the lattice parameter", tau, " is transformed. ",
        "See", TopicReference("Argument transformations for Jacobi theta functions"), "for identities involving the argument", z, "when", tau, "is fixed.",
        "See", TopicReference("Jacobi theta functions"), "for other properties of these functions."),
    Section("Reflection symmetry"),
    Entries(
        "fe1b96",
    ),
    Section("Basic modular transformations"),
    Subsection("Single shift"),
    Entries(
        "6b2078",
        "cde93e",
        "9c1e9a",
        "a5c258",
    ),
    Subsection("Single inversion"),
    Entries(
        "e8ce0b",
        "06319a",
        "c4b16c",
        "ed8ba7",
    ),
    Section("General shifts"),
    Entries(
        "1fa8e7",
        "d0dfba",
        "28b4c3",
        "64f0a5",
        "b978f0",
        "d11b7f",
        "772c88",
        "19acd8",
        "b9c650",
        "4cf228",
        "abc1e7",
        "fb4b1b",
    ),
    Section("Helper functions for general modular transformations"),
    Subsection("Index permutations"),
    Entries(
        "20172a",
        "9bda2f",
    ),
    Subsection("Roots of unity"),
    Entries(
        "c4714a",
        "03356b",
        "3c56c7",
        "fc3ef5",
        "89e79d",
    ),
    Section("General modular transformations"),
    Entries(
        "4d8b0f",
        "100d3c",
    ),
    Section("Half parameter"),
    Subsection("Theta constants"),
    Entries(
        "59fd23",
        "de7918",
        "476642",
        "7527f1",
        "59184e",
    ),
    Subsection("General arguments"),
    Entries(
        "66eb8b",
        "a9cdda",
        "e6d333",
        "69b32e",
        "c92a6f",
        "95e508",
    ),
    Section("Double parameter"),
    Subsection("Theta constants"),
    Entries(
        "9a2054",
        "21c2f7",
        "c3d8c2",
        "f14471",
        "46f244",
    ),
    Subsection("General arguments"),
    Entries(
        "e13fe9",
        "7137a2",
        "db4e29",
        "f12569",
        "3479be",
        "7e0002",
        "0a9ec2",
        "686ce0",
    ),
    Section("Quadruple parameter"),
    Entries(
        "a0a1ee",
        "53fef4",
        "27b169",
        "a255e1",
        "0096a8",
        "fc3c44",
    ),
)

def_Topic(
    Title("Differential equations for Jacobi theta functions"),
    Description("This topic lists identities involving derivatives of Jacobi theta functions", JacobiTheta(j,z,tau), ". ",
        "See the topic", TopicReference("Jacobi theta functions"), "for other properties of these functions."),
    Section("Fundamentals"),
    Subsection("Notation for argument derivatives"),
    Entries(
        "a222ed",
    ),
    Subsection("Conversion of parameter derivatives to argument derivatives"),
    Entries(
        "37e644",
    ),
    Section("Heat equation"),
    Entries(
        "ebc673",
    ),
    Section("Jacobi's differential equation"),
    Entries(
        "936694",
    ),
    Section("Relations at zero"),
    Entries(
        "d967af",
        "cdbdc7",
        "a19141",
        "901934",
        "f2e28a",
        "278274",
        "59184e",          "46f244",      ),
    Section("Derivatives of ratios"),
    Entries(
        "cb493d",
        "d41a95",
        "a4eecf",
        "713b6b",
        "64b65d",
        "89985a",
        "0373dc",
        "2853d4",
        "378949",
        "a0552b",
        "775637",
        "23077c",
    ),
)

make_entry(ID("d7a4e5"),
    Image(Description("X-ray of", JacobiTheta(1, z, ConstI), "on", Element(z, ClosedInterval(-2,2) + ClosedInterval(-2,2)*ConstI)),
        ImageSource("xray_jacobi_theta_1_z")),
    description_xray)

make_entry(ID("a75407"),
    Image(Description("X-ray of", JacobiTheta(2, z, ConstI), "on", Element(z, ClosedInterval(-2,2) + ClosedInterval(-2,2)*ConstI)),
        ImageSource("xray_jacobi_theta_2_z")),
    description_xray)

make_entry(ID("bac5fb"),
    Image(Description("X-ray of", JacobiTheta(3, z, ConstI), "on", Element(z, ClosedInterval(-2,2) + ClosedInterval(-2,2)*ConstI)),
        ImageSource("xray_jacobi_theta_3_z")),
    description_xray)

make_entry(ID("8c9f96"),
    Image(Description("X-ray of", JacobiTheta(4, z, ConstI), "on", Element(z, ClosedInterval(-2,2) + ClosedInterval(-2,2)*ConstI)),
        ImageSource("xray_jacobi_theta_4_z")),
    description_xray)

make_entry(ID("56acfe"),
    Image(Description("X-ray of", JacobiTheta(1, z, Div(1,2)*ConstI), "on", Element(z, ClosedInterval(-2,2) + ClosedInterval(-2,2)*ConstI)),
        ImageSource("xray_jacobi_theta_1_z_b")),
    description_xray)

make_entry(ID("e47bfb"),
    Image(Description("X-ray of", JacobiTheta(2, z, Div(1,2)*ConstI), "on", Element(z, ClosedInterval(-2,2) + ClosedInterval(-2,2)*ConstI)),
        ImageSource("xray_jacobi_theta_2_z_b")),
    description_xray)

make_entry(ID("d98ccc"),
    Image(Description("X-ray of", JacobiTheta(3, z, Div(1,2)*ConstI), "on", Element(z, ClosedInterval(-2,2) + ClosedInterval(-2,2)*ConstI)),
        ImageSource("xray_jacobi_theta_3_z_b")),
    description_xray)

make_entry(ID("7902fc"),
    Image(Description("X-ray of", JacobiTheta(4, z, Div(1,2)*ConstI), "on", Element(z, ClosedInterval(-2,2) + ClosedInterval(-2,2)*ConstI)),
        ImageSource("xray_jacobi_theta_4_z_b")),
    description_xray)

make_entry(ID("c4febd"),
    Image(Description("X-ray of", JacobiTheta(1, z, Div(1,4)+Div(3,4)*ConstI), "on", Element(z, ClosedInterval(-2,2) + ClosedInterval(-2,2)*ConstI)),
        ImageSource("xray_jacobi_theta_1_z_c")),
    description_xray)

make_entry(ID("fa8e96"),
    Image(Description("X-ray of", JacobiTheta(2, z, Div(1,4)+Div(3,4)*ConstI), "on", Element(z, ClosedInterval(-2,2) + ClosedInterval(-2,2)*ConstI)),
        ImageSource("xray_jacobi_theta_2_z_c")),
    description_xray)

make_entry(ID("80f43a"),
    Image(Description("X-ray of", JacobiTheta(3, z, Div(1,4)+Div(3,4)*ConstI), "on", Element(z, ClosedInterval(-2,2) + ClosedInterval(-2,2)*ConstI)),
        ImageSource("xray_jacobi_theta_3_z_c")),
    description_xray)

make_entry(ID("0ce854"),
    Image(Description("X-ray of", JacobiTheta(4, z, Div(1,4)+Div(3,4)*ConstI), "on", Element(z, ClosedInterval(-2,2) + ClosedInterval(-2,2)*ConstI)),
        ImageSource("xray_jacobi_theta_4_z_c")),
    description_xray)

make_entry(ID("ad8a9a"),
    Image(Description("X-ray of", JacobiTheta(2, 0, tau), "on", Element(tau, ClosedInterval(-Div(5,2),Div(5,2)) + ClosedInterval(0,2)*ConstI)),
        ImageSource("xray_jacobi_theta_2_tau")),
    description_xray)

make_entry(ID("6636f2"),
    Image(Description("X-ray of", JacobiTheta(3, 0, tau), "on", Element(tau, ClosedInterval(-Div(5,2),Div(5,2)) + ClosedInterval(0,2)*ConstI)),
        ImageSource("xray_jacobi_theta_3_tau")),
    description_xray)

make_entry(ID("9522c6"),
    Image(Description("X-ray of", JacobiTheta(4, 0, tau), "on", Element(tau, ClosedInterval(-Div(5,2),Div(5,2)) + ClosedInterval(0,2)*ConstI)),
        ImageSource("xray_jacobi_theta_4_tau")),
    description_xray)

make_entry(ID("e2035a"),
    Image(Description("X-ray of", JacobiTheta(1, Div(1,3)+Div(3,4)*ConstI, tau), "on", Element(tau, ClosedInterval(-Div(5,2),Div(5,2)) + ClosedInterval(0,2)*ConstI)),
        ImageSource("xray_jacobi_theta_1_tau_b")),
    description_xray)

make_entry(ID("9b868d"),
    Image(Description("X-ray of", JacobiTheta(2, Div(1,3)+Div(3,4)*ConstI, tau), "on", Element(tau, ClosedInterval(-Div(5,2),Div(5,2)) + ClosedInterval(0,2)*ConstI)),
        ImageSource("xray_jacobi_theta_2_tau_b")),
    description_xray)

make_entry(ID("c2c002"),
    Image(Description("X-ray of", JacobiTheta(3, Div(1,3)+Div(3,4)*ConstI, tau), "on", Element(tau, ClosedInterval(-Div(5,2),Div(5,2)) + ClosedInterval(0,2)*ConstI)),
        ImageSource("xray_jacobi_theta_3_tau_b")),
    description_xray)

make_entry(ID("d3b45d"),
    Image(Description("X-ray of", JacobiTheta(4, Div(1,3)+Div(3,4)*ConstI, tau), "on", Element(tau, ClosedInterval(-Div(5,2),Div(5,2)) + ClosedInterval(0,2)*ConstI)),
        ImageSource("xray_jacobi_theta_4_tau_b")),
    description_xray)

make_entry(ID("f96eac"),
    SymbolDefinition(JacobiTheta, JacobiTheta(j,z,tau), "Jacobi theta function"),
    Description(SourceForm(JacobiTheta(j,z,tau)), ", rendered as", JacobiTheta(j,z,tau), ", denotes a Jacobi theta function. ",
        "There are four Jacobi theta functions, identified by the index", Element(j, Set(1,2,3,4)), "."),
    Description("The input", z, "is called the argument and can be any complex number. ",
        "The input", tau, "is called the lattice parameter and must be a complex number with positive imaginary part."),
    Description("The values of the Jacobi theta functions at", Equal(z, 0), "are known as theta constants."),
    Description("Called with four arguments, ", SourceForm(JacobiTheta(j,z,tau,r)), ", rendered as",
        JacobiTheta(j,z,tau,1), ", ",
        JacobiTheta(j,z,tau,2), ", ",
        JacobiTheta(j,z,tau,3), " (", LessEqual(1, r, 3), "), or",
        JacobiTheta(j,z,tau,r), ", represents the order", r, "derivative of the Jacobi theta function with respect to the argument", z, ".",
        "Derivatives with respect to the lattice parameter", tau, "(and mixed derivatives) can always be converted to derivatives with respect to", z, ", using", EntryReference("37e644"), "."),
    Description("The Jacobi theta functions are defined by the respective Fourier series (",
        EntryReference("700d94"), ", ",
        EntryReference("495a98"), ", ",
        EntryReference("2f97f5"), ", ",
        EntryReference("d923de"), "). ",
        "It is important to note that Fungrim defines theta functions with a factor", Pi, "applied to the argument", z,
        "in the Fourier series, for uniformity with the lattice parameter", tau, ". Many authors omit this scaling factor or replace the input", tau,
        "by", Equal(q, Exp(Pi*ConstI*tau)), ". Other conventions exist in the mathematical literature as well, ",
        "so care is required when using different reference works."),
    Description("The following table lists conditions such that", SourceForm(JacobiTheta(j,z,tau)), "or", SourceForm(JacobiTheta(j,z,tau,r)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(And(Element(j, Set(1,2,3,4)), Element(z, CC), Element(tau, HH)), Element(JacobiTheta(j,z,tau), CC)),
        Tuple(And(Element(j, Set(1,2,3,4)), Element(z, CC), Element(tau, HH), Element(r, ZZGreaterEqual(0))), Element(JacobiTheta(j,z,tau,r), CC)),
      )),
    References(
        "https://dlmf.nist.gov/20",
        "http://functions.wolfram.com/EllipticFunctions/EllipticTheta1/introductions/JacobiThetas/")
    )

make_entry(ID("700d94"),
    Formula(Equal(JacobiTheta(1,z,tau), Where(-ConstI * Exp(Pi*ConstI*tau/4) * Sum((-1)**n * q**(n*(n+1)) * w**(2*n+1), For(n, -Infinity, Infinity)),
        Equal(q, Exp(Pi*ConstI*tau)), Equal(w, Exp(Pi*ConstI*z))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("495a98"),
    Formula(Equal(JacobiTheta(2,z,tau), Where(Exp(Pi*ConstI*tau/4) * Sum(q**(n*(n+1)) * w**(2*n+1), For(n, -Infinity, Infinity)),
        Equal(q, Exp(Pi*ConstI*tau)), Equal(w, Exp(Pi*ConstI*z))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("2f97f5"),
    Formula(Equal(JacobiTheta(3,z,tau), Where(Sum(q**(n**2) * w**(2*n), For(n, -Infinity, Infinity)),
        Equal(q, Exp(Pi*ConstI*tau)), Equal(w, Exp(Pi*ConstI*z))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("d923de"),
    Formula(Equal(JacobiTheta(4,z,tau), Where(Sum((-1)**n * q**(n**2) * w**(2*n), For(n, -Infinity, Infinity)),
        Equal(q, Exp(Pi*ConstI*tau)), Equal(w, Exp(Pi*ConstI*z))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("ed4ce5"),
    Formula(Equal(JacobiTheta(1,z,tau), Sum(Exp(Pi*ConstI*((n+Div(1,2))**2*tau + (2*n+1)*z + n - Div(1,2))), For(n, -Infinity, Infinity)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("7cb651"),
    Formula(Equal(JacobiTheta(2,z,tau), Sum(Exp(Pi*ConstI*((n+Div(1,2))**2*tau + (2*n+1)*z)), For(n, -Infinity, Infinity)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("580ba0"),
    Formula(Equal(JacobiTheta(3,z,tau), Sum(Exp(Pi*ConstI*(n**2*tau + 2*n*z)), For(n, -Infinity, Infinity)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("27c319"),
    Formula(Equal(JacobiTheta(4,z,tau), Sum(Exp(Pi*ConstI*(n**2*tau + 2*n*z + n)), For(n, -Infinity, Infinity)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("2ba423"),
    Formula(Equal(JacobiTheta(1,z,tau), Where(2 * Exp(Pi*ConstI*tau/4) * Sum((-1)**n * q**(n*(n+1)) * Sin((2*n+1)*Pi*z), For(n, 0, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("06633e"),
    Formula(Equal(JacobiTheta(2,z,tau), Where(2 * Exp(Pi*ConstI*tau/4) * Sum(q**(n*(n+1)) * Cos((2*n+1)*Pi*z), For(n, 0, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("f3e75c"),
    Formula(Equal(JacobiTheta(3,z,tau), Where(1 + 2 * Sum(q**(n**2) * Cos(2*n*Pi*z), For(n, 1, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("8a34d1"),
    Formula(Equal(JacobiTheta(4,z,tau), Where(1 + 2 * Sum((-1)**n * q**(n**2) * Cos(2*n*Pi*z), For(n, 1, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("2ae142"),
    Formula(Equal(JacobiTheta(1,z,tau,r), Where(-ConstI * (Pi*ConstI)**r * Exp(Pi*ConstI*tau/4) * Sum((-1)**n * (2*n+1)**r * q**(n*(n+1)) * w**(2*n+1), For(n, -Infinity, Infinity)),
        Equal(q, Exp(Pi*ConstI*tau)), Equal(w, Exp(Pi*ConstI*z))))),
    Variables(z, tau, r),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("42d832"),
    Formula(Equal(JacobiTheta(2,z,tau,r), Where((Pi*ConstI)**r * Exp(Pi*ConstI*tau/4) * Sum((2*n+1)**r * q**(n*(n+1)) * w**(2*n+1), For(n, -Infinity, Infinity)),
        Equal(q, Exp(Pi*ConstI*tau)), Equal(w, Exp(Pi*ConstI*z))))),
    Variables(z, tau, r),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("f551ca"),
    Formula(Equal(JacobiTheta(3,z,tau,r), Where((2*Pi*ConstI)**r * Sum(n**r * q**(n**2) * w**(2*n), For(n, -Infinity, Infinity)),
        Equal(q, Exp(Pi*ConstI*tau)), Equal(w, Exp(Pi*ConstI*z))))),
    Variables(z, tau, r),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("1842d9"),
    Formula(Equal(JacobiTheta(4,z,tau,r), Where((2*Pi*ConstI)**r * Sum((-1)**n * n**r * q**(n**2) * w**(2*n), For(n, -Infinity, Infinity)),
        Equal(q, Exp(Pi*ConstI*tau)), Equal(w, Exp(Pi*ConstI*z))))),
    Variables(z, tau, r),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("024a84"),
    Formula(Equal(JacobiTheta(1,z,tau), Where(2 * Exp(Pi*ConstI*tau/4) * Sin(Pi*z) *
        Product((1-q**(2*n))*(1-2*q**(2*n)*Cos(2*Pi*z) + q**(4*n)), For(n, 1, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("d6a799"),
    Formula(Equal(JacobiTheta(2,z,tau), Where(2 * Exp(Pi*ConstI*tau/4) * Cos(Pi*z) *
        Product((1-q**(2*n))*(1+2*q**(2*n)*Cos(2*Pi*z) + q**(4*n)), For(n, 1, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("77aed2"),
    Formula(Equal(JacobiTheta(3,z,tau), Where(
        Product((1-q**(2*n))*(1+2*q**(2*n-1)*Cos(2*Pi*z) + q**(4*n-2)), For(n, 1, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("2a2a38"),
    Formula(Equal(JacobiTheta(4,z,tau), Where(
        Product((1-q**(2*n))*(1-2*q**(2*n-1)*Cos(2*Pi*z) + q**(4*n-2)), For(n, 1, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("13d2a1"),
    Formula(Where(Equal(JacobiTheta(3,z,tau),
        Sum(q**(n**2) * w**(2*n), For(n, -Infinity, Infinity)),
        Product((1-q**(2*n))*(1+q**(2*n-1)*w**2)*(1+q**(2*n-1)*w**(-2)), For(n, 1, Infinity))),
            Equal(q, Exp(Pi*ConstI*tau)),
            Equal(w, Exp(Pi*ConstI*z)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("39b699"),
    Formula(Where(Equal(JacobiTheta(2,z,tau),
        -(ConstI*Exp(Pi*ConstI*tau/4) * (w - w**-1) * Product((1-q**(2*n)) * (1 - q**(2*n)*w**2) * (1 - q**(2*n)*w**-2), For(n, 1, Infinity)))),
            Equal(q, Exp(Pi*ConstI*tau)),
            Equal(w, Exp(Pi*ConstI*z)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("465810"),
    Formula(Where(Equal(JacobiTheta(2,z,tau),
        Exp(Pi*ConstI*tau/4) * (w + w**-1) * Product((1-q**(2*n)) * (1 + q**(2*n)*w**2) * (1 + q**(2*n)*w**-2), For(n, 1, Infinity))),
            Equal(q, Exp(Pi*ConstI*tau)),
            Equal(w, Exp(Pi*ConstI*z)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("21851b"),
    Formula(Where(Equal(JacobiTheta(3,z,tau),
        Product((1-q**(2*n))*(1+q**(2*n-1)*w**2)*(1+q**(2*n-1)*w**(-2)), For(n, 1, Infinity))),
            Equal(q, Exp(Pi*ConstI*tau)),
            Equal(w, Exp(Pi*ConstI*z)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("d45548"),
    Formula(Where(Equal(JacobiTheta(4,z,tau),
        Product((1-q**(2*n))*(1-q**(2*n-1)*w**2)*(1-q**(2*n-1)*w**(-2)), For(n, 1, Infinity))),
            Equal(q, Exp(Pi*ConstI*tau)),
            Equal(w, Exp(Pi*ConstI*z)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("d2f183"),
    Formula(Equal(JacobiTheta(1,z,tau),
        (JacobiTheta(1,0,tau,1)/Pi) * Sin(Pi*z) * Product(Sin(Pi*(n*tau+z))*Sin(Pi*(n*tau-z))/Sin(Pi*n*tau)**2, For(n, 1, Infinity)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("64081c"),
    Formula(Equal(JacobiTheta(2,z,tau),
        JacobiTheta(2,0,tau) * Cos(Pi*z) * Product(Cos(Pi*(n*tau+z))*Cos(Pi*(n*tau-z))/Cos(Pi*n*tau)**2, For(n, 1, Infinity)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("816057"),
    Formula(Equal(JacobiTheta(3,z,tau),
        JacobiTheta(3,0,tau) * Product(Cos(Pi*((n-Div(1,2))*tau+z))*Cos(Pi*((n-Div(1,2))*tau-z))/Cos(Pi*((n-Div(1,2))*tau))**2, For(n, 1, Infinity)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("3c88a7"),
    Formula(Equal(JacobiTheta(4,z,tau),
        JacobiTheta(4,0,tau) * Product(Sin(Pi*((n-Div(1,2))*tau+z))*Sin(Pi*((n-Div(1,2))*tau-z))/Sin(Pi*((n-Div(1,2))*tau))**2, For(n, 1, Infinity)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("dfbddd"),
    Formula(Equal(
        (1/Pi) * (JacobiTheta(1,z,tau,1) / JacobiTheta(1,z,tau)), Where(Cot(Pi*z) + 4 * Sum(q**(2*n) / (1 - q**(2*n)) * Sin(2*Pi*n*z), For(n, 1, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), Less(Abs(Im(z)), Abs(Im(tau))), NotEqual(Sin(Pi*z), 0))))

make_entry(ID("c7f7a5"),
    Formula(Equal(
        (1/Pi) * (JacobiTheta(2,z,tau,1) / JacobiTheta(2,z,tau)), Where(-Tan(Pi*z) + 4 * Sum((-1)**n * (q**(2*n) / (1 - q**(2*n))) * Sin(2*Pi*n*z), For(n, 1, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), Less(Abs(Im(z)), Abs(Im(tau))), NotEqual(Cos(Pi*z), 0))))

make_entry(ID("44e8fb"),
    Formula(Equal(
        (1/Pi) * (JacobiTheta(3,z,tau,1) / JacobiTheta(3,z,tau)), Where(4 * Sum((-1)**n * (q**(n) / (1 - q**(2*n))) * Sin(2*Pi*n*z), For(n, 1, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), Less(Abs(Im(z)), Div(1,2)*Abs(Im(tau))))))

make_entry(ID("1848f1"),
    Formula(Equal(
        (1/Pi) * (JacobiTheta(4,z,tau,1) / JacobiTheta(4,z,tau)), Where(4 * Sum(q**(n) / (1 - q**(2*n)) * Sin(2*Pi*n*z), For(n, 1, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), Less(Abs(Im(z)), Div(1,2)*Abs(Im(tau))))))

make_entry(ID("1cdd7b"),
    Formula(Equal(JacobiTheta(j,z+x,tau),
        Sum((JacobiTheta(j,z,tau,n) / Factorial(n)) * x**n, For(n, 0, Infinity)))),
    Variables(j, z, tau, x),
    Assumptions(And(Element(j, Set(1, 2, 3, 4)), Element(z, CC), Element(tau, HH), Element(x, CC))))

make_entry(ID("d637c5"),
    Formula(Equal(JacobiTheta(j,z,tau+x),
        Sum((1/(4*Pi*ConstI)**n) * (JacobiTheta(j,z,tau,2*n) / Factorial(n)) * x**n, For(n, 0, Infinity)))),
    Variables(j, z, tau, x),
    Assumptions(And(Element(j, Set(1, 2, 3, 4)), Element(z, CC), Element(tau, HH), Element(x, CC), Less(Abs(x), Im(tau)))))

make_entry(ID("d81f05"),
    Formula(Equal(ComplexBranchDerivative(Log(JacobiTheta(1,z,tau)), For(z, z, 2)),
        Pi**2 * Sum(1/Sin(Pi*(z+n*tau))**2, For(n, -Infinity, Infinity)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH),
        NotEqual(JacobiTheta(1, z, tau), 0))))

make_entry(ID("561d75"),
    Formula(Equal(ComplexBranchDerivative(Log(JacobiTheta(2,z,tau)), For(z, z, 2)),
                Pi**2 * Sum(1/Cos(Pi*(z+n*tau))**2, For(n, -Infinity, Infinity)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH),
        NotEqual(JacobiTheta(2, z, tau), 0))))

make_entry(ID("a5e568"),
    Formula(Equal(JacobiTheta(3,0,tau)**k, Where(Sum(SquaresR(k, n) * q**n, For(n, 0, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(k, tau),
    Assumptions(And(Element(k, ZZGreaterEqual(0)), Element(tau, HH))))

make_entry(ID("7c90eb"),
    Formula(Equal(JacobiTheta(4,0,tau)**k, Where(Sum((-1)**n * SquaresR(k, n) * q**n, For(n, 0, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(k, tau),
    Assumptions(And(Element(k, ZZGreaterEqual(0)), Element(tau, HH))))

make_entry(ID("df88a0"),
    Formula(Equal(JacobiTheta(3,0,tau)**2 + JacobiTheta(4,0,tau)**2, 2 * Where(Sum(SquaresR(2, 2*n) * q**(2*n), For(n, 0, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("290f36"),
    Formula(Equal(JacobiTheta(3,0,tau)**2 - JacobiTheta(3,0,2*tau)**2, Where(Sum(SquaresR(2, 2*n+1) * q**(2*n+1), For(n, 0, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("a0ba58"),
    Formula(Equal(JacobiTheta(3,0,tau) / JacobiTheta(4,0,tau),
        Where(Product(((1+q**(2*n-1))/(1-q**(2*n-1)))**2, For(n, 1, Infinity)),
            Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("f1f42f"),
    Formula(Equal(JacobiTheta(2,0,tau) / JacobiTheta(3,0,tau),
        Where(2 * Exp(Pi*ConstI*tau/4) * Product(((1+q**(2*n))/(1+q**(2*n-1)))**2, For(n, 1, Infinity)),
            Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("e4e707"),
    Formula(Equal(JacobiTheta(3,0,tau),
        Where(1 + 2*Sum(LiouvilleLambda(n) * q**n / (1-q**n), For(n, 1, Infinity)),
            Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("0650f8"),
    Formula(Equal(JacobiTheta(3,0,tau)**2,
        Where(1 + 4*Sum(q**n / (1 + q**(2*n)), For(n, 1, Infinity)),
            Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("c743eb"),
    Formula(Equal(JacobiTheta(2,0,tau)**4,
        Where(8 * Sum(((2*n+1)*q**(2*n+1))/(1+q**(2*n+1)), For(n, 0, Infinity)) + 8 * Sum(((2*n+1)*q**(2*n+1))/(1-q**(2*n+1)), For(n, 0, Infinity)),
            Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("8a316c"),
    Formula(Equal(JacobiTheta(3,0,tau)**4,
        Where(1 + 8 * Sum(2*n*q**(2*n)/(1+q**(2*n)), For(n, 0, Infinity)) + 8 * Sum(((2*n+1)*q**(2*n+1))/(1-q**(2*n+1)), For(n, 0, Infinity)),
            Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("dc7c83"),
    Formula(Equal(JacobiTheta(4,0,tau)**4,
        Where(1 + 8 * Sum(2*n*q**(2*n)/(1+q**(2*n)), For(n, 0, Infinity)) - 8 * Sum(((2*n+1)*q**(2*n+1))/(1+q**(2*n+1)), For(n, 0, Infinity)),
            Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("1cec67"),
    Formula(Equal(JacobiTheta(4,0,tau)**4 - JacobiTheta(2,0,tau)**4,
        Where(1 - 24 * Sum((2*n+1) * q**(2*n+1) / (1 + q**(2*n+1)), For(n, 0, Infinity)),
            Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("4d26ec"),
    Formula(Equal(JacobiTheta(4,0,tau)**8,
        Where(1 + 16 * Sum((-1)**n * n**3 * q**n / (1-q**n), For(n, 1, Infinity)),
            Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("9b7d8c"),
    Formula(Equal(JacobiTheta(2,0,tau)**2,
        Sum(1/Cos(Pi*tau*(n+Div(1,2))), For(n, -Infinity, Infinity)))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("f8cd8f"),
    Formula(Equal(JacobiTheta(3,0,tau)**2, 1 + 2 * Sum(1/Cos(Pi*tau*n), For(n, 1, Infinity)))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("7b3ac4"),
    Formula(Equal(JacobiTheta(3,0,tau)**2,
        Sum(1/Cos(Pi*tau*n), For(n, -Infinity, Infinity)))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("ab1c77"),
    Formula(Equal(JacobiTheta(4,0,tau)**2,
        Sum(1/Cos(Pi*(tau+1)*n), For(n, -Infinity, Infinity)))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("154c44"),
    Formula(Equal(Zeros(JacobiTheta(1,z,tau), ForElement(z, CC)), Set(m+n*tau, For(Tuple(m, n)), And(Element(m, ZZ), Element(n, ZZ))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("ad1eaf"),
    Formula(Equal(Zeros(JacobiTheta(2,z,tau), ForElement(z, CC)), Set(Parentheses(m+Div(1,2))+n*tau, For(Tuple(m, n)), And(Element(m, ZZ), Element(n, ZZ))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("caf10a"),
    Formula(Equal(Zeros(JacobiTheta(3,z,tau), ForElement(z, CC)), Set(Parentheses(m+Div(1,2))+(n+Div(1,2))*tau, For(Tuple(m, n)), And(Element(m, ZZ), Element(n, ZZ))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("926b2c"),
    Formula(Equal(Zeros(JacobiTheta(4,z,tau), ForElement(z, CC)), Set(m+(n+Div(1,2))*tau, For(Tuple(m, n)), And(Element(m, ZZ), Element(n, ZZ))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("fe1b96"),
    Formula(Equal(JacobiTheta(j, z, -Conjugate(tau)), Conjugate(JacobiTheta(j,Conjugate(z), tau)))),
    Variables(j, z, tau),
    Assumptions(And(Element(j, Set(1, 2, 3, 4)), Element(z, CC), Element(tau, HH))))

make_entry(ID("6b2078"),
    Formula(Equal(JacobiTheta(1,z,tau+1), Exp(Pi*ConstI/4) * JacobiTheta(1,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("cde93e"),
    Formula(Equal(JacobiTheta(2,z,tau+1), Exp(Pi*ConstI/4) * JacobiTheta(2,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("9c1e9a"),
    Formula(Equal(JacobiTheta(3,z,tau+1), JacobiTheta(4,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("a5c258"),
    Formula(Equal(JacobiTheta(4,z,tau+1), JacobiTheta(3,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("e8ce0b"),
    Formula(Equal(JacobiTheta(1,z,-1/tau), -ConstI*Sqrt(tau/ConstI)*Exp(Pi*ConstI*tau*z**2)*JacobiTheta(1,tau*z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("06319a"),
    Formula(Equal(JacobiTheta(2,z,-1/tau), Sqrt(tau/ConstI)*Exp(Pi*ConstI*tau*z**2)*JacobiTheta(4,tau*z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("c4b16c"),
    Formula(Equal(JacobiTheta(3,z,-1/tau), Sqrt(tau/ConstI)*Exp(Pi*ConstI*tau*z**2)*JacobiTheta(3,tau*z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("ed8ba7"),
    Formula(Equal(JacobiTheta(4,z,-1/tau), Sqrt(tau/ConstI)*Exp(Pi*ConstI*tau*z**2)*JacobiTheta(2,tau*z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("1fa8e7"),
    Formula(Equal(JacobiTheta(1,z,tau+n), Exp(Pi*ConstI*n/4) * JacobiTheta(1, z, tau))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("d0dfba"),
    Formula(Equal(JacobiTheta(2,z,tau+n), Exp(Pi*ConstI*n/4) * JacobiTheta(2, z, tau))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("28b4c3"),
    Formula(Equal(JacobiTheta(3,z,tau+n), Cases(Tuple(JacobiTheta(3, z, tau), Even(n)), Tuple(JacobiTheta(4, z, tau), Odd(n))))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("64f0a5"),
    Formula(Equal(JacobiTheta(4,z,tau+n), Cases(Tuple(JacobiTheta(4, z, tau), Even(n)), Tuple(JacobiTheta(3, z, tau), Odd(n))))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("b978f0"),
    Formula(Equal(JacobiTheta(1,z,tau+2*n), ConstI**n * JacobiTheta(1, z, tau))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("d11b7f"),
    Formula(Equal(JacobiTheta(2,z,tau+2*n), ConstI**n * JacobiTheta(2, z, tau))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("772c88"),
    Formula(Equal(JacobiTheta(3,z,tau+2*n), JacobiTheta(3, z, tau))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("19acd8"),
    Formula(Equal(JacobiTheta(4,z,tau+2*n), JacobiTheta(4, z, tau))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("b9c650"),
    Formula(Equal(JacobiTheta(1,z,tau+4*n), (-1)**n * JacobiTheta(1, z, tau))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("4cf228"),
    Formula(Equal(JacobiTheta(2,z,tau+4*n), (-1)**n * JacobiTheta(2, z, tau))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("abc1e7"),
    Formula(Equal(JacobiTheta(1,z,tau+8*n), JacobiTheta(1, z, tau))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("fb4b1b"),
    Formula(Equal(JacobiTheta(2,z,tau+8*n), JacobiTheta(2, z, tau))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("20172a"),
    SymbolDefinition(JacobiThetaPermutation, JacobiThetaPermutation(j,a,b,c,d), "Index permutation in modular transformation of Jacobi theta functions"))

make_entry(ID("9bda2f"),
    Formula(Equal(JacobiThetaPermutation(j,a,b,c,d),
        Where(Cases(Tuple(1, Equal(j, 1)), Tuple(T(c,d), Equal(j,2)), Tuple(T(a+c,b+d), Equal(j,3)), Tuple(T(a, b), Equal(j, 4))),
            Equal(T(m,n), Cases(
                Tuple(1, CongruentMod(Tuple(m, n), Tuple(0, 0), 2)),
                Tuple(2, CongruentMod(Tuple(m, n), Tuple(0, 1), 2)),
                Tuple(4, CongruentMod(Tuple(m, n), Tuple(1, 0), 2)),
                Tuple(3, CongruentMod(Tuple(m, n), Tuple(1, 1), 2))))))),
    Variables(j,a,b,c,d),
    Assumptions(And(Element(j, Set(1,2,3,4)), Element(Matrix2x2(a, b, c, d), PSL2Z))),
    References("Hans Rademacher (1973), Topics in Analytic Number Theory, Springer. Section 81."))

make_entry(ID("c4714a"),
    SymbolDefinition(JacobiThetaEpsilon, JacobiThetaEpsilon(j,a,b,c,d), "Root of unity in modular transformation of Jacobi theta functions"))

make_entry(ID("03356b"),
    Formula(Equal(JacobiThetaEpsilon(1,a,b,c,d),
        Cases(Tuple(KroneckerSymbol(c,d) * Call(Exp, ((Pi*ConstI/4) * Brackets(d*(b-c-1)+2))), Even(c)),
              Tuple(KroneckerSymbol(d,c) * Call(Exp, ((Pi*ConstI/4) * Brackets(c*(a+d+1)-3))), Odd(c))))),
    Variables(a,b,c,d),
    Assumptions(Element(Matrix2x2(a,b,c,d), SL2Z)),
    References("Hans Rademacher (1973), Topics in Analytic Number Theory, Springer. Section 80."))

make_entry(ID("3c56c7"),
    Formula(Equal(JacobiThetaEpsilon(j,a,b,c,d),
        Where((1/JacobiThetaEpsilon(1,-d,b,c,-a)) *
        Cases(
            Tuple(Call(Exp, ((Pi*ConstI/4) * Brackets((c-2)*d - 2 + 2*(1-c) * delta_(d+1)))), Equal(j, 2)),
            Tuple(Call(Exp, ((Pi*ConstI/4) * Brackets((a+c-2)*(b+d) - 3 + 2*(1-a-c) * delta_(b+d+1)))), Equal(j, 3)),
            Tuple(Call(Exp, ((Pi*ConstI/4) * Brackets((a-2)*b - 4 + 2*(1-a) * delta_(b+1)))), Equal(j, 4))),
            Def(delta_(n), Mod(n, 2))))),
    Variables(j,a,b,c,d),
    Assumptions(And(Element(j, Set(2,3,4)), Element(Matrix2x2(a,b,c,d), SL2Z))),
    References("Hans Rademacher (1973), Topics in Analytic Number Theory, Springer. Section 81."))

make_entry(ID("fc3ef5"),
    Formula(Equal(JacobiThetaEpsilon(j,a,b,c,d)**4,
        Where((-1)**n, Equal(n,
        Cases(Tuple((a*(b+d) + c*d), Equal(j, 1)),
              Tuple((a*(b+d)), Equal(j, 2)),
              Tuple((a*d), Equal(j, 3)),
              Tuple((d*(a+c)), Equal(j, 4))))))),
    Variables(j,a,b,c,d),
    Assumptions(And(Element(j, Set(1,2,3,4)), Element(Matrix2x2(a,b,c,d), SL2Z))))

make_entry(ID("89e79d"),
    Formula(Equal(JacobiThetaEpsilon(j,a,b,c,d)**8, 1)),
    Variables(j,a,b,c,d),
    Assumptions(And(Element(j, Set(1,2,3,4)), Element(Matrix2x2(a,b,c,d), SL2Z))))

make_entry(ID("4d8b0f"),
    Formula(Equal(JacobiTheta(j,z,(a*tau+b)/(c*tau+d)),
        Where(JacobiThetaEpsilon(j,a,b,c,d) * Sqrt(v/ConstI) * Exp(Pi*ConstI*c*v*z**2) * JacobiTheta(JacobiThetaPermutation(j,a,b,c,d), v*z,tau), Equal(v, (c*tau+d)),
        ))),
    Variables(j, z, tau, a, b, c, d),
    Assumptions(And(Element(j, Set(1,2,3,4)), Element(z, CC), Element(tau, HH), Element(Matrix2x2(a, b, c, d), PSL2Z))),
    References("Hans Rademacher (1973), Topics in Analytic Number Theory, Springer. Sections 80, 81."))

make_entry(ID("100d3c"),
    Formula(Equal(JacobiTheta(j,z,tau),
        Where(JacobiThetaEpsilon(j,-d,b,c,-a) * Sqrt(v/ConstI) * Exp(Pi*ConstI*c*v*z**2) * JacobiTheta(JacobiThetaPermutation(j,-d,b,c,-a), v*z, (a*tau+b)/(c*tau+d)),
            Equal(v, -(1/(c*tau+d))),
        ))),
    Variables(j, z, tau, a, b, c, d),
    Assumptions(And(Element(j, Set(1,2,3,4)), Element(z, CC), Element(tau, HH), Element(Matrix2x2(a, b, c, d), PSL2Z))),
    References("Hans Rademacher (1973), Topics in Analytic Number Theory, Springer. Sections 80, 81."))

make_entry(ID("59fd23"),
    Formula(Equal(JacobiTheta(2,0,tau/2)**2, 2*JacobiTheta(2,0,tau)*JacobiTheta(3,0,tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("de7918"),
    Formula(Equal(JacobiTheta(3,0,tau/2)**2, JacobiTheta(2,0,tau)**2 + JacobiTheta(3,0,tau)**2)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("476642"),
    Formula(Equal(JacobiTheta(3,0,tau/2) * JacobiTheta(4,0,tau/2), JacobiTheta(4,0,tau)**2)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("7527f1"),
    Formula(Equal(JacobiTheta(4,0,tau/2)**2, JacobiTheta(3,0,tau)**2 - JacobiTheta(2,0,tau)**2)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("59184e"),
    Formula(Equal(JacobiTheta(1,0,tau/2,1) * JacobiTheta(2,0,tau/2), 2 * JacobiTheta(1,0,tau,1) * JacobiTheta(4,0,tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("66eb8b"),
    Formula(Equal(JacobiTheta(1,z,tau/2), 2*JacobiTheta(1,z,tau)*JacobiTheta(4,z,tau)/JacobiTheta(2,0,tau/2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("a9cdda"),
    Formula(Equal(JacobiTheta(2,z,tau/2), 2*JacobiTheta(2,z,tau)*JacobiTheta(3,z,tau)/JacobiTheta(2,0,tau/2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("e6d333"),
    Formula(Equal(JacobiTheta(3,z,tau/2), (JacobiTheta(4,z,tau)**2-JacobiTheta(1,z,tau)**2)/JacobiTheta(4,0,tau/2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("69b32e"),
    Formula(Equal(JacobiTheta(3,z,tau/2), (JacobiTheta(2,z,tau)**2+JacobiTheta(3,z,tau)**2)/JacobiTheta(3,0,tau/2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("c92a6f"),
    Formula(Equal(JacobiTheta(4,z,tau/2), (JacobiTheta(4,z,tau)**2+JacobiTheta(1,z,tau)**2)/JacobiTheta(3,0,tau/2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("95e508"),
    Formula(Equal(JacobiTheta(4,z,tau/2), (JacobiTheta(3,z,tau)**2-JacobiTheta(2,z,tau)**2)/JacobiTheta(4,0,tau/2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("9a2054"),
    Formula(Equal(2*JacobiTheta(2,0,2*tau)*JacobiTheta(3,0,2*tau), JacobiTheta(2,0,tau)**2)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("21c2f7"),
    Formula(Equal(2*JacobiTheta(2,0,2*tau)**2, JacobiTheta(3,0,tau)**2 - JacobiTheta(4,0,tau)**2)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("c3d8c2"),
    Formula(Equal(2*JacobiTheta(3,0,2*tau)**2, JacobiTheta(3,0,tau)**2 + JacobiTheta(4,0,tau)**2)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("f14471"),
    Formula(Equal(JacobiTheta(4,0,2*tau)**2, JacobiTheta(3,0,tau)*JacobiTheta(4,0,tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("46f244"),
    Formula(Equal(2*JacobiTheta(1,0,2*tau,1) * JacobiTheta(4,0,2*tau), JacobiTheta(1,0,tau,1) * JacobiTheta(2,0,tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("e13fe9"),
    Formula(Equal(JacobiTheta(1,2*z,2*tau), JacobiTheta(1,z,tau)*JacobiTheta(2,z,tau)/JacobiTheta(4,0,2*tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("7137a2"),
    Formula(Equal(JacobiTheta(2,2*z,2*tau), (JacobiTheta(2,z,tau)**2-JacobiTheta(1,z,tau)**2)/(2*JacobiTheta(3,0,2*tau)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("db4e29"),
    Formula(Equal(JacobiTheta(2,2*z,2*tau), (JacobiTheta(3,z,tau)**2-JacobiTheta(4,z,tau)**2)/(2*JacobiTheta(2,0,2*tau)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("f12569"),
    Formula(Equal(JacobiTheta(2,2*z,2*tau), JacobiTheta(1,Div(1,4)-z,tau)*JacobiTheta(1,Div(1,4)+z,tau)/JacobiTheta(4,0,2*tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("3479be"),
    Formula(Equal(JacobiTheta(3,2*z,2*tau), (JacobiTheta(1,z,tau)**2+JacobiTheta(2,z,tau)**2)/(2*JacobiTheta(2,0,2*tau)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("7e0002"),
    Formula(Equal(JacobiTheta(3,2*z,2*tau), (JacobiTheta(3,z,tau)**2+JacobiTheta(4,z,tau)**2)/(2*JacobiTheta(3,0,2*tau)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("0a9ec2"),
    Formula(Equal(JacobiTheta(3,2*z,2*tau), JacobiTheta(3,Div(1,4)-z,tau)*JacobiTheta(3,Div(1,4)+z,tau)/JacobiTheta(4,0,2*tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("686ce0"),
    Formula(Equal(JacobiTheta(4,2*z,2*tau), (JacobiTheta(3,z,tau)*JacobiTheta(4,z,tau))/JacobiTheta(4,0,2*tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("a0a1ee"),
    Formula(Equal(JacobiTheta(2,2*z,4*tau), (JacobiTheta(3,z,tau) - JacobiTheta(4,z,tau))/2)),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("53fef4"),
    Formula(Equal(JacobiTheta(3,2*z,4*tau), (JacobiTheta(3,z,tau) + JacobiTheta(4,z,tau))/2)),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("27b169"),
    Formula(Equal(JacobiTheta(1,4*z,4*tau), JacobiTheta(1,z,tau)*JacobiTheta(1,Div(1,4)-z,tau)*JacobiTheta(1,Div(1,4)+z,tau)*JacobiTheta(2,z,tau)/(JacobiTheta(3,0,tau)*JacobiTheta(4,0,tau)*JacobiTheta(3,Div(1,4),tau)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("a255e1"),
    Formula(Equal(JacobiTheta(2,4*z,4*tau), JacobiTheta(2,Div(1,8)-z,tau)*JacobiTheta(2,Div(1,8)+z,tau)*JacobiTheta(2,Div(3,8)-z,tau)*JacobiTheta(2,Div(3,8)+z,tau)/(JacobiTheta(3,0,tau)*JacobiTheta(4,0,tau)*JacobiTheta(3,Div(1,4),tau)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("0096a8"),
    Formula(Equal(JacobiTheta(3,4*z,4*tau), JacobiTheta(3,Div(1,8)-z,tau)*JacobiTheta(3,Div(1,8)+z,tau)*JacobiTheta(3,Div(3,8)-z,tau)*JacobiTheta(3,Div(3,8)+z,tau)/(JacobiTheta(3,0,tau)*JacobiTheta(4,0,tau)*JacobiTheta(3,Div(1,4),tau)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("fc3c44"),
    Formula(Equal(JacobiTheta(4,4*z,4*tau), JacobiTheta(4,z,tau)*JacobiTheta(4,Div(1,4)-z,tau)*JacobiTheta(4,Div(1,4)+z,tau)*JacobiTheta(3,z,tau)/(JacobiTheta(3,0,tau)*JacobiTheta(4,0,tau)*JacobiTheta(3,Div(1,4),tau)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("a222ed"),
    Formula(Equal(ComplexDerivative(JacobiTheta(j,z,tau), For(z, z, r)), JacobiTheta(j,z,tau,r))),
    Variables(j, z, tau, r),
    Assumptions(And(Element(j, Set(1, 2, 3, 4)), Element(z, CC), Element(tau, HH), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("37e644"),
    Formula(Equal(ComplexDerivative(JacobiTheta(j,z,tau,s), For(tau, tau, r)), (1/(4*Pi*ConstI)**r) * (JacobiTheta(j,z,tau,2*r+s)))),
    Variables(j, z, tau, r, s),
    Assumptions(And(Element(j, Set(1, 2, 3, 4)), Element(z, CC), Element(tau, HH), Element(r, ZZGreaterEqual(0)), Element(s, ZZGreaterEqual(0)))))

make_entry(ID("ebc673"),
    Formula(Equal(JacobiTheta(j,z,tau,2) - 4*Pi*ConstI*ComplexDerivative(JacobiTheta(j,z,tau), For(tau, tau)), 0)),
    Variables(j, z, tau),
    Assumptions(And(Element(j, Set(1, 2, 3, 4)), Element(z, CC), Element(tau, HH))))

make_entry(ID("936694"),
    Formula(Where(Equal((30*D_(1)**3-15*D_(0)*D_(1)*D_(2)+D_(0)**2*D_(3))**2 + 32*(D_(0)*D_(2)-3*D_(1)**2)**3 + Pi**2*(D_(0)*D_(2) - 3*D_(1)**2)**2*D_(0)**10, 0),
        Def(D_(r), ComplexDerivative(JacobiTheta(j, 0, tau), For(tau, tau, r))))),
    Variables(j, tau),
    Assumptions(And(Element(j, Set(1, 2, 3, 4)), Element(tau, HH))))

make_entry(ID("d967af"),
    Formula(Equal(JacobiTheta(1,0,tau,2*r), 0)),
    Variables(tau, r),
    Assumptions(And(Element(tau, HH), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("cdbdc7"),
    Formula(Equal(JacobiTheta(2,0,tau,2*r+1), 0)),
    Variables(tau, r),
    Assumptions(And(Element(tau, HH), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("a19141"),
    Formula(Equal(JacobiTheta(3,0,tau,2*r+1), 0)),
    Variables(tau, r),
    Assumptions(And(Element(tau, HH), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("901934"),
    Formula(Equal(JacobiTheta(4,0,tau,2*r+1), 0)),
    Variables(tau, r),
    Assumptions(And(Element(tau, HH), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("f2e28a"),
    Formula(Equal(JacobiTheta(1,0,tau,1), Pi*JacobiTheta(2,0,tau)*JacobiTheta(3,0,tau)*JacobiTheta(4,0,tau))),
    Variables(tau),
    Assumptions(And(Element(tau, HH))))

make_entry(ID("278274"),
    Formula(Equal(JacobiTheta(1,0,tau,3) / JacobiTheta(1,0,tau,1), JacobiTheta(2,0,tau,2)/JacobiTheta(2,0,tau) + JacobiTheta(3,0,tau,2)/JacobiTheta(3,0,tau) + JacobiTheta(4,0,tau,2)/JacobiTheta(4,0,tau))),
    Variables(tau),
    Assumptions(And(Element(tau, HH))))

make_entry(ID("cb493d"),
    Formula(Equal(MeromorphicDerivative(JacobiTheta(1,z,tau)/JacobiTheta(2,z,tau), For(z, z)), Pi * JacobiTheta(2,0,tau)**2 * (JacobiTheta(3,z,tau) * JacobiTheta(4,z,tau) / JacobiTheta(2,z,tau)**2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("d41a95"),
    Formula(Equal(MeromorphicDerivative(JacobiTheta(1,z,tau)/JacobiTheta(3,z,tau), For(z, z)), Pi * JacobiTheta(3,0,tau)**2 * (JacobiTheta(2,z,tau) * JacobiTheta(4,z,tau) / JacobiTheta(3,z,tau)**2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("a4eecf"),
    Formula(Equal(MeromorphicDerivative(JacobiTheta(1,z,tau)/JacobiTheta(4,z,tau), For(z, z)), Pi * JacobiTheta(4,0,tau)**2 * (JacobiTheta(2,z,tau) * JacobiTheta(3,z,tau) / JacobiTheta(4,z,tau)**2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("713b6b"),
    Formula(Equal(MeromorphicDerivative(JacobiTheta(2,z,tau)/JacobiTheta(1,z,tau), For(z, z)), -(Pi*JacobiTheta(2,0,tau)**2 * (JacobiTheta(3,z,tau) * JacobiTheta(4,z,tau) / JacobiTheta(1,z,tau)**2)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("64b65d"),
    Formula(Equal(MeromorphicDerivative(JacobiTheta(2,z,tau)/JacobiTheta(3,z,tau), For(z, z)), -(Pi * JacobiTheta(4,0,tau)**2 * (JacobiTheta(1,z,tau) * JacobiTheta(4,z,tau) / JacobiTheta(3,z,tau)**2)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("89985a"),
    Formula(Equal(MeromorphicDerivative(JacobiTheta(2,z,tau)/JacobiTheta(4,z,tau), For(z, z)), -(Pi * JacobiTheta(3,0,tau)**2 * (JacobiTheta(1,z,tau) * JacobiTheta(3,z,tau) / JacobiTheta(4,z,tau)**2)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("0373dc"),
    Formula(Equal(MeromorphicDerivative(JacobiTheta(3,z,tau)/JacobiTheta(1,z,tau), For(z, z)), -(Pi * JacobiTheta(3,0,tau)**2 * (JacobiTheta(2,z,tau) * JacobiTheta(4,z,tau) / JacobiTheta(1,z,tau)**2)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("2853d4"),
    Formula(Equal(MeromorphicDerivative(JacobiTheta(3,z,tau)/JacobiTheta(2,z,tau), For(z, z)), Pi * JacobiTheta(4,0,tau)**2 * (JacobiTheta(1,z,tau) * JacobiTheta(4,z,tau) / JacobiTheta(2,z,tau)**2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("378949"),
    Formula(Equal(MeromorphicDerivative(JacobiTheta(3,z,tau)/JacobiTheta(4,z,tau), For(z, z)), -(Pi * JacobiTheta(2,0,tau)**2 * (JacobiTheta(1,z,tau) * JacobiTheta(2,z,tau) / JacobiTheta(4,z,tau)**2)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("a0552b"),
    Formula(Equal(MeromorphicDerivative(JacobiTheta(4,z,tau)/JacobiTheta(1,z,tau), For(z, z)), -(Pi * JacobiTheta(4,0,tau)**2 * (JacobiTheta(2,z,tau) * JacobiTheta(3,z,tau) / JacobiTheta(1,z,tau)**2)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("775637"),
    Formula(Equal(MeromorphicDerivative(JacobiTheta(4,z,tau)/JacobiTheta(2,z,tau), For(z, z)), Pi * JacobiTheta(3,0,tau)**2 * (JacobiTheta(1,z,tau) * JacobiTheta(3,z,tau) / JacobiTheta(2,z,tau)**2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("23077c"),
    Formula(Equal(MeromorphicDerivative(JacobiTheta(4,z,tau)/JacobiTheta(3,z,tau), For(z, z)), Pi * JacobiTheta(2,0,tau)**2 * (JacobiTheta(1,z,tau) * JacobiTheta(2,z,tau) / JacobiTheta(3,z,tau)**2))),    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

def_Topic(
    Title("Argument transformations for Jacobi theta functions"),
    Description("This topic lists identities for how Jacobi theta functions", JacobiTheta(j,z,tau), "transform when the argument", z, " is transformed. ",
        "This topic mainly covers identities where the lattice parameter", tau, "is fixed.",
        "See", TopicReference("Lattice transformations for Jacobi theta functions"), "for identities involving transformations of", tau, ".",
        "See", TopicReference("Jacobi theta functions"), "for other properties of these functions."),
    Section("Reflection symmetry"),
    Subsection("Even-odd symmetry"),
    Entries(
        "59f8e1",
        "fb55cb",
        "380076",
        "4f939e",
    ),
    Subsection("Conjugate symmetry"),
    Entries(
        "a891da",
    ),
    Section("Periodicity"),
    Entries(
        "2faeb9",
        "b46534",
        "5cdae6",
        "f697d5",
        "e56f77",
        "4448f1",
    ),
    Section("Quasi-periodicity"),
    Subsection("Single shifts"),
    Entries(
        "d989cd",
        "cd5f45",
        "103bfb",
        "b83f63",
    ),
    Subsection("General shifts"),
    Entries(
        "43fa0e",
        "d29148",
        "2e4da0",
        "8d6a1d",
    ),
    Section("Half-period or quarter-period shifts"),
    Entries(
        "563d18",
        "47f6dd",
        "7d559c",
        "bb2d01",
        "d5a29e",
        "cc6d21",
        "2d2dde",
        "429093",
    ),
    Section("Theta functions represented in terms of each other"),
    Subsection("Theta 1"),
    Entries(
        "95988c",
        "4c462b",
        "ed0756",
    ),
    Subsection("Theta 2"),
    Entries(
        "785668",
        "0878a4",
        "6a7704",
    ),
    Subsection("Theta 3"),
    Entries(
        "b3fc6d",
        "71d5ee",
        "235d0d",
    ),
    Subsection("Theta 4"),
    Entries(
        "5d41b1",
        "6d918c",
        "10ca40",
    ),
    Section("Double argument"),
    Subsection("Theta 1"),
    Entries(
        "5fe58d",
    ),
    Subsection("Theta 2"),
    Entries(
        "3a77e0",
        "e6dc09",
        "aaa582",
        "b1d07b",
    ),
    Subsection("Theta 3"),
    Entries(
        "20d581",
        "ed3ff9",
        "794106",
        "a94b43",
    ),
    Subsection("Theta 4"),
    Entries(
        "8b825c",
        "7131cd",
        "931201",
        "21dc98",
    ),
    Section("Relations involving sums and differences of arguments"),
    Subsection("Cross-products with two factors and double lattice parameter"),
    Entries(
        "1792a9",
        "5f9e54",
        "9a9487",
        "f4554f",
        "d36e97",
        "73eb5d",
    ),
    Subsection("Cross-products with four factors"),
    Entries(
        "34d1c6",
        "47e587",
        "ee8617",
        "dfea7d",
        "9973ef",
        "077394",
    ),
    Subsection("Cross-products of squares"),
    Entries(
        "45165c",
        "75cb8c",
        "663a02",
        "1feda6",
        "89c9e4",
        "48a1c6",
        "66efb8",
        "9aa437",
        "5752b8",
        "c891a1",
        "3cac28",
        "45a130",
    ),
)

make_entry(ID("59f8e1"),
    Formula(Equal(JacobiTheta(1,-z,tau), -JacobiTheta(1,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("fb55cb"),
    Formula(Equal(JacobiTheta(2,-z,tau), JacobiTheta(2,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("380076"),
    Formula(Equal(JacobiTheta(3,-z,tau), JacobiTheta(3,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("4f939e"),
    Formula(Equal(JacobiTheta(4,-z,tau), JacobiTheta(4,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("a891da"),
    Formula(Equal(JacobiTheta(j, Conjugate(z), tau), Conjugate(JacobiTheta(j,z, -Conjugate(tau))))),
    Variables(j, z, tau),
    Assumptions(And(Element(j, Set(1, 2, 3, 4)), Element(z, CC), Element(tau, HH))))

make_entry(ID("2faeb9"),
    Formula(Equal(JacobiTheta(1,z+2*n,tau), JacobiTheta(1,z,tau))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("b46534"),
    Formula(Equal(JacobiTheta(2,z+2*n,tau), JacobiTheta(2,z,tau))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("5cdae6"),
    Formula(Equal(JacobiTheta(1,z+n,tau), (-1)**n * JacobiTheta(1,z,tau))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("f697d5"),
    Formula(Equal(JacobiTheta(2,z+n,tau), (-1)**n * JacobiTheta(2,z,tau))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("e56f77"),
    Formula(Equal(JacobiTheta(3,z+n,tau), JacobiTheta(3,z,tau))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("4448f1"),
    Formula(Equal(JacobiTheta(4,z+n,tau), JacobiTheta(4,z,tau))),
    Variables(z, tau, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(n, ZZ))))

make_entry(ID("d989cd"),
    Formula(Equal(JacobiTheta(1,z+tau,tau), -Exp(-(Pi*ConstI*(2*z+tau))) * JacobiTheta(1,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("cd5f45"),
    Formula(Equal(JacobiTheta(2,z+tau,tau), Exp(-(Pi*ConstI*(2*z+tau))) * JacobiTheta(2,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("103bfb"),
    Formula(Equal(JacobiTheta(3,z+tau,tau), Exp(-(Pi*ConstI*(2*z+tau))) * JacobiTheta(3,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("b83f63"),
    Formula(Equal(JacobiTheta(4,z+tau,tau), -Exp(-(Pi*ConstI*(2*z+tau))) * JacobiTheta(4,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("43fa0e"),
    Formula(Equal(JacobiTheta(1,z+(m+n*tau),tau), (-1)**(m+n) * Exp(-(Pi*ConstI*(tau*n**2 + 2*n*z))) * JacobiTheta(1,z,tau))),
    Variables(z, tau, m, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(m, ZZ), Element(n, ZZ))))

make_entry(ID("d29148"),
    Formula(Equal(JacobiTheta(2,z+(m+n*tau),tau), (-1)**m * Exp(-(Pi*ConstI*(tau*n**2 + 2*n*z))) * JacobiTheta(2,z,tau))),
    Variables(z, tau, m, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(m, ZZ), Element(n, ZZ))))

make_entry(ID("2e4da0"),
    Formula(Equal(JacobiTheta(3,z+(m+n*tau),tau), Exp(-(Pi*ConstI*(tau*n**2 + 2*n*z))) * JacobiTheta(3,z,tau))),
    Variables(z, tau, m, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(m, ZZ), Element(n, ZZ))))

make_entry(ID("8d6a1d"),
    Formula(Equal(JacobiTheta(4,z+(m+n*tau),tau), (-1)**n * Exp(-(Pi*ConstI*(tau*n**2 + 2*n*z))) * JacobiTheta(4,z,tau))),
    Variables(z, tau, m, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(m, ZZ), Element(n, ZZ))))

make_entry(ID("563d18"),
    Formula(Equal(JacobiTheta(1,z+Div(1,2),tau), JacobiTheta(2,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("47f6dd"),
    Formula(Equal(JacobiTheta(2,z+Div(1,2),tau), -JacobiTheta(1,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("7d559c"),
    Formula(Equal(JacobiTheta(3,z+Div(1,2),tau), JacobiTheta(4,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("bb2d01"),
    Formula(Equal(JacobiTheta(4,z+Div(1,2),tau), JacobiTheta(3,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("d5a29e"),
    Formula(Equal(JacobiTheta(1,z+Div(1,2)*tau,tau), Exp(-(Pi*ConstI*(z+tau/4))) * ConstI * JacobiTheta(4,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("cc6d21"),
    Formula(Equal(JacobiTheta(2,z+Div(1,2)*tau,tau), Exp(-(Pi*ConstI*(z+tau/4))) * JacobiTheta(3,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("2d2dde"),
    Formula(Equal(JacobiTheta(3,z+Div(1,2)*tau,tau), Exp(-(Pi*ConstI*(z+tau/4))) * JacobiTheta(2,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("429093"),
    Formula(Equal(JacobiTheta(4,z+Div(1,2)*tau,tau), Exp(-(Pi*ConstI*(z+tau/4))) * ConstI * JacobiTheta(1,z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("95988c"),
    Formula(Equal(JacobiTheta(1,z,tau), -JacobiTheta(2,z+Div(1,2),tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("4c462b"),
    Formula(Equal(JacobiTheta(1,z,tau), -ConstI*Exp(Pi*ConstI*(z+tau/4))*JacobiTheta(4,z+Div(1,2)*tau,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("ed0756"),
    Formula(Equal(JacobiTheta(1,z,tau), -ConstI*Exp(Pi*ConstI*(z+tau/4))*JacobiTheta(3,z+Div(1,2)+Div(1,2)*tau,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("785668"),
    Formula(Equal(JacobiTheta(2,z,tau), JacobiTheta(1,z+Div(1,2),tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("0878a4"),
    Formula(Equal(JacobiTheta(2,z,tau), Exp(Pi*ConstI*(z+tau/4))*JacobiTheta(3,z+Div(1,2)*tau,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("6a7704"),
    Formula(Equal(JacobiTheta(2,z,tau), Exp(Pi*ConstI*(z+tau/4))*JacobiTheta(4,z+Div(1,2)+Div(1,2)*tau,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("b3fc6d"),
    Formula(Equal(JacobiTheta(3,z,tau), JacobiTheta(4,z+Div(1,2),tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("71d5ee"),
    Formula(Equal(JacobiTheta(3,z,tau), Exp(Pi*ConstI*(z+tau/4))*JacobiTheta(2,z+Div(1,2)*tau,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("235d0d"),
    Formula(Equal(JacobiTheta(3,z,tau), Exp(Pi*ConstI*(z+tau/4))*JacobiTheta(1,z+Div(1,2)+Div(1,2)*tau,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("5d41b1"),
    Formula(Equal(JacobiTheta(4,z,tau), JacobiTheta(3,z+Div(1,2),tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("6d918c"),
    Formula(Equal(JacobiTheta(4,z,tau), -ConstI*Exp(Pi*ConstI*(z+tau/4))*JacobiTheta(1,z+Div(1,2)*tau,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("10ca40"),
    Formula(Equal(JacobiTheta(4,z,tau), ConstI*Exp(Pi*ConstI*(z+tau/4))*JacobiTheta(2,z+Div(1,2)+Div(1,2)*tau,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("5fe58d"),
    Formula(Equal(JacobiTheta(1,2*z,tau), 2*JacobiTheta(1,z,tau)*JacobiTheta(2,z,tau)*JacobiTheta(3,z,tau)*JacobiTheta(4,z,tau)/(JacobiTheta(2,0,tau)*JacobiTheta(3,0,tau)*JacobiTheta(4,0,tau)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("3a77e0"),
    Formula(Equal(JacobiTheta(2,2*z,tau), (JacobiTheta(2,z,tau)**4 - JacobiTheta(1,z,tau)**4)/JacobiTheta(2,0,tau)**3)),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("e6dc09"),
    Formula(Equal(JacobiTheta(2,2*z,tau), (JacobiTheta(3,z,tau)**4 - JacobiTheta(4,z,tau)**4)/JacobiTheta(2,0,tau)**3)),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("aaa582"),
    Formula(Equal(JacobiTheta(2,2*z,tau), (JacobiTheta(2,z,tau)**2*JacobiTheta(3,z,tau)**2 - JacobiTheta(1,z,tau)**2*JacobiTheta(4,z,tau)**2)/(JacobiTheta(2,0,tau)*JacobiTheta(3,0,tau)**2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("b1d07b"),
    Formula(Equal(JacobiTheta(2,2*z,tau), (JacobiTheta(2,z,tau)**2*JacobiTheta(4,z,tau)**2 - JacobiTheta(1,z,tau)**2*JacobiTheta(3,z,tau)**2)/(JacobiTheta(2,0,tau)*JacobiTheta(4,0,tau)**2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("20d581"),
    Formula(Equal(JacobiTheta(3,2*z,tau), (JacobiTheta(1,z,tau)**4 + JacobiTheta(3,z,tau)**4)/JacobiTheta(3,0,tau)**3)),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("ed3ff9"),
    Formula(Equal(JacobiTheta(3,2*z,tau), (JacobiTheta(2,z,tau)**4 + JacobiTheta(4,z,tau)**4)/JacobiTheta(3,0,tau)**3)),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("794106"),
    Formula(Equal(JacobiTheta(3,2*z,tau), (JacobiTheta(2,z,tau)**2*JacobiTheta(3,z,tau)**2 + JacobiTheta(1,z,tau)**2*JacobiTheta(4,z,tau)**2)/(JacobiTheta(3,0,tau)*JacobiTheta(2,0,tau)**2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("a94b43"),
    Formula(Equal(JacobiTheta(3,2*z,tau), (JacobiTheta(3,z,tau)**2*JacobiTheta(4,z,tau)**2 - JacobiTheta(1,z,tau)**2*JacobiTheta(2,z,tau)**2)/(JacobiTheta(3,0,tau)*JacobiTheta(4,0,tau)**2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("8b825c"),
    Formula(Equal(JacobiTheta(4,2*z,tau), (JacobiTheta(4,z,tau)**4 - JacobiTheta(1,z,tau)**4)/JacobiTheta(4,0,tau)**3)),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("7131cd"),
    Formula(Equal(JacobiTheta(4,2*z,tau), (JacobiTheta(3,z,tau)**4 - JacobiTheta(2,z,tau)**4)/JacobiTheta(4,0,tau)**3)),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("931201"),
    Formula(Equal(JacobiTheta(4,2*z,tau), (JacobiTheta(1,z,tau)**2*JacobiTheta(3,z,tau)**2 + JacobiTheta(2,z,tau)**2*JacobiTheta(4,z,tau)**2)/(JacobiTheta(4,0,tau)*JacobiTheta(2,0,tau)**2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("21dc98"),
    Formula(Equal(JacobiTheta(4,2*z,tau), (JacobiTheta(1,z,tau)**2*JacobiTheta(2,z,tau)**2 + JacobiTheta(3,z,tau)**2*JacobiTheta(4,z,tau)**2)/(JacobiTheta(4,0,tau)*JacobiTheta(3,0,tau)**2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("1792a9"),
    Formula(Equal(JacobiTheta(1,z,tau)*JacobiTheta(1,w,tau), JacobiTheta(3,z+w,2*tau)*JacobiTheta(2,z-w,2*tau) - JacobiTheta(2,z+w,2*tau)*JacobiTheta(3,z-w,2*tau))),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("5f9e54"),
    Formula(Equal(JacobiTheta(1,z,tau)*JacobiTheta(2,w,tau), JacobiTheta(1,z+w,2*tau)*JacobiTheta(4,z-w,2*tau) + JacobiTheta(4,z+w,2*tau)*JacobiTheta(1,z-w,2*tau))),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("9a9487"),
    Formula(Equal(JacobiTheta(2,z,tau)*JacobiTheta(2,w,tau), JacobiTheta(2,z+w,2*tau)*JacobiTheta(3,z-w,2*tau) + JacobiTheta(3,z+w,2*tau)*JacobiTheta(2,z-w,2*tau))),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("f4554f"),
    Formula(Equal(JacobiTheta(3,z,tau)*JacobiTheta(3,w,tau), JacobiTheta(3,z+w,2*tau)*JacobiTheta(3,z-w,2*tau) + JacobiTheta(2,z+w,2*tau)*JacobiTheta(2,z-w,2*tau))),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("d36e97"),
    Formula(Equal(JacobiTheta(3,z,tau)*JacobiTheta(4,w,tau), JacobiTheta(4,z+w,2*tau)*JacobiTheta(4,z-w,2*tau) - JacobiTheta(1,z+w,2*tau)*JacobiTheta(1,z-w,2*tau))),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("73eb5d"),
    Formula(Equal(JacobiTheta(4,z,tau)*JacobiTheta(4,w,tau), JacobiTheta(3,z+w,2*tau)*JacobiTheta(3,z-w,2*tau) - JacobiTheta(2,z+w,2*tau)*JacobiTheta(2,z-w,2*tau))),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("34d1c6"),
    Formula(Equal(JacobiTheta(3,0,tau)*JacobiTheta(4,0,tau)*JacobiTheta(1,z+w,tau)*JacobiTheta(2,z-w, tau), JacobiTheta(1,z,tau)*JacobiTheta(2,z,tau)*JacobiTheta(3,w,tau)*JacobiTheta(4,w,tau) + JacobiTheta(3,z,tau)*JacobiTheta(4,z,tau)*JacobiTheta(1,w,tau)*JacobiTheta(2,w,tau))),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("47e587"),
    Formula(Equal(JacobiTheta(2,0,tau)*JacobiTheta(4,0,tau)*JacobiTheta(1,z+w,tau)*JacobiTheta(3,z-w, tau), JacobiTheta(1,z,tau)*JacobiTheta(3,z,tau)*JacobiTheta(2,w,tau)*JacobiTheta(4,w,tau) + JacobiTheta(2,z,tau)*JacobiTheta(4,z,tau)*JacobiTheta(1,w,tau)*JacobiTheta(3,w,tau))),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("ee8617"),
    Formula(Equal(JacobiTheta(2,0,tau)*JacobiTheta(3,0,tau)*JacobiTheta(1,z+w,tau)*JacobiTheta(4,z-w, tau), JacobiTheta(1,z,tau)*JacobiTheta(4,z,tau)*JacobiTheta(2,w,tau)*JacobiTheta(3,w,tau) + JacobiTheta(2,z,tau)*JacobiTheta(3,z,tau)*JacobiTheta(1,w,tau)*JacobiTheta(4,w,tau))),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("dfea7d"),
    Formula(Equal(JacobiTheta(2,0,tau)*JacobiTheta(3,0,tau)*JacobiTheta(2,z+w,tau)*JacobiTheta(3,z-w, tau), JacobiTheta(2,z,tau)*JacobiTheta(3,z,tau)*JacobiTheta(2,w,tau)*JacobiTheta(3,w,tau) - JacobiTheta(1,z,tau)*JacobiTheta(4,z,tau)*JacobiTheta(1,w,tau)*JacobiTheta(4,w,tau))),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("9973ef"),
    Formula(Equal(JacobiTheta(2,0,tau)*JacobiTheta(4,0,tau)*JacobiTheta(2,z+w,tau)*JacobiTheta(4,z-w, tau), JacobiTheta(2,z,tau)*JacobiTheta(4,z,tau)*JacobiTheta(2,w,tau)*JacobiTheta(4,w,tau) - JacobiTheta(1,z,tau)*JacobiTheta(3,z,tau)*JacobiTheta(1,w,tau)*JacobiTheta(3,w,tau))),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("077394"),
    Formula(Equal(JacobiTheta(3,0,tau)*JacobiTheta(4,0,tau)*JacobiTheta(3,z+w,tau)*JacobiTheta(4,z-w, tau), JacobiTheta(3,z,tau)*JacobiTheta(4,z,tau)*JacobiTheta(3,w,tau)*JacobiTheta(4,w,tau) - JacobiTheta(1,z,tau)*JacobiTheta(2,z,tau)*JacobiTheta(1,w,tau)*JacobiTheta(2,w,tau))),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("45165c"),
    Formula(Equal(JacobiTheta(1,z+w,tau)*JacobiTheta(1,z-w,tau)*JacobiTheta(2,0,tau)**2, JacobiTheta(1,z,tau)**2*JacobiTheta(2,w,tau)**2 - JacobiTheta(2,z,tau)**2*JacobiTheta(1,w,tau)**2, JacobiTheta(4,z,tau)**2*JacobiTheta(3,w,tau)**2 - JacobiTheta(3,z,tau)**2*JacobiTheta(4,w,tau)**2)),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("75cb8c"),
    Formula(Equal(JacobiTheta(1,z+w,tau)*JacobiTheta(1,z-w,tau)*JacobiTheta(3,0,tau)**2, JacobiTheta(1,z,tau)**2*JacobiTheta(3,w,tau)**2 - JacobiTheta(3,z,tau)**2*JacobiTheta(1,w,tau)**2, JacobiTheta(4,z,tau)**2*JacobiTheta(2,w,tau)**2 - JacobiTheta(2,z,tau)**2*JacobiTheta(4,w,tau)**2)),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("663a02"),
    Formula(Equal(JacobiTheta(1,z+w,tau)*JacobiTheta(1,z-w,tau)*JacobiTheta(4,0,tau)**2, JacobiTheta(3,z,tau)**2*JacobiTheta(2,w,tau)**2 - JacobiTheta(2,z,tau)**2*JacobiTheta(3,w,tau)**2, JacobiTheta(1,z,tau)**2*JacobiTheta(4,w,tau)**2 - JacobiTheta(4,z,tau)**2*JacobiTheta(1,w,tau)**2)),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("1feda6"),
    Formula(Equal(JacobiTheta(2,z+w,tau)*JacobiTheta(2,z-w,tau)*JacobiTheta(2,0,tau)**2, JacobiTheta(2,z,tau)**2*JacobiTheta(2,w,tau)**2 - JacobiTheta(1,z,tau)**2*JacobiTheta(1,w,tau)**2, JacobiTheta(3,z,tau)**2*JacobiTheta(3,w,tau)**2 - JacobiTheta(4,z,tau)**2*JacobiTheta(4,w,tau)**2)),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("89c9e4"),
    Formula(Equal(JacobiTheta(2,z+w,tau)*JacobiTheta(2,z-w,tau)*JacobiTheta(3,0,tau)**2, JacobiTheta(2,z,tau)**2*JacobiTheta(3,w,tau)**2 - JacobiTheta(4,z,tau)**2*JacobiTheta(1,w,tau)**2, JacobiTheta(3,z,tau)**2*JacobiTheta(2,w,tau)**2 - JacobiTheta(1,z,tau)**2*JacobiTheta(4,w,tau)**2)),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("48a1c6"),
    Formula(Equal(JacobiTheta(2,z+w,tau)*JacobiTheta(2,z-w,tau)*JacobiTheta(4,0,tau)**2, JacobiTheta(4,z,tau)**2*JacobiTheta(2,w,tau)**2 - JacobiTheta(1,z,tau)**2*JacobiTheta(3,w,tau)**2, JacobiTheta(2,z,tau)**2*JacobiTheta(4,w,tau)**2 - JacobiTheta(3,z,tau)**2*JacobiTheta(1,w,tau)**2)),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("66efb8"),
    Formula(Equal(JacobiTheta(3,z+w,tau)*JacobiTheta(3,z-w,tau)*JacobiTheta(2,0,tau)**2, JacobiTheta(3,z,tau)**2*JacobiTheta(2,w,tau)**2 + JacobiTheta(4,z,tau)**2*JacobiTheta(1,w,tau)**2, JacobiTheta(2,z,tau)**2*JacobiTheta(3,w,tau)**2 + JacobiTheta(1,z,tau)**2*JacobiTheta(4,w,tau)**2)),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("9aa437"),
    Formula(Equal(JacobiTheta(3,z+w,tau)*JacobiTheta(3,z-w,tau)*JacobiTheta(3,0,tau)**2, JacobiTheta(1,z,tau)**2*JacobiTheta(1,w,tau)**2 + JacobiTheta(3,z,tau)**2*JacobiTheta(3,w,tau)**2, JacobiTheta(2,z,tau)**2*JacobiTheta(2,w,tau)**2 + JacobiTheta(4,z,tau)**2*JacobiTheta(4,w,tau)**2)),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("5752b8"),
    Formula(Equal(JacobiTheta(3,z+w,tau)*JacobiTheta(3,z-w,tau)*JacobiTheta(4,0,tau)**2, JacobiTheta(4,z,tau)**2*JacobiTheta(3,w,tau)**2 - JacobiTheta(1,z,tau)**2*JacobiTheta(2,w,tau)**2, JacobiTheta(3,z,tau)**2*JacobiTheta(4,w,tau)**2 - JacobiTheta(2,z,tau)**2*JacobiTheta(1,w,tau)**2)),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("c891a1"),
    Formula(Equal(JacobiTheta(4,z+w,tau)*JacobiTheta(4,z-w,tau)*JacobiTheta(2,0,tau)**2, JacobiTheta(4,z,tau)**2*JacobiTheta(2,w,tau)**2 + JacobiTheta(3,z,tau)**2*JacobiTheta(1,w,tau)**2, JacobiTheta(1,z,tau)**2*JacobiTheta(3,w,tau)**2 + JacobiTheta(2,z,tau)**2*JacobiTheta(4,w,tau)**2)),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("3cac28"),
    Formula(Equal(JacobiTheta(4,z+w,tau)*JacobiTheta(4,z-w,tau)*JacobiTheta(3,0,tau)**2, JacobiTheta(1,z,tau)**2*JacobiTheta(2,w,tau)**2 + JacobiTheta(3,z,tau)**2*JacobiTheta(4,w,tau)**2, JacobiTheta(2,z,tau)**2*JacobiTheta(1,w,tau)**2 + JacobiTheta(4,z,tau)**2*JacobiTheta(3,w,tau)**2)),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("45a130"),
    Formula(Equal(JacobiTheta(4,z+w,tau)*JacobiTheta(4,z-w,tau)*JacobiTheta(4,0,tau)**2, JacobiTheta(3,z,tau)**2*JacobiTheta(3,w,tau)**2 - JacobiTheta(2,z,tau)**2*JacobiTheta(2,w,tau)**2, JacobiTheta(4,z,tau)**2*JacobiTheta(4,w,tau)**2 - JacobiTheta(1,z,tau)**2*JacobiTheta(1,w,tau)**2)),
    Variables(z, w, tau),
    Assumptions(And(Element(z, CC), Element(w, tau), Element(tau, HH))))

make_entry(ID("1fbc09"),
    Formula(Equal(JacobiTheta(3,0,tau)**4, JacobiTheta(2,0,tau)**4 + JacobiTheta(4,0,tau)**4)),
    Variables(tau),
    Assumptions(And(Element(tau, HH))))

make_entry(ID("08822c"),
    Formula(Equal(JacobiTheta(1,z,tau)**4 + JacobiTheta(3,z,tau)**4, JacobiTheta(2,z,tau)**4 + JacobiTheta(4,z,tau)**4)),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("5a3ebf"),
    Formula(Equal(JacobiTheta(1,z,tau)**4 - JacobiTheta(2,z,tau)**4, JacobiTheta(4,z,tau)**4 - JacobiTheta(3,z,tau)**4)),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("e08bb4"),
    Formula(Equal(JacobiTheta(1,z,tau)**4 - JacobiTheta(4,z,tau)**4, JacobiTheta(2,z,tau)**4 - JacobiTheta(3,z,tau)**4)),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("fa7251"),
    Formula(Equal(JacobiTheta(2,0,tau)**2 * JacobiTheta(3,z,tau)**2, JacobiTheta(4,0,tau)**2 * JacobiTheta(1,z,tau)**2 + JacobiTheta(3,0,tau)**2 * JacobiTheta(2,z,tau)**2)),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("265d9c"),
    Formula(Equal(JacobiTheta(2,0,tau)**2 * JacobiTheta(4,z,tau)**2, JacobiTheta(3,0,tau)**2 * JacobiTheta(1,z,tau)**2 + JacobiTheta(4,0,tau)**2 * JacobiTheta(2,z,tau)**2)),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("0e2635"),
    Formula(Equal(JacobiTheta(3,0,tau)**2 * JacobiTheta(2,z,tau)**2, JacobiTheta(2,0,tau)**2 * JacobiTheta(3,z,tau)**2 - JacobiTheta(4,0,tau)**2 * JacobiTheta(1,z,tau)**2)),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("6fad93"),
    Formula(Equal(JacobiTheta(3,0,tau)**2 * JacobiTheta(3,z,tau)**2, JacobiTheta(4,0,tau)**2 * JacobiTheta(4,z,tau)**2 + JacobiTheta(2,0,tau)**2 * JacobiTheta(2,z,tau)**2)),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("abbe42"),
    Formula(Equal(JacobiTheta(3,0,tau)**2 * JacobiTheta(4,z,tau)**2, JacobiTheta(2,0,tau)**2 * JacobiTheta(1,z,tau)**2 + JacobiTheta(4,0,tau)**2 * JacobiTheta(3,z,tau)**2)),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("1c67c8"),
    Formula(Equal(JacobiTheta(2,0,2*tau)*(JacobiTheta(1,z,tau)**2 - JacobiTheta(2,z,tau)**2), JacobiTheta(3,0,2*tau)*(JacobiTheta(4,z,tau)**2-JacobiTheta(3,z,tau)**2))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

def_Topic(
    Title("Specific values of Jacobi theta functions"),
    Description("See", TopicReference("Jacobi theta functions"), "for other properties of these functions."),
    Section("Values at infinity"),
    Entries(
        "e6b579",
        "1dcf7e",
        "a8ea67",
        "bf747b",
    ),
    Section("Trivial values"),
    Entries(
        "8f43ab",
        "b3c440",
        "474c51",
        "d4e418",
        "055b0a",
    ),
    Section("Square lattice"),
    Subsection("Theta constants for the square lattice"),
    Entries(
        "d15f11",
        "1403b5",
        "0d4608",
        "7d7c65",
        "8697b8",
        "66df95",
    ),
    Subsection("Values for simple rational arguments"),
    Entries(
        "2f3ed3",
        "dd5f43",
        "3fb309",
        "8c4ab4",
    ),
    Section("Theta constants for non-square lattices"),
    Subsection("Conversion from index 2 and 4 to index 3"),
    Entries(
        "47f4ba",
        "e2288d",
        "cf7ee3",
        "81550a",
    ),
    Subsection("Algebraic ratios for real part 0"),
    Entries(
        "4256f0",
        "52302f",
        "7f9273",
        "cf3c8e",
        "f12e20",
        "95e9e4",
        "483e7e",
        "cb6c9c",
        "669765",
        "72f583",
        "8356db",
        "6ade92",
    ),
    Subsection("Algebraic ratios for real part 1"),
    Entries(
        "4c8873",
        "324483",
        "b58070",
        "6cbce8",
        "5384f3",
        "e2bc80",
        "390158",
        "675f23",
    ),
    Subsection("Other values"),
    Entries(
        "c60033",
        "799b5e",
    ),
)

make_entry(ID("e6b579"),
    Formula(Equal(ComplexLimit(JacobiTheta(1,z,tau), For(tau, ConstI*Infinity)), 0)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("1dcf7e"),
    Formula(Equal(ComplexLimit(JacobiTheta(2,z,tau), For(tau, ConstI*Infinity)), 0)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("a8ea67"),
    Formula(Equal(ComplexLimit(JacobiTheta(3,z,tau), For(tau, ConstI*Infinity)), 1)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("bf747b"),
    Formula(Equal(ComplexLimit(JacobiTheta(4,z,tau), For(tau, ConstI*Infinity)), 1)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("8f43ab"),
    Formula(Equal(JacobiTheta(1,0,tau), 0)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("b3c440"),
    Formula(Equal(JacobiTheta(1,0,tau,2*r), 0)),
    Variables(tau, r),
    Assumptions(And(Element(tau, HH), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("474c51"),
    Formula(Equal(JacobiTheta(2,0,tau,2*r+1), 0)),
    Variables(tau, r),
    Assumptions(And(Element(tau, HH), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("d4e418"),
    Formula(Equal(JacobiTheta(3,0,tau,2*r+1), 0)),
    Variables(tau, r),
    Assumptions(And(Element(tau, HH), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("055b0a"),
    Formula(Equal(JacobiTheta(4,0,tau,2*r+1), 0)),
    Variables(tau, r),
    Assumptions(And(Element(tau, HH), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("d15f11"),
    Formula(Equal(JacobiTheta(3,0,ConstI), Pi**Div(1,4) / Gamma(Div(3,4)))))

make_entry(ID("1403b5"),
    Formula(Equal(JacobiTheta(3,0,ConstI), Gamma(Div(1,4)) / (Sqrt(2) * Pi**Div(3,4)))))

make_entry(ID("0d4608"),
    Formula(NotElement(JacobiTheta(3,0,ConstI), AlgebraicNumbers)),
    Description("Consequence of Nesterenko's theorem."))

make_entry(ID("7d7c65"),
    Formula(Equal(JacobiTheta(2,0,ConstI), JacobiTheta(4,0,ConstI), Brackets(2**(-Div(1,4))) * JacobiTheta(3,0,ConstI))))

make_entry(ID("8697b8"),
    Formula(Element(JacobiTheta(3,0,ConstI), RealBall(Decimal("1.0864348112133080145753161215102234570702057072452"), Decimal("1.89e-50")))))

make_entry(ID("66df95"),
    Formula(Element(JacobiTheta(4,0,ConstI), RealBall(Decimal("0.91357913815611682140724259340122208970196391639347"), Decimal("9.67e-52")))))

make_entry(ID("2f3ed3"),
    Formula(Equal(JacobiTheta(1,n/4,ConstI), Cases(
        Tuple(0, CongruentMod(n, 0, 4)),
        Tuple((-1)**Floor(n/4) * JacobiTheta(4,0,ConstI), CongruentMod(n, 2, 4)),
        Tuple((-1)**Floor(n/4) * Brackets(2**(-Div(7,16)) * Sqrt(Sqrt(2)-1) * (Sqrt(2)+1)**Div(1,4)) * JacobiTheta(3,0,ConstI), Otherwise)))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("dd5f43"),
    Formula(Equal(JacobiTheta(2,n/4,ConstI), Cases(
        Tuple((-1)**Floor((n+1)/4) * JacobiTheta(4,0,ConstI), CongruentMod(n, 0, 4)),
        Tuple(0, CongruentMod(n, 2, 4)),
        Tuple((-1)**Floor((n+1)/4) * Brackets(2**(-Div(7,16)) * Sqrt(Sqrt(2)-1) * (Sqrt(2)+1)**Div(1,4)) * JacobiTheta(3,0,ConstI), Otherwise)))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("3fb309"),
    Formula(Equal(JacobiTheta(3,n/4,ConstI), Cases(
        Tuple(JacobiTheta(3,0,ConstI), CongruentMod(n, 0, 4)),
        Tuple(JacobiTheta(4,0,ConstI), CongruentMod(n, 2, 4)),
        Tuple(Brackets((2**(-Div(7,16)) * (Sqrt(2)+1)**Div(1,4))) * JacobiTheta(3,0,ConstI), Otherwise)))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("8c4ab4"),
    Formula(Equal(JacobiTheta(4,n/4,ConstI), Cases(
        Tuple(JacobiTheta(4,0,ConstI), CongruentMod(n, 0, 4)),
        Tuple(JacobiTheta(3,0,ConstI), CongruentMod(n, 2, 4)),
        Tuple(Brackets((2**(-Div(7,16)) * (Sqrt(2)+1)**Div(1,4))) * JacobiTheta(3,0,ConstI), Otherwise)))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("47f4ba"),
    Formula(Equal(JacobiTheta(2,0,y*ConstI), (1/Sqrt(y)) * JacobiTheta(3,0,1+ConstI/y))),
    Variables(y),
    Assumptions(Element(y, OpenInterval(0, Infinity))))

make_entry(ID("e2288d"),
    Formula(Equal(JacobiTheta(2,0,1+y*ConstI), ((1+ConstI)/Sqrt(2*y)) * JacobiTheta(3,0,1+ConstI/y))),
    Variables(y),
    Assumptions(Element(y, OpenInterval(0, Infinity))))

make_entry(ID("cf7ee3"),
    Formula(Equal(JacobiTheta(4,0,y*ConstI), JacobiTheta(3,0,1+y*ConstI))),
    Variables(y),
    Assumptions(Element(y, OpenInterval(0, Infinity))))

make_entry(ID("81550a"),
    Formula(Equal(JacobiTheta(4,0,1+y*ConstI), JacobiTheta(3,0,y*ConstI))),
    Variables(y),
    Assumptions(Element(y, OpenInterval(0, Infinity))))

make_entry(ID("4256f0"),
    Formula(Equal(JacobiTheta(3,0,ConstI/2), Brackets(Sqrt((Sqrt(2)+1)/2) * 2**Div(1,4)) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("52302f"),
    Formula(Equal(JacobiTheta(3,0,ConstI/3), Brackets((2*Sqrt(3)+3)**Div(1,4)) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("7f9273"),
    Formula(Equal(JacobiTheta(3,0,ConstI/4), Brackets((1+2**(-Div(1,4)))/Sqrt(1+Sqrt(2)) * Sqrt((Sqrt(2)+1)/2) * 2**Div(1,2)) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("cf3c8e"),
    Formula(Equal(JacobiTheta(3,0,2*ConstI), Brackets(Sqrt(Sqrt(2)+2)/2) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("f12e20"),
    Formula(Equal(JacobiTheta(3,0,3*ConstI), Brackets(Sqrt(Sqrt(3)+1)/(Pow(2,Div(1,4)) * Pow(3,Div(3,8)))) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("95e9e4"),
    Formula(Equal(JacobiTheta(3,0,4*ConstI), Brackets((1+Pow(2, -Div(1,4)))/2) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("483e7e"),
    Formula(Equal(JacobiTheta(3,0,5*ConstI), Brackets(1/Sqrt(5*Sqrt(5)-10)) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("cb6c9c"),
    Formula(Equal(JacobiTheta(3,0,5*ConstI), Brackets(Sqrt(5+2*Sqrt(5))/Pow(5,Div(3,4))) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("669765"),
    Formula(Equal(JacobiTheta(3,0,6*ConstI), Brackets((-4+3*Sqrt(2)+3**Div(5,4) + 2*Sqrt(3) - 3**Div(3,4) + 2*Sqrt(2)*Parentheses(3**Div(3,4)))**Div(1,3) / (2*Parentheses(3**Div(3,8))*((Sqrt(2)-1)*(Sqrt(3)-1))**Div(1,6))) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("72f583"),
    Formula(Equal(JacobiTheta(3,0,7*ConstI), Brackets(Sqrt((((Sqrt(13 + Sqrt(7)) + Sqrt(7 + 3*Sqrt(7))) / 14) * Pow(Parentheses(28),Div(1,8))))) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("8356db"),
    Formula(Equal(JacobiTheta(3,0,9*ConstI), Brackets((1 + Pow(2*(Sqrt(3)+1),Div(1,3)))/3) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("6ade92"),
    Formula(Equal(JacobiTheta(3,0,45*ConstI), Brackets(((3+Sqrt(5)+(Sqrt(3)+Sqrt(5)+Pow(60,Div(1,4)))*Pow(2+Sqrt(3), Div(1,3)))/(3*Sqrt(10+10*Sqrt(5))))) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("4c8873"),
    Formula(Equal(JacobiTheta(3,0,1+ConstI), Brackets(2**(-Div(1,4))) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("324483"),
    Formula(Equal(JacobiTheta(3,0,1+ConstI/2), Brackets((Pow(Sqrt(2)-1, Div(2,3)) * Pow(4 + 3*Sqrt(2), Div(1,12))) / Pow(2, Div(7,24))) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("b58070"),
    Formula(Equal(JacobiTheta(3,0,1+2*ConstI), Brackets(2**(-Div(1,8))) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("6cbce8"),
    Formula(Equal(JacobiTheta(3,0,1+4*ConstI), Brackets(2**(-Div(7,16)) * (Sqrt(2)+1)**Div(1,4)) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("5384f3"),
    Formula(Equal(JacobiTheta(3,0,1+6*ConstI), Brackets((1+Sqrt(3)+Sqrt(2)*Parentheses(27)**Div(1,4))**Div(1,3) / (2**Div(11,24)*3**Div(3,8)*(Sqrt(3)-1)**Div(1,6))) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("e2bc80"),
    Formula(Equal(JacobiTheta(3,0,1+8*ConstI), Brackets(2**(-Div(7,8)) * (16 + 15*2**Div(1,4) + 12*Sqrt(2) + 9*8**Div(1,4))**Div(1,8)) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("390158"),
    Formula(Equal(JacobiTheta(3,0,1+10*ConstI), Brackets(2**Div(7,8) / ((5**Div(1,4)-1)*Sqrt(5*Sqrt(5)+5))) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("675f23"),
    Formula(Equal(JacobiTheta(3,0,1+12*ConstI), Brackets(2**(-Div(19,48)) * 3**(-Div(3,8)) * (2-3*Sqrt(2)+3**Div(5,4)+3**Div(3,4))**Div(1,3) / ((Sqrt(2)-1)**Div(1,12)*(Sqrt(3)+1)**Div(1,6)*(-1-Sqrt(3)+Sqrt(2)*Parentheses(3**Div(3,4)))**Div(1,3))) * JacobiTheta(3,0,ConstI))),
    References("https://doi.org/10.1016/j.jmaa.2003.12.009"))

make_entry(ID("c60033"),
    Formula(Equal(JacobiTheta(3, 0, Sqrt(6)*ConstI),
        Pow((Sqrt(6)/(96*Pi**3)) * ((Gamma(Div(1,24))*Gamma(Div(5,24))*Gamma(Div(7,24))*Gamma(Div(11,24))) / (18 + 12*Sqrt(2) - 10*Sqrt(3) - 7*Sqrt(6))), Div(1,4)))),
    References("http://mathworld.wolfram.com/PolyasRandomWalkConstants.html"))

make_entry(ID("799b5e"),
    Formula(Equal(JacobiTheta(3, 0, Sqrt(6)*ConstI),
        Sqrt((2/Pi) * EllipticK(((2-Sqrt(3))**2 * (Sqrt(2)-Sqrt(3))**2))))),
    References("http://mathworld.wolfram.com/PolyasRandomWalkConstants.html"))

def_Topic(
    Title("Integrals of Jacobi theta functions"),
    Description("This topic lists identities involving integrals of Jacobi theta functions", JacobiTheta(j,z,tau), ". ",
        "See the topic", TopicReference("Jacobi theta functions"), "for other properties of these functions."),
    Section("Laplace transforms"),
    Subsection("Laplace transforms"),
    Entries(
        "8a857c",
        "74be8f",
        "026e44",
        "a46f94",
    ),
    Subsection("Laplace transforms of derivatives"),
    Entries(
        "321538",
        "f5a15a",
        "64c188",
        "5c054e",
    ),
    Subsection("Special cases of Laplace transforms"),
    Entries(
        "f42652",
        "b2f31a",
        "1ee920",
        "594cc3",
    ),
    Section("Mellin transforms"),
    Entries(
        "9376ec",
        "41631f",
        "709905",
    ),
    Section("Constant definite integrals"),
    Entries(
        "f2a0c7",
        "ecb406",
        "799742",
        "f89d5a",
        "ae6718",
        "4f3d2b",
        "140815",
        "fe4967",
        "727715",
        "ea304c",
        "02d9e4",
        "963daf",
        "e4cdf1",
        "86d68c",
        "45267a",
        "5b87f3",
        "1a15f9",
    ),
    Section("Periodic integrals"),
    Entries(
        "7c78ea",
        "f71675",
        "cc59e4",
        "2429b2",
        "a0955b",
    ),
)

make_entry(ID("f42652"),
    Formula(Equal(Integral(Exp(-a*t) * JacobiTheta(1,0,ConstI*t,1), For(t, 0, Infinity)), 2 * Pi * (1/Cosh(Sqrt(Pi*a))))),
    Variables(a),
    Assumptions(And(Element(a, CC), Greater(Re(a), 0))),
    References("https://doi.org/10.1016/0022-0728(88)87001-3"))

make_entry(ID("b2f31a"),
    Formula(Equal(Integral(Exp(-a*t) * JacobiTheta(2,0,ConstI*t), For(t, 0, Infinity)), Sqrt(Pi/a) * Tanh(Sqrt(Pi*a)))),
    Variables(a),
    Assumptions(And(Element(a, CC), Greater(Re(a), 0))),
    References("https://doi.org/10.1016/0022-0728(88)87001-3"))

make_entry(ID("1ee920"),
    Formula(Equal(Integral(Exp(-a*t) * JacobiTheta(3,0,ConstI*t), For(t, 0, Infinity)), Sqrt(Pi/a) * Coth(Sqrt(Pi*a)))),
    Variables(a),
    Assumptions(And(Element(a, CC), Greater(Re(a), 0))),
    References("https://doi.org/10.1016/0022-0728(88)87001-3"))

make_entry(ID("594cc3"),
    Formula(Equal(Integral(Exp(-a*t) * JacobiTheta(4,0,ConstI*t), For(t, 0, Infinity)), Sqrt(Pi/a) * (1/Sinh(Sqrt(Pi*a))))),
    Variables(a),
    Assumptions(And(Element(a, CC), Greater(Re(a), 0))),
    References("https://doi.org/10.1016/0022-0728(88)87001-3"))

make_entry(ID("8a857c"),
    Formula(Equal(Integral(Exp(-a*t) * JacobiTheta(1,x,ConstI*b*t), For(t, 0, Infinity)), Sqrt(Pi/(a*b))*(Sinh((2*x)*Sqrt(Pi*a/b))/Cosh(Sqrt(Pi*a/b))))),
    Variables(a, b, x),
    Assumptions(And(Element(a, CC), Greater(Re(a), 0), Element(b, CC), Greater(Re(b), 0), Element(x, ClosedInterval(-Div(1,2), Div(1,2))))),
    References("https://doi.org/10.1016/0022-0728(88)87001-3"))

make_entry(ID("74be8f"),
    Formula(Equal(Integral(Exp(-a*t) * JacobiTheta(2,x,ConstI*b*t), For(t, 0, Infinity)), -Sqrt(Pi/(a*b))*(Sinh((2*x-1)*Sqrt(Pi*a/b))/Cosh(Sqrt(Pi*a/b))))),
    Variables(a, b, x),
    Assumptions(And(Element(a, CC), Greater(Re(a), 0), Element(b, CC), Greater(Re(b), 0), Element(x, ClosedInterval(0, 1)))),
    References("https://doi.org/10.1016/0022-0728(88)87001-3"))

make_entry(ID("026e44"),
    Formula(Equal(Integral(Exp(-a*t) * JacobiTheta(3,x,ConstI*b*t), For(t, 0, Infinity)), Sqrt(Pi/(a*b))*(Cosh((2*x-1)*Sqrt(Pi*a/b))/Sinh(Sqrt(Pi*a/b))))),
    Variables(a, b, x),
    Assumptions(And(Element(a, CC), Greater(Re(a), 0), Element(b, CC), Greater(Re(b), 0), Element(x, ClosedInterval(0, 1)))),
    References("https://doi.org/10.1016/0022-0728(88)87001-3"))

make_entry(ID("a46f94"),
    Formula(Equal(Integral(Exp(-a*t) * JacobiTheta(4,x,ConstI*b*t), For(t, 0, Infinity)), Sqrt(Pi/(a*b))*(Cosh((2*x)*Sqrt(Pi*a/b))/Sinh(Sqrt(Pi*a/b))))),
    Variables(a, b, x),
    Assumptions(And(Element(a, CC), Greater(Re(a), 0), Element(b, CC), Greater(Re(b), 0), Element(x, ClosedInterval(-Div(1,2), Div(1,2))))),
    References("https://doi.org/10.1016/0022-0728(88)87001-3"))

make_entry(ID("321538"),
    Formula(Equal(Integral(Exp(-a*t) * JacobiTheta(1,x,ConstI*b*t,1), For(t, 0, Infinity)), (2*Pi/b)*(Cosh((2*x)*Sqrt(Pi*a/b))/(Cosh(Sqrt(Pi*a/b)))))),
    Variables(a, b, x),
    Assumptions(And(Element(a, CC), Greater(Re(a), 0), Element(b, CC), Greater(Re(b), 0), Element(x, OpenInterval(-Div(1,2), Div(1,2))))),
    References("https://doi.org/10.1016/0022-0728(88)87001-3"))

make_entry(ID("f5a15a"),
    Formula(Equal(Integral(Exp(-a*t) * JacobiTheta(2,x,ConstI*b*t,1), For(t, 0, Infinity)), -(2*Pi/b)*(Cosh((2*x-1)*Sqrt(Pi*a/b))/(Cosh(Sqrt(Pi*a/b)))))),
    Variables(a, b, x),
    Assumptions(And(Element(a, CC), Greater(Re(a), 0), Element(b, CC), Greater(Re(b), 0), Element(x, OpenInterval(0, 1)))),
    References("https://doi.org/10.1016/0022-0728(88)87001-3"))

make_entry(ID("64c188"),
    Formula(Equal(Integral(Exp(-a*t) * JacobiTheta(3,x,ConstI*b*t,1), For(t, 0, Infinity)), (2*Pi/b)*(Sinh((2*x-1)*Sqrt(Pi*a/b))/(Sinh(Sqrt(Pi*a/b)))))),
    Variables(a, b, x),
    Assumptions(And(Element(a, CC), Greater(Re(a), 0), Element(b, CC), Greater(Re(b), 0), Element(x, OpenInterval(0, 1)))),
    References("https://doi.org/10.1016/0022-0728(88)87001-3"))

make_entry(ID("5c054e"),
    Formula(Equal(Integral(Exp(-a*t) * JacobiTheta(4,x,ConstI*b*t,1), For(t, 0, Infinity)), (2*Pi/b)*(Sinh((2*x)*Sqrt(Pi*a/b))/(Sinh(Sqrt(Pi*a/b)))))),
    Variables(a, b, x),
    Assumptions(And(Element(a, CC), Greater(Re(a), 0), Element(b, CC), Greater(Re(b), 0), Element(x, OpenInterval(-Div(1,2), Div(1,2))))),
    References("https://doi.org/10.1016/0022-0728(88)87001-3"))

make_entry(ID("9376ec"),
    Formula(Equal(Integral(t**(s-1) * JacobiTheta(2,0,ConstI*t**2), For(t, 0, Infinity)), (2**s - 1) * Pi**(-(s/2)) * Gamma(s/2) * RiemannZeta(s))),
    Variables(s),
    Assumptions(And(Element(s, CC), Greater(Re(s), 2))))

make_entry(ID("41631f"),
    Formula(Equal(Integral(t**(s-1) * (JacobiTheta(3,0,ConstI*t**2) - 1), For(t, 0, Infinity)), Pi**(-(s/2)) * Gamma(s/2) * RiemannZeta(s))),
    Variables(s),
    Assumptions(And(Element(s, CC), Greater(Re(s), 2))))

make_entry(ID("709905"),
    Formula(Equal(Integral(t**(s-1) * (JacobiTheta(4,0,ConstI*t**2) - 1), For(t, 0, Infinity)), (2**(1-s) - 1) * Pi**(-(s/2)) * Gamma(s/2) * RiemannZeta(s))),
    Variables(s),
    Assumptions(And(Element(s, CC), Greater(Re(s), 2))))

make_entry(ID("f2a0c7"),
    Formula(Equal(Integral(JacobiTheta(1,0,ConstI*t,1), For(t, 0, Infinity)), 2*Pi)))

make_entry(ID("ecb406"),
    Formula(Equal(Integral(JacobiTheta(2,0,ConstI*t), For(t, 0, Infinity)), Pi)))

make_entry(ID("799742"),
    Formula(Equal(Integral(Parentheses(JacobiTheta(3,0,ConstI*t)-1), For(t, 0, Infinity)), Pi/3)))

make_entry(ID("f89d5a"),
    Formula(Equal(Integral(Parentheses(JacobiTheta(4,0,ConstI*t)-1), For(t, 0, Infinity)), -(Pi/6))))

make_entry(ID("ae6718"),
    Formula(Equal(Integral(JacobiTheta(1,0,ConstI*t,1)**2, For(t, 0, Infinity)), Gamma(Div(1,4))**4/(4*Pi))))

make_entry(ID("4f3d2b"),
    Formula(Equal(Integral(Parentheses(JacobiTheta(4,0,ConstI*t)**2-1), For(t, 0, Infinity)), -Log(2))))

make_entry(ID("140815"),
    Formula(Equal(Integral((JacobiTheta(4,0,ConstI*t)-1)**2, For(t, 0, Infinity)), Pi/3 - Log(2))))

make_entry(ID("fe4967"),
    Formula(Equal(Integral(JacobiTheta(2,0,ConstI*t)*JacobiTheta(4,0,ConstI*t), For(t, 0, Infinity)), Log(3+2*Sqrt(2)))))

make_entry(ID("727715"),
    Formula(Equal(Integral(JacobiTheta(2,0,ConstI*t)*JacobiTheta(3,0,ConstI*t)*JacobiTheta(4,0,ConstI*t), For(t, 0, Infinity)), 2)))

make_entry(ID("ea304c"),
    Formula(Equal(Integral(JacobiTheta(2,0,ConstI*t)**2 * JacobiTheta(4,0,ConstI*t)**2, For(t, 0, Infinity)), 1)),
    References("https://math.stackexchange.com/questions/1760270/closed-form-of-an-integral-involving-a-jacobi-theta-function-int-0-infty"))

make_entry(ID("02d9e4"),
    Formula(Equal(Integral(JacobiTheta(2,0,ConstI*t)**4 * JacobiTheta(4,0,ConstI*t)**2, For(t, 0, Infinity)), 1)),
    References("https://math.stackexchange.com/questions/1760270/closed-form-of-an-integral-involving-a-jacobi-theta-function-int-0-infty"))

make_entry(ID("963daf"),
    Formula(Equal(Integral(JacobiTheta(4,0,ConstI*t)**2 / (1+t**2), For(t, 0, Infinity)), 1)),
    References("https://math.stackexchange.com/questions/1760270/closed-form-of-an-integral-involving-a-jacobi-theta-function-int-0-infty"))

make_entry(ID("e4cdf1"),
    Formula(Equal(Integral(JacobiTheta(4,0,ConstI*t)**4 / (1+t**2), For(t, 0, Infinity)), 4*Log(2)/Pi)),
    References("https://math.stackexchange.com/questions/1760270/closed-form-of-an-integral-involving-a-jacobi-theta-function-int-0-infty"))

make_entry(ID("86d68c"),
    Formula(Equal(Integral(JacobiTheta(4,0,ConstI*t)**6 / (1+t**2), For(t, 0, Infinity)), 16*ConstCatalan/Pi**2 - Div(2,3))),
    References("https://math.stackexchange.com/questions/1760270/closed-form-of-an-integral-involving-a-jacobi-theta-function-int-0-infty"))

make_entry(ID("45267a"),
    Formula(Equal(Integral(JacobiTheta(4,0,ConstI*t)**8 / (1+t**2), For(t, 0, Infinity)), 20*RiemannZeta(3)/Pi**3)),
    References("https://math.stackexchange.com/questions/1760270/closed-form-of-an-integral-involving-a-jacobi-theta-function-int-0-infty"))

make_entry(ID("5b87f3"),
    Formula(Equal(Integral(JacobiTheta(2,0,ConstI*t)**4 * JacobiTheta(4,0,ConstI*t)**4 / (1+t**2), For(t, 0, Infinity)), 8*RiemannZeta(3)/Pi**3)),
    References("https://math.stackexchange.com/questions/1760270/closed-form-of-an-integral-involving-a-jacobi-theta-function-int-0-infty"))

make_entry(ID("1a15f9"),
    Formula(Equal(Integral(JacobiTheta(2,0,ConstI*t)**4 * JacobiTheta(4,0,ConstI*t)**2 / (1+t**2), For(t, 0, Infinity)), Div(2,3))),
    References("https://math.stackexchange.com/questions/1760270/closed-form-of-an-integral-involving-a-jacobi-theta-function-int-0-infty"))

make_entry(ID("7c78ea"),
    Formula(Equal(Integral(JacobiTheta(1,x,tau), For(x, M+Div(1,2), N+Div(1,2))), 0)),
    Variables(tau, M, N),
    Assumptions(And(Element(tau, HH), Element(M, ZZ), Element(N, ZZ))))

make_entry(ID("f71675"),
    Formula(Equal(Integral(JacobiTheta(1,x,tau), For(x, 2*M, 2*N)), 0)),
    Variables(tau, M, N),
    Assumptions(And(Element(tau, HH), Element(M, ZZ), Element(N, ZZ))))

make_entry(ID("cc59e4"),
    Formula(Equal(Integral(JacobiTheta(2,x,tau), For(x, M, N)), 0)),
    Variables(tau, M, N),
    Assumptions(And(Element(tau, HH), Element(M, ZZ), Element(N, ZZ))))

make_entry(ID("2429b2"),
    Formula(Equal(Integral(JacobiTheta(3,x,tau), For(x, M/2, N/2)), (N-M)/2)),
    Variables(tau, M, N),
    Assumptions(And(Element(tau, HH), Element(M, ZZ), Element(N, ZZ))))

make_entry(ID("a0955b"),
    Formula(Equal(Integral(JacobiTheta(4,x,tau), For(x, M/2, N/2)), (N-M)/2)),
    Variables(tau, M, N),
    Assumptions(And(Element(tau, HH), Element(M, ZZ), Element(N, ZZ))))

make_entry(ID("dac0aa"),
    Formula(Where(LessEqual(Abs(Exp(-(Pi*ConstI*tau/4)) * JacobiTheta(2,z,tau,r) / (Pi*ConstI)**r -
        Sum((2*n+1)**r * q**(n*(n+1)) * (w**(2*n+1) + (-1)**r / w**(2*n+1)), For(n, 0, N-1))),
        Cases(Tuple(2 * Q**(N*(N+1)) * W**(2*N+1) * (2*N+1)**r / (1 - alpha), Less(alpha, 1)),
              Tuple(Infinity, Otherwise))),
        Equal(q, Exp(Pi*ConstI*tau)), Equal(w, Exp(Pi*ConstI*z)),
        Equal(Q, Abs(q)), Equal(W, Max(Abs(w), 1/Abs(w))),
        Equal(alpha, Q**(2*N+1) * W**2 * Exp(r/(N+1))),
    )),
    Variables(z, tau, r, N),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(r, ZZGreaterEqual(0)), Element(N, ZZGreaterEqual(1)))))

make_entry(ID("001234"),
    Formula(Where(LessEqual(Abs(ConstI * Exp(-(Pi*ConstI*tau/4)) * JacobiTheta(1,z,tau,r) / (Pi*ConstI)**r -
        Sum((-1)**n * (2*n+1)**r * q**(n*(n+1)) * (w**(2*n+1) - (-1)**r / w**(2*n+1)), For(n, 0, N-1))),
        Cases(Tuple(2 * Q**(N*(N+1)) * W**(2*N+1) * (2*N+1)**r / (1 - alpha), Less(alpha, 1)),
              Tuple(Infinity, Otherwise))),
        Equal(q, Exp(Pi*ConstI*tau)), Equal(w, Exp(Pi*ConstI*z)),
        Equal(Q, Abs(q)), Equal(W, Max(Abs(w), 1/Abs(w))),
        Equal(alpha, Q**(2*N+1) * W**2 * Exp(r/(N+1))),
    )),
    Variables(z, tau, r, N),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(r, ZZGreaterEqual(0)), Element(N, ZZGreaterEqual(1)))))

make_entry(ID("24a793"),
    Formula(Where(LessEqual(Abs(JacobiTheta(3,z,tau,r)/(2*Pi*ConstI)**r -
        Parentheses(0**r + Sum(n**r * q**(n**2) * (w**(2*n) + (-1)**r / w**(2*n)), For(n, 1, N-1)))),
        Cases(Tuple(2 * Q**(N**2) * W**(2*N) * N**r / (1 - alpha), Less(alpha, 1)),
              Tuple(Infinity, Otherwise))),
        Equal(q, Exp(Pi*ConstI*tau)), Equal(w, Exp(Pi*ConstI*z)),
        Equal(Q, Abs(q)), Equal(W, Max(Abs(w), 1/Abs(w))),
        Equal(alpha, Q**(2*N+1) * W**2 * Exp(r/N)),
    )),
    Variables(z, tau, r, N),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(r, ZZGreaterEqual(0)), Element(N, ZZGreaterEqual(1)))))

make_entry(ID("c574fd"),
    Formula(Where(LessEqual(Abs(JacobiTheta(4,z,tau,r)/(2*Pi*ConstI)**r -
        Parentheses(0**r + Sum((-1)**n * n**r * q**(n**2) * (w**(2*n) + (-1)**r / w**(2*n)), For(n, 1, N-1)))),
        Cases(Tuple(2 * Q**(N**2) * W**(2*N) * N**r / (1 - alpha), Less(alpha, 1)),
              Tuple(Infinity, Otherwise))),
        Equal(q, Exp(Pi*ConstI*tau)), Equal(w, Exp(Pi*ConstI*z)),
        Equal(Q, Abs(q)), Equal(W, Max(Abs(w), 1/Abs(w))),
        Equal(alpha, Q**(2*N+1) * W**2 * Exp(r/N)),
    )),
    Variables(z, tau, r, N),
    Assumptions(And(Element(z, CC), Element(tau, HH), Element(r, ZZGreaterEqual(0)), Element(N, ZZGreaterEqual(1)))))

make_entry(ID("a9c825"),
    Formula(Equal(JacobiTheta(2,0,tau), 2*DedekindEta(2*tau)**2/DedekindEta(tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("85b2ff"),
    Formula(Equal(JacobiTheta(3,0,tau), DedekindEta(Div(1,2)*(tau+1))**2/DedekindEta(tau+1))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("9448f2"),
    Formula(Equal(JacobiTheta(4,0,tau), DedekindEta(Div(1,2)*tau)**2/DedekindEta(tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("557b19"),
    Formula(Equal(JacobiTheta(2,0,tau) * JacobiTheta(3,0,tau) * JacobiTheta(4,0,tau), 2 * DedekindEta(tau)**3)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

def_Topic(
    Title("Lambert W-function"),
    Section("Definition"),
    Entries(
        "6da738",
    ),
    Section("Illustrations"),
    Entries(
        "cb0a9b",
    ),
    Section("Transcendental equations"),
    Entries(
        "88168b",
        "d7136f",
        "314807",
        "636929",
        "8654a3",
        "ed7dac",
        "30bd5b",
        "a172c7",
    ),
    Section("Specific values"),
    Entries(
        "0be17d",
        "c95c4f",
        "b93d09",
        "d09380",
        "5d4cce",
        "c87ff4",
        "8e8a59",
        "f372e9",
        "e1dd64",
    ),
    Section("Symmetry"),
    Entries(
        "6d936e",
    ),
    Section("Analytic properties"),
    Entries(
        "0d3b91",
        "2caf78",
        "aca420",
        "41ece5",
        "17eaad",
        "e6e7a2",
        "fdfb16",
        "276d78",
        "6191cd",
        "f0f17c",
        "766302",
    ),
    Section("Derivatives and integrals"),
    Entries(
        "8d486c",
        "72b6ca",
    ),
    Section("Series expansions"),
    Subsection("Taylor series"),
    Entries(
        "58c19a",
    ),
    Subsection("Puiseux series"),
    Entries(
        "c5a8c2",
        "0983d1",
        "d37d0f",
        "adf83a",
        "e50532",
        "99ff4c",
    ),
    Subsection("Logarithmic expansion"),
    Entries(
        "1fc63b",
        "da0f15",
    ),
    Section("Range"),
    Subsection("Tiling of the plane"),
    Entries(
        "c0ae5b",
        "6e05c9",
    ),
    Subsection("Image of the principal branch"),
    Entries(
        "ee86fb",
        "55498b",
        "44ad09",
        "2d3356",
    ),
    Subsection("Image of the non-principal branches"),
    Entries(
        "21d9a0",
        "d5917b",
        "bf3e29",
    ),
    Section("Bounds and inequalities"),
    Subsection("Complex parts"),
    Entries(
        "4257f4",
        "82926c",
        "e5bba3",
        "a68e0e",
    ),
    Subsection("Derivative bounds"),
    Entries(
        "f171a6",
        "a34260",
        "9be916",
        "b3d435",
        "8e06be",
        "72712c",
        "9136b9",
        "0eb699",
        "214b1c",
        "a1e634",
    ),
)

make_entry(ID("6da738"),
    SymbolDefinition(LambertW, LambertW(z), "Lambert W-function"),
    Description("Called with one argument", SourceForm(LambertW(z)), "(rendered", LambertW(z), ") represents the principal branch",
        "of the Lambert W-function."),
    Description("Called with two arguments", SourceForm(LambertW(z,k)), "(rendered", LambertW(z,k), ") represents the", k, "-th branch",
        "of the Lambert W-function."),
    Description("Called with three arguments", SourceForm(LambertW(z,k,r)), "(rendered", LambertW(z,k,r), ") represents the",
            r, "-th derivative of the", k, "-th branch of the Lambert W-function, with inherited branch cuts."),
    Description(SourceForm(LambertW(z,k)), "is equivalent to", SourceForm(LambertW(z,k,0)), "."),
    Description("The following table lists conditions such that", SourceForm(LambertW(z,k,r)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(And(Element(k, ZZ), Element(z, SetMinus(CC, Set(0)))), Element(LambertW(z,k), CC)),
        Tuple(And(Element(k, ZZ), Element(z, SetMinus(CC, Set(0, -Exp(-1)))), Element(r, ZZGreaterEqual(0))), Element(LambertW(z,k,r), CC)),
        Tuple(Element(r, ZZGreaterEqual(0)), Element(LambertW(0,0,r), QQ)),
      )),
    )

make_entry(ID("cb0a9b"),
    Image(Description("X-ray of", LambertW(z), "on", Element(z, ClosedInterval(-3,3) + ClosedInterval(-3,3)*ConstI)),
        ImageSource("xray_lambertw")),
    description_xray,
    )

make_entry(ID("88168b"),
    Formula(Equal(LambertW(z,k) * Exp(LambertW(z,k)), z)),
    Variables(k, z),
    Assumptions(Or(And(Element(k, ZZ), Element(z, SetMinus(CC, Set(0)))),
        And(Equal(k, 0), Equal(z, 0)))))

make_entry(ID("d7136f"),
    Formula(Equal(Solutions(Brackets(Equal(w * Exp(w), z)), ForElement(w, CC)),
        Set(LambertW(z,k), For(k), And(Element(k, ZZ), Or(NotEqual(z, 0), Equal(k, 0)))))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("314807"),
    Formula(Equal(UniqueSolution(Brackets(Equal(w * Exp(w), x)), ForElement(w, ClosedOpenInterval(-1, Infinity))),
        LambertW(x))),
    Variables(x),
    Assumptions(Element(x, ClosedOpenInterval(-(1/ConstE), Infinity))))

make_entry(ID("636929"),
    Formula(Equal(UniqueSolution(Brackets(Equal(w * Exp(w), x)), ForElement(w, OpenClosedInterval(-Infinity, -1))),
        LambertW(x,-1))),
    Variables(x),
    Assumptions(Element(x, ClosedOpenInterval(-(1/ConstE), 0))))

make_entry(ID("8654a3"),
    Formula(Equal(LambertW(x*Exp(x)), x)),
    Variables(x),
    Assumptions(Element(x, ClosedOpenInterval(-1, Infinity))))

make_entry(ID("ed7dac"),
    Formula(Equal(LambertW(x*Exp(x),-1), x)),
    Variables(x),
    Assumptions(Element(x, OpenClosedInterval(-Infinity, -1))))

make_entry(ID("30bd5b"),
    Formula(Equal(LambertW(x*Log(x)), Log(x))),
    Variables(x),
    Assumptions(Element(x, ClosedOpenInterval(1/ConstE, Infinity))))

make_entry(ID("a172c7"),
    Formula(Equal(LambertW(x*Log(x),-1), Log(x))),
    Variables(x),
    Assumptions(Element(x, OpenClosedInterval(0, -(1/ConstE)))))

make_entry(ID("0be17d"),
    Formula(Equal(LambertW(0), 0)))

make_entry(ID("c95c4f"),
    Formula(Equal(LambertW(ConstE), 1)))

make_entry(ID("b93d09"),
    Formula(Equal(LambertW(-(1/ConstE)), -1)))

make_entry(ID("d09380"),
    Formula(Equal(LambertW(-(1/ConstE),-1), -1)))

make_entry(ID("5d4cce"),
    Formula(Element(LambertW(1), RealBall(Decimal("0.56714329040978387299996866221035554975381578718651"), Decimal("2.51e-51")))))

make_entry(ID("c87ff4"),
    Formula(Equal(LambertW(0,0,1), 1)))

make_entry(ID("8e8a59"),
    Formula(Equal(LambertW(0,0,r), (-r)**(r-1))),
    Variables(r),
    Assumptions(Element(r, ZZGreaterEqual(1))))

make_entry(ID("f372e9"),
    Formula(Equal(LambertW(0,k), -Infinity)),
    Variables(k),
    Assumptions(Element(k, SetMinus(ZZ, Set(0)))))

make_entry(ID("e1dd64"),
    Formula(Equal(LambertW(-(Pi/2)), ConstI*Pi/2)))

make_entry(ID("6d936e"),
    Formula(Equal(LambertW(Conjugate(z),k), Conjugate(LambertW(z,-k)))),
    Variables(k, z),
    Assumptions(And(Element(k, ZZ), Element(z, CC),
        Or(And(Equal(k, 0), NotElement(z, OpenInterval(-Infinity, -Exp(-1)))),
           And(NotEqual(k, 0), NotElement(z, OpenClosedInterval(-Infinity, 0)))))))

make_entry(ID("0d3b91"),
    Formula(IsHolomorphic(LambertW(z), ForElement(z, SetMinus(CC, OpenClosedInterval(-Infinity, -Exp(-1)))))))

make_entry(ID("2caf78"),
    Formula(IsHolomorphic(LambertW(z,k), ForElement(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))))),
    Variables(k),
    Assumptions(Element(k, SetMinus(ZZ, Set(0)))))

make_entry(ID("aca420"),
    Formula(Equal(Poles(LambertW(z,k), ForElement(z, Union(CC, Set(UnsignedInfinity)))), Set())),
    Variables(k),
    Assumptions(Element(k, ZZ)))

make_entry(ID("41ece5"),
    Formula(Equal(BranchPoints(LambertW(z,0), z, Union(CC, Set(UnsignedInfinity))), Set(-Exp(-1), UnsignedInfinity))))

make_entry(ID("17eaad"),
    Formula(Equal(BranchPoints(LambertW(z,k), z, Union(CC, Set(UnsignedInfinity))), Set(0, -Exp(-1), UnsignedInfinity))),
    Variables(k),
    Assumptions(Element(k, Set(-1,1))))

make_entry(ID("e6e7a2"),
    Formula(Equal(BranchPoints(LambertW(z,k), z, Union(CC, Set(UnsignedInfinity))), Set(0, UnsignedInfinity))),
    Variables(k),
    Assumptions(Element(k, SetMinus(ZZ, Set(-1,0,1)))))

make_entry(ID("fdfb16"),
    Formula(Equal(BranchCuts(LambertW(z,0), z, CC), Set(OpenClosedInterval(-Infinity, -Exp(-1))))))

make_entry(ID("276d78"),
    Formula(Equal(BranchCuts(LambertW(z,k), z, CC), Set(OpenClosedInterval(-Infinity, -Exp(-1)), ClosedInterval(-Exp(-1), 0), OpenClosedInterval(-Infinity, 0)))),
    Variables(k),
    Assumptions(Element(k, Set(-1,1))))

make_entry(ID("6191cd"),
    Formula(Equal(BranchCuts(LambertW(z,k), z, CC), Set(OpenClosedInterval(-Infinity, 0)))),
    Variables(k),
    Assumptions(Element(k, SetMinus(ZZ, Set(-1,0,1)))))

make_entry(ID("f0f17c"),
    Formula(Equal(Zeros(LambertW(z,0), ForElement(z, CC)), Set(0))))

make_entry(ID("766302"),
    Formula(Equal(Zeros(LambertW(z,k), ForElement(z, CC)), Set())),
    Variables(k),
    Assumptions(Element(k, SetMinus(ZZ, Set(0)))))

make_entry(ID("8d486c"),
    Formula(Equal(LambertW(z,k,1), 1/((1+LambertW(z,k))*Exp(LambertW(z,k))))),
    Variables(k,z),
    Assumptions(Or(
        And(Equal(k,0), Element(z, SetMinus(CC, Set(-Exp(-1))))),
        And(Equal(k,-1), Element(z, SetMinus(CC, Set(0,-Exp(-1))))),
        And(Element(k, SetMinus(ZZ, Set(0,1))), Element(z, SetMinus(CC, Set(0)))))))

make_entry(ID("72b6ca"),
    Formula(Equal(LambertW(z,k,1), LambertW(z,k)/(z*(1+LambertW(z,k))))),
    Variables(k,z),
    Assumptions(Or(
        And(Element(k,Set(0,1)), Element(z, SetMinus(CC, Set(0,-Exp(-1))))),
        And(Element(k, SetMinus(ZZ, Set(0,1))), Element(z, SetMinus(CC, Set(0)))))))

make_entry(ID("58c19a"),
    Formula(Equal(LambertW(z), Sum((-n)**(n-1) / Factorial(n) * z**n, For(n, 1, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Less(Abs(z), 1/ConstE))))

make_entry(ID("c5a8c2"),
    SymbolDefinition(LambertWPuiseuxCoefficient, LambertWPuiseuxCoefficient(k), "Coefficient in scaled Puiseux expansion of Lambert W-function"))

make_entry(ID("0983d1"),
    Description("Table of", LambertWPuiseuxCoefficient(k), "for", LessEqual(0, k, 15)),
    Table(TableRelation(Tuple(k, mu, r), And(Equal(LambertWPuiseuxCoefficient(k), mu), Equal(NearestDecimal(LambertWPuiseuxCoefficient(k), 30), r))),
      TableHeadings(k, LambertWPuiseuxCoefficient(k), NearestDecimal(LambertWPuiseuxCoefficient(k), 30)), TableSplit(1),
      List(
        Tuple(0, -1, Decimal("-1.00000000000000000000000000000")),
        Tuple(1, 1, Decimal("1.00000000000000000000000000000")),
        Tuple(2, Div(-1,3), Decimal("-0.333333333333333333333333333333")),
        Tuple(3, Div(11,72), Decimal("0.152777777777777777777777777778")),
        Tuple(4, Div(-43,540), Decimal("-0.0796296296296296296296296296296")),
        Tuple(5, Div(769,17280), Decimal("0.0445023148148148148148148148148")),
        Tuple(6, Div(-221,8505), Decimal("-0.0259847148736037624926513815403")),
        Tuple(7, Div(680863,43545600), Decimal("0.0156356325323339212228101116990")),
        Tuple(8, Div(-1963,204120), Decimal("-0.00961689202429943170683911424652")),
        Tuple(9, Div(226287557,37623398400), Decimal("0.00601454325295611786095325189975")),
        Tuple(10, Div(-5776369,1515591000), Decimal("-0.00381129803489199922670430215012")),
        Tuple(11, Div(169709463197,69528040243200), Decimal("0.00244087799114398266589685852864")),
        Tuple(12, Div(-1118511313,709296588000), Decimal("-0.00157693034468678425392340953993")),
        Tuple(13, Div(667874164916771,650782456676352000), Decimal("0.00102626332050760715443754815339")),
        Tuple(14, Div(-500525573,744761417400), Decimal("-0.000672061631156136204002020043419")),
        Tuple(15, Div(103663334225097487,234281684403486720000), Decimal("0.000442473061814620909930207608585")),
    )))

make_entry(ID("d37d0f"),
    Formula(Where(Equal(LambertWPuiseuxCoefficient(k),
        ((k-1)/(k+1))*(LambertWPuiseuxCoefficient(k-2)/2 + alpha_(k-2)/4) - alpha_(k)/2 - LambertWPuiseuxCoefficient(k-1)/(k+1)),
        Def(alpha_(k), 
            Cases(Tuple(2, Equal(k, 0)),
                  Tuple(-1, Equal(k, 1)),
                  Tuple(Sum(LambertWPuiseuxCoefficient(j)*LambertWPuiseuxCoefficient(k+1-j), For(j, 2, k-1)), Otherwise))))),
    Variables(k),
    Assumptions(Element(k, ZZGreaterEqual(2))))

make_entry(ID("adf83a"),
    Formula(Less(Abs(LambertWPuiseuxCoefficient(k)), 2 * Div(4,5)**k)),
    Variables(k),
    Assumptions(Element(k, ZZGreaterEqual(0))))

make_entry(ID("e50532"),
    Formula(Where(Equal(LambertW(z), Sum(LambertWPuiseuxCoefficient(n) * v**n, For(n, 0, Infinity))),
        Equal(v, Sqrt(2*(ConstE*z+1))))),
    Variables(z),
    Assumptions(And(Element(z, CC), Less(Abs(ConstE*z+1), 1))))

make_entry(ID("99ff4c"),
    Formula(Where(Equal(LambertW(z,k), Sum(LambertWPuiseuxCoefficient(n) * v**n, For(n, 0, Infinity))),
        Equal(v, -Sqrt(2*(ConstE*z+1))))),
    Variables(k, z),
    Assumptions(And(Element(z, CC), Less(Abs(ConstE*z+1), 1), Or(And(Equal(k, -1), GreaterEqual(Im(z), 0)), And(Equal(k, 1), Less(Im(z), 0))))))

L1 = Expr(symbol_name="L_1")

L2 = Expr(symbol_name="L_2")

asympdefs = Tuple(Equal(L1, Log(z) + 2*Pi*ConstI*k), Equal(L2, Log(L1)), Equal(sigma, 1/L1), Equal(tau, L2/L1))

asympser = L1 - L2 + Sum(Sum((-1)**n / Factorial(m) * StirlingCycle(n+m, n+1) * sigma**n * tau**m, For(m, 1, Infinity)), For(n, 0, Infinity))

asympsertrunc = L1 - L2 + Sum(Sum((-1)**n / Factorial(m) * StirlingCycle(n+m, n+1) * sigma**n * tau**m, For(m, 1, M-1)), For(n, 0, N-1))

make_entry(ID("1fc63b"),
    Formula(Equal(LambertW(z,k),
        Where(asympser, asympdefs))),
    Variables(k, z),
    Assumptions(Where(And(Element(k, ZZ), Element(z, SetMinus(CC, Set(0))),
        Less(Abs(sigma), Div(1,4)), Less(Abs(tau), Div(1,4)), Or(NotEqual(k, 0), Greater(Abs(z), 1))),
            asympdefs)))

make_entry(ID("da0f15"),
    Formula(Where(LessEqual(Abs(LambertW(z,k) - Parentheses(asympsertrunc)), (4*Abs(tau)*(4*Abs(sigma))**N + (4*Abs(tau))**M)/((1-4*Abs(sigma))*(1-4*Abs(tau)))),
        asympdefs)),
    Variables(k, z, N, M),
    Assumptions(Where(And(Element(N, ZZGreaterEqual(0)), Element(M, ZZGreaterEqual(0)), Element(k, ZZ), Element(z, SetMinus(CC, Set(0))),
        Less(Abs(sigma), Div(1,4)), Less(Abs(tau), Div(1,4)), Or(NotEqual(k, 0), Greater(Abs(z), 1))),
            asympdefs)))

make_entry(ID("c0ae5b"),
    Formula(Equal(Set(LambertW(z,k), For(Tuple(k,z)), And(Element(k, ZZ), Element(z, CC), Or(NotEqual(z, 0), Equal(k, 0)))), CC)))

k1 = Subscript(k,1)

k2 = Subscript(k,2)

z1 = Subscript(z,1)

z2 = Subscript(z,2)

make_entry(ID("6e05c9"),
    Formula(NotEqual(LambertW(z1,k1), LambertW(z2,k2))),
    Variables(k1,z1,k2,z2),
    Assumptions(And(Element(k1,ZZ),Element(k2,ZZ),Element(z1,CC),Element(z2,CC),Or(NotEqual(k1,k2),NotEqual(z1,z2)),
        NotElement(LambertW(z1,k1), Set(-1,-Infinity)))))

make_entry(ID("ee86fb"),
    Formula(Equal(Set(LambertW(x), ForElement(x, OpenInterval(-Exp(-1), Infinity))), OpenInterval(-1, Infinity))))

make_entry(ID("55498b"),
    Formula(Equal(Set(LambertW(x), ForElement(x, Set(-Exp(-1)))), Set(-1))))

make_entry(ID("44ad09"),
    Formula(Equal(Set(LambertW(x), ForElement(x, OpenInterval(-Infinity, -Exp(-1)))),
        Set(-y*Cot(y) + y*ConstI, ForElement(y, OpenInterval(0, Pi))))))

make_entry(ID("2d3356"),
    Formula(Equal(Set(LambertW(z), ForElement(z, SetMinus(CC, RR))),
        Set(x+y*ConstI, For(Tuple(x, y)), And(Element(y, SetMinus(OpenInterval(-Pi, Pi), Set(0))), Element(x, OpenInterval(-y*Cot(y), Infinity)))))))

make_entry(ID("21d9a0"),
    Formula(Equal(Set(LambertW(z,-1), ForElement(z, SetMinus(CC, Set(0)))),
        Union(OpenClosedInterval(-Infinity, -1), Set(x+y*ConstI, For(Tuple(x, y)),
            Where(And(Element(x, RR), Element(y, RR), Or(And(Less(0, u, 2), LessEqual(t, v)), Parentheses(LessEqual(1, u, 2)), And(Less(1, u, 3), Greater(t, v)))),
                Equal(t, x*Sinc(y)), Equal(v, -Cos(y)), Equal(u, -(y/Pi))))))))

make_entry(ID("d5917b"),
    Formula(Equal(Set(LambertW(z,k), ForElement(z, SetMinus(CC, Set(0)))),
        Set(x+y*ConstI, For(Tuple(x, y)),
            Where(And(Element(x, RR), Element(y, RR), Or(And(Less(2*k-2, u, 2*k), Less(t, v)), Parentheses(LessEqual(2*k-1, u, 2*k)), And(Less(2*k-1, u, 2*k+1), GreaterEqual(t, v)))),
                Equal(t, x*Sinc(y)), Equal(v, -Cos(y)), Equal(u, y/Pi))))),
    Variables(k),
    Assumptions(Element(k, ZZGreaterEqual(1))))

make_entry(ID("bf3e29"),
    Formula(Equal(Set(LambertW(z,-k), ForElement(z, SetMinus(CC, Set(0)))),
        Set(x+y*ConstI, For(Tuple(x, y)),
            Where(And(Element(x, RR), Element(y, RR), Or(And(Less(2*k-2, u, 2*k), LessEqual(t, v)), Parentheses(LessEqual(2*k-1, u, 2*k)), And(Less(2*k-1, u, 2*k+1), Greater(t, v)))),
                Equal(t, x*Sinc(y)), Equal(v, -Cos(y)), Equal(u, -(y/Pi)))))),
    Variables(k),
    Assumptions(Element(k, ZZGreaterEqual(2))))

make_entry(ID("4257f4"),
    Formula(Less(Abs(Im(LambertW(z))), Pi)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("82926c"),
    Formula(Element(Im(LambertW(z,1)), OpenInterval(0, 3*Pi))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("e5bba3"),
    Formula(Element(Im(LambertW(z,-1)), OpenClosedInterval(-(3*Pi), 0))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("a68e0e"),
    Formula(Element(Sign(k) * Im(LambertW(z,k)), OpenInterval((2*Abs(k)-2)*Pi, (2*Abs(k)+1)*Pi))),
    Variables(z, k),
    Assumptions(And(Element(z, SetMinus(CC, Set(0))), Element(k, SetMinus(ZZ, Set(-1, 0, 1))))))

make_entry(ID("f171a6"),
    Formula(LessEqual(LambertW(x,0,1), 1/(x+1))),
    Variables(x),
    Assumptions(Element(x, ClosedOpenInterval(0, Infinity))))

make_entry(ID("a34260"),
    Formula(Less(LambertW(x,0,1), 2/Sqrt(1+ConstE*x))),
    Variables(x),
    Assumptions(Element(x, OpenInterval(-Exp(-1), Infinity))))

make_entry(ID("9be916"),
    Formula(Less(Abs(LambertW(x,-1,1)), 2/Sqrt(1+ConstE*x) + 2/Abs(x))),
    Variables(x),
    Assumptions(Element(x, OpenInterval(-Exp(-1), 0))))

make_entry(ID("b3d435"),
    Formula(LessEqual(Abs(LambertW(z,k,1)), Abs(Decimal("1.2")/z))),
    Variables(k,z),
    Assumptions(And(Element(k, SetMinus(ZZ, Set(-1,0,1))), Element(z, CC))))

make_entry(ID("8e06be"),
    Formula(LessEqual(Abs(LambertW(z,k,1)), Abs(Decimal("1.5")/z))),
    Variables(k,z),
    Assumptions(And(Element(z, CC), Or(And(Equal(k,1), GreaterEqual(Im(z), 0)), And(Equal(k,-1), Less(Im(z), 0))))))

make_entry(ID("72712c"),
    Formula(LessEqual(Abs(LambertW(z,k,1)), 1/Abs(z))),
    Variables(k,z),
    Assumptions(Or(And(Equal(k,0), GreaterEqual(Abs(z), 1)), And(Element(k, ZZ), Element(z, CC), GreaterEqual(Abs(z), 4*(Abs(k)+1))))))

make_entry(ID("9136b9"),
    Formula(LessEqual(Abs(LambertW(z,k,1)), Abs(1/z) * Max(3, Abs(Decimal("1.5") / Sqrt(Abs(ConstE*z+1)))))),
    Variables(k,z),
    Assumptions(And(Element(k, ZZ), Element(z, CC))))

make_entry(ID("0eb699"),
    Formula(Where(LessEqual(Abs(LambertW(z,0,1)), Abs(Decimal("2.25") / Sqrt(t * (1 + t)))), Equal(t, Abs(ConstE*z+1)))),
    Variables(z),
    Assumptions(And(Element(z, CC), LessEqual(Abs(z), 64))))

make_entry(ID("214b1c"),
    Formula(LessEqual(Abs(LambertW(z,k,1)), Abs(1/Abs(z) * (1 + 1/(4 + Abs(z)**2))))),
    Variables(k,z),
    Assumptions(And(Element(z, CC),
        Or(
            And(Element(k, Set(1, -1)), GreaterEqual(Re(z), 0)),
            And(Equal(k, -1), Less(Im(z), 0)),
            And(Equal(k, 1), GreaterEqual(Im(z), 0))))))

make_entry(ID("a1e634"),
    Formula(LessEqual(Abs(LambertW(z,k,1)), Abs(1/Abs(z) * (1 + Div(23,32) * (1/Sqrt(Abs(ConstE*z+1))))))),
    Variables(k,z),
    Assumptions(And(Element(z, CC), Element(k, Set(-1, 1)))))

def_Topic(
    Title("Landau's function"),
    Section("Definitions"),
    Entries(
        "32e430",
        "6af603",     ),
    Section("Tables"),
    Entries(
        "177218",
    ),
    Section("Arithmetic representations"),
    Entries(
        "7932c3",
    ),
    Section("Asymptotics"),
    Entries(
        "a3ab2a",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "9697b8",
        "3d5019",
        "87d19b",
    ),
    Section("Riemann hypothesis"),
    Entries(
        "65fa9f",
    ),
)

make_entry(ID("32e430"),
    SymbolDefinition(LandauG, LandauG(n), "Landau's function"),
    Description("Landau's function", LandauG(n), "gives the largest order of an element of the symmetric group", Subscript(S, n), "."),
    Description("It can be defined arithmetically as the maximum least common multiple of the partitions of", n, ", as in", EntryReference("7932c3"), "."),
    Description("The following table lists conditions such that", SourceForm(LandauG(n)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(Element(n, ZZGreaterEqual(0)), Element(LandauG(n), ZZGreaterEqual(1))))),
    References("https://oeis.org/A000793"))

make_entry(ID("177218"),
    Description("Table of", LandauG(n), "for", LessEqual(0, n, 100)),
    Table(
      Var(n),
      TableValueHeadings(n, LandauG(n)),
      TableSplit(4),
      List(
    Tuple(0, 1),
    Tuple(1, 1),
    Tuple(2, 2),
    Tuple(3, 3),
    Tuple(4, 4),
    Tuple(5, 6),
    Tuple(6, 6),
    Tuple(7, 12),
    Tuple(8, 15),
    Tuple(9, 20),
    Tuple(10, 30),
    Tuple(11, 30),
    Tuple(12, 60),
    Tuple(13, 60),
    Tuple(14, 84),
    Tuple(15, 105),
    Tuple(16, 140),
    Tuple(17, 210),
    Tuple(18, 210),
    Tuple(19, 420),
    Tuple(20, 420),
    Tuple(21, 420),
    Tuple(22, 420),
    Tuple(23, 840),
    Tuple(24, 840),
    Tuple(25, 1260),
    Tuple(26, 1260),
    Tuple(27, 1540),
    Tuple(28, 2310),
    Tuple(29, 2520),
    Tuple(30, 4620),
    Tuple(31, 4620),
    Tuple(32, 5460),
    Tuple(33, 5460),
    Tuple(34, 9240),
    Tuple(35, 9240),
    Tuple(36, 13860),
    Tuple(37, 13860),
    Tuple(38, 16380),
    Tuple(39, 16380),
    Tuple(40, 27720),
    Tuple(41, 30030),
    Tuple(42, 32760),
    Tuple(43, 60060),
    Tuple(44, 60060),
    Tuple(45, 60060),
    Tuple(46, 60060),
    Tuple(47, 120120),
    Tuple(48, 120120),
    Tuple(49, 180180),
    Tuple(50, 180180),
    Tuple(51, 180180),
    Tuple(52, 180180),
    Tuple(53, 360360),
    Tuple(54, 360360),
    Tuple(55, 360360),
    Tuple(56, 360360),
    Tuple(57, 471240),
    Tuple(58, 510510),
    Tuple(59, 556920),
    Tuple(60, 1021020),
    Tuple(61, 1021020),
    Tuple(62, 1141140),
    Tuple(63, 1141140),
    Tuple(64, 2042040),
    Tuple(65, 2042040),
    Tuple(66, 3063060),
    Tuple(67, 3063060),
    Tuple(68, 3423420),
    Tuple(69, 3423420),
    Tuple(70, 6126120),
    Tuple(71, 6126120),
    Tuple(72, 6846840),
    Tuple(73, 6846840),
    Tuple(74, 6846840),
    Tuple(75, 6846840),
    Tuple(76, 8953560),
    Tuple(77, 9699690),
    Tuple(78, 12252240),
    Tuple(79, 19399380),
    Tuple(80, 19399380),
    Tuple(81, 19399380),
    Tuple(82, 19399380),
    Tuple(83, 38798760),
    Tuple(84, 38798760),
    Tuple(85, 58198140),
    Tuple(86, 58198140),
    Tuple(87, 58198140),
    Tuple(88, 58198140),
    Tuple(89, 116396280),
    Tuple(90, 116396280),
    Tuple(91, 116396280),
    Tuple(92, 116396280),
    Tuple(93, 140900760),
    Tuple(94, 140900760),
    Tuple(95, 157477320),
    Tuple(96, 157477320),
    Tuple(97, 232792560),
    Tuple(98, 232792560),
    Tuple(99, 232792560),
    Tuple(100, 232792560),
    )))

make_entry(ID("7932c3"),
    Formula(Equal(LandauG(n),
        Maximum(Set(LCM(Subscript(s, 1), Ellipsis, Subscript(s, k)), For(Tuple(k, Subscript(s, i))),
            And(Element(k, ZZGreaterEqual(0)), Element(Subscript(s, i), ZZGreaterEqual(1)), Equal(Sum(Subscript(s, i), For(i, 1, k)), n)))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("a3ab2a"),
    Formula(Equal(SequenceLimit(Log(LandauG(n)) / Sqrt(n * Log(n)), For(n, Infinity)), 1)))

make_entry(ID("9697b8"),
    Formula(LessEqual(Log(LandauG(n)), Sqrt(n*Log(n)) * (1 + (Log(Log(n))-Decimal("0.975"))/(2*Log(n))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(4))),
    References("Jean-Pierre Massias, Jean-Louis Nicolas and Guy Robin (1989), Effective bounds for the maximal order of an element in the symmetric group, Mathematics of Computation, 53, 118, 665--665, https://doi.org/10.1090/s0025-5718-1989-0979940-4"))

make_entry(ID("3d5019"),
    Formula(GreaterEqual(Log(LandauG(n)), Sqrt(n*Log(n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(906))),
    References("Jean-Pierre Massias, Jean-Louis Nicolas and Guy Robin (1989), Effective bounds for the maximal order of an element in the symmetric group, Mathematics of Computation, 53, 118, pp. 665-665, https://doi.org/10.1090/s0025-5718-1989-0979940-4"))

make_entry(ID("87d19b"),
    Formula(LessEqual(Maximum(Set(p, For(p), And(Element(p, PP), Divides(p, LandauG(n))))), Decimal("1.328") * Sqrt(n*Log(n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(5))),
    References("Jon Grantham (1995), The largest prime dividing the maximal order of an element of S_n, 64, 209, pp. 407--210, https://doi.org/10.2307/2153344"))

make_entry(ID("65fa9f"),
    Formula(Equivalent(RiemannHypothesis,
        Where(
            All(Less(Log(LandauG(n)), Sqrt(f(n))), ForElement(n, ZZGreaterEqual(1))),
            Equal(f(y), UniqueSolution(Brackets(Equal(LogIntegral(x), y)), ForElement(x, OpenInterval(1, Infinity))))))),
    References("Marc Deleglise, Jean-Louis Nicolas, The Landau function and the Riemann Hypothesis, https://arxiv.org/abs/1907.07664"))

def_Topic(
    Title("Legendre elliptic integrals"),
    Section("Definitions"),
    Entries(
        "e8ae42",
        "723fd0",
        "34482b",
        "107140",
        "afdf5d",
        "53b1e7",
    ),
    Section("Illustrations"),
    Entries(
        "89d93c",
        "210213",
        "4704f9",
        "20d72c",
    ),
    Section("Integral representations"),
    Subsection("Trigonometric forms of the complete integrals"),
    Entries(
        "0455b3",
        "190843",
        "83a535",
    ),
    Subsection("Algebraic forms of the complete integrals"),
    Entries(
        "47dead",
        "fa8666",
        "c10014",
        "7cd257",
    ),
    Subsection("Trigonometric forms of the incomplete integrals"),
    Entries(
        "81fb10",
        "2ff7e7",
        "60f858",
    ),
    Subsection("Algebraic forms of the incomplete integrals"),
    Entries(
        "33ee4a",
        "5e869b",
        "06223c",
    ),
    Section("Specific values"),
    Subsection("Complete elliptic integrals"),
    Entries(
        "bb4501",
        "1d62a7",
        "45b157",
        "958a3f",
        "afb22a",
        "cc22bf",
        "630eca",
        "9f3474",
        "3b272e",
        "5d2c01",
        "2991b5",
        "4b040d",
        "0abbe1",
        "175b7a",
        "b95ffa",
        "40a376",
        "618a54",
        "18e226",
        "061c49",
        "3c4979",
        "124d02",
        "9b0385",
        "ce4df4",
        "e9c797",
        "5d8804",
        "dd67fb",
        "9227bf",
    ),
    Subsection("Incomplete integral of the first kind"),
    Entries(
        "ba1965",
        "4268fc",
        "d2adb6",
        "0b8fd6",
        "81f7db",
        "afabeb",
        "c0ad12",
        "ace837",
        "16612f",
        "04c829",
        "c584c3",
        "f5d489",
        "a91f8d",
        "b7cfb3",
        "8b4be6",
        "aac129",
        "087a7c",
    ),
    Subsection("Incomplete integral of the second kind"),
    Entries(
        "a6c07e",
        "be3e09",
        "efc7a4",
        "1b881e",
        "2ef763",
        "a14442",
        "75e141",
        "f35a37",
        "51a946",
        "2573ba",
        "b62aae",
        "dec0d2",
        "2245df",
        "3aed02",
        "d88dd1",
        "4dabda",
        "eba27c",
        "f0bcb5",
    ),
    Section("Functional equations"),
    Subsection("Conjugate symmetry"),
    Entries(
        "713966",
        "8e5c81",
    ),
    Subsection("Odd symmetry"),
    Entries(
        "b0eb37",
        "aa1b8e",
        "255d81",
    ),
    Subsection("Quasi-periodicity"),
    Entries(
        "685126",
        "c28288",
        "5f84d9",
    ),
    Section("Representation by other functions"),
    Subsection("Hypergeometric functions"),
    Entries(
        "b760d1",
        "16d2e1",
        "752619",
    ),
    Subsection("Arithmetic-geometric mean"),
    Entries(
        "e15f43",
    ),
    Subsection("Carlson symmetric elliptic integrals"),
    Entries(
        "0cc11f",
        "6520e7",
        "9ccaef",
        "41cf8e",
        "94f646",
        "55d23d",
        "e2445d",
        "f48f54",
        "8f4e31",
    ),
    Section("Representation of other functions"),
    Entries(
        "71a0ff",
    ),
)

make_entry(ID("e8ae42"),
    SymbolDefinition(EllipticK, EllipticK(m), "Legendre complete elliptic integral of the first kind"))

make_entry(ID("723fd0"),
    SymbolDefinition(EllipticE, EllipticE(m), "Legendre complete elliptic integral of the second kind"))

make_entry(ID("34482b"),
    SymbolDefinition(EllipticPi, EllipticPi(n, m), "Legendre complete elliptic integral of the third kind"))

make_entry(ID("107140"),
    SymbolDefinition(IncompleteEllipticF, IncompleteEllipticF(phi, m), "Legendre incomplete elliptic integral of the first kind"))

make_entry(ID("afdf5d"),
    SymbolDefinition(IncompleteEllipticE, IncompleteEllipticE(phi, m), "Legendre incomplete elliptic integral of the second kind"))

make_entry(ID("53b1e7"),
    SymbolDefinition(IncompleteEllipticPi, IncompleteEllipticPi(n, phi, m), "Legendre incomplete elliptic integral of the third kind"))

make_entry(ID("89d93c"),
    Image(Description("Plot of", EllipticK(m), "on", Element(m, ClosedInterval(-2,2))),
        ImageSource("plot_elliptic_k")))

make_entry(ID("210213"),
    Image(Description("Plot of", EllipticE(m), "on", Element(m, ClosedInterval(-2,2))),
        ImageSource("plot_elliptic_e")))

make_entry(ID("4704f9"),
    Image(Description("Plot of", IncompleteEllipticF(phi, m), "on", Element(phi, ClosedInterval(-(2*Pi),2*Pi))),
        ImageSource("plot_incomplete_elliptic_f")))

make_entry(ID("20d72c"),
    Image(Description("Plot of", IncompleteEllipticE(phi, m), "on", Element(phi, ClosedInterval(-(2*Pi),2*Pi))),
        ImageSource("plot_incomplete_elliptic_e")))

make_entry(ID("0455b3"),
    Formula(Equal(EllipticK(m), Integral(1/Sqrt(1-m*Sin(x)**2), For(x, 0, Pi / 2)))),
    Variables(m),
    Assumptions(Element(m, SetMinus(CC, ClosedOpenInterval(1, Infinity)))))

make_entry(ID("190843"),
    Formula(Equal(EllipticE(m), Integral(Sqrt(1-m*Sin(x)**2), For(x, 0, Pi / 2)))),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("83a535"),
    Formula(Equal(EllipticPi(n, m), Integral(1/((1-n*Sin(x)**2) * Sqrt(1 - m*Sin(x)**2)), For(x, 0, Pi / 2)))),
    Variables(n, m),
    Assumptions(And(Element(n, OpenInterval(-Infinity, 1)), Element(m, OpenInterval(-Infinity, 1)))))

make_entry(ID("47dead"),
    Formula(Equal(EllipticK(m), Integral(1/(Sqrt(1-x**2) * Sqrt(1 - m*x**2)), For(x, 0, 1)))),
    Variables(m),
    Assumptions(Element(m, SetMinus(CC, ClosedOpenInterval(1, Infinity)))))

make_entry(ID("fa8666"),
    Formula(Equal(EllipticE(m), Integral(Sqrt(1-m*x**2) / Sqrt(1-x**2), For(x, 0, 1)))),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("c10014"),
    Formula(Equal(EllipticPi(n, m), Integral(1/((1-n*x**2)*Sqrt(1-x**2)*Sqrt(1-m*x**2)), For(x, 0, 1)))),
    Variables(n, m),
    Assumptions(And(Element(n, OpenInterval(-Infinity, 1)), Element(m, OpenInterval(-Infinity, 1)))))

make_entry(ID("7cd257"),
    Formula(Equal(EllipticK(m), Integral(1/(Sqrt(x**2-1) * Sqrt(x**2-m)), For(x, 1, Infinity)))),
    Variables(m),
    Assumptions(Element(m, SetMinus(CC, ClosedOpenInterval(1, Infinity)))))

make_entry(ID("81fb10"),
    Formula(Equal(IncompleteEllipticF(phi, m), Integral(1/Sqrt(1-m*Sin(x)**2), For(x, 0, phi)))),
    Variables(phi, m),
    Assumptions(And(Element(phi, ClosedInterval(-Pi/2, Pi/2)), Element(m, SetMinus(CC, ClosedOpenInterval(1, Infinity))))))

make_entry(ID("2ff7e7"),
    Formula(Equal(IncompleteEllipticE(phi, m), Integral(Sqrt(1-m*Sin(x)**2), For(x, 0, phi)))),
    Variables(phi, m),
    Assumptions(And(Element(phi, ClosedInterval(-Pi/2, Pi/2)), Element(m, CC))))

make_entry(ID("60f858"),
    Formula(Equal(IncompleteEllipticPi(n, phi, m), Integral(1/((1-n*Sin(x)**2) * Sqrt(1 - m*Sin(x)**2)), For(x, 0, phi)))),
    Variables(n, phi, m),
    Assumptions(And(Element(phi, ClosedInterval(-Pi/2, Pi/2)), Element(n, OpenInterval(-Infinity, 1)), Element(m, OpenInterval(-Infinity, 1)))))

make_entry(ID("33ee4a"),
    Formula(Equal(IncompleteEllipticF(phi, m), Integral(1/(Sqrt(1-x**2) * Sqrt(1 - m*x**2)), For(x, 0, Sin(phi))))),
    Variables(phi, m),
    Assumptions(And(Element(phi, ClosedInterval(-Pi/2, Pi/2)), Element(m, SetMinus(CC, ClosedOpenInterval(1, Infinity))))))

make_entry(ID("5e869b"),
    Formula(Equal(IncompleteEllipticE(phi, m), Integral(Sqrt(1-m*x**2)/Sqrt(1-x**2), For(x, 0, Sin(phi))))),
    Variables(phi, m),
    Assumptions(And(Element(phi, ClosedInterval(-Pi/2, Pi/2)), Element(m, CC))))

make_entry(ID("06223c"),
    Formula(Equal(IncompleteEllipticPi(n, phi, m), Integral(1/((1-n*x**2) * Sqrt(1-x**2) * Sqrt(1 - m*x**2)), For(x, 0, Sin(phi))))),
    Variables(n, phi, m),
    Assumptions(And(Element(phi, ClosedInterval(-Pi/2, Pi/2)), Element(n, OpenInterval(-Infinity, 1)), Element(m, OpenInterval(-Infinity, 1)))))

make_entry(ID("bb4501"),
    Formula(Equal(EllipticK(0), Pi / 2)))

make_entry(ID("1d62a7"),
    Formula(Equal(EllipticE(0), Pi / 2)))

make_entry(ID("45b157"),
    Formula(Equal(EllipticK(1), Infinity)))

make_entry(ID("958a3f"),
    Formula(Equal(EllipticE(1), 1)))

make_entry(ID("afb22a"),
    Formula(Equal(EllipticK(-1), Div(Pow(Gamma(Div(1, 4)), 2), Mul(4, Sqrt(Mul(2, Pi)))))))

make_entry(ID("cc22bf"),
    Formula(Equal(EllipticK(Div(1,2)), Div(Pow(Gamma(Div(1, 4)), 2), Mul(4, Sqrt(Pi))))))

make_entry(ID("630eca"),
    Formula(Equal(EllipticK(2), Mul(Div(Pow(Gamma(Div(1, 4)), 2), Mul(4, Sqrt(Mul(2, Pi)))), Sub(1, ConstI)))))

make_entry(ID("9f3474"),
    Formula(Equal(EllipticE(-1), Mul(Sqrt(2), Add(Div(Pow(Gamma(Div(1, 4)), 2), Mul(8, Sqrt(Pi))), Div(Pow(Pi, Div(3, 2)), Pow(Gamma(Div(1, 4)), 2)))))))

make_entry(ID("3b272e"),
    Formula(Equal(EllipticE(Div(1, 2)), Add(Div(Pow(Gamma(Div(1, 4)), 2), Mul(8, Sqrt(Pi))), Div(Pow(Pi, Div(3, 2)), Pow(Gamma(Div(1, 4)), 2))))))

make_entry(ID("5d2c01"),
    Formula(Equal(EllipticE(2), Mul(Div(Mul(Sqrt(2), Pow(Pi, Div(3, 2))), Pow(Gamma(Div(1, 4)), 2)), Add(1, ConstI)))))

make_entry(ID("2991b5"),
    Formula(Equal(EllipticK((3-2*Sqrt(2))**2), Div(Mul(Add(2, Sqrt(2)), Pow(Gamma(Div(1, 4)), 2)), Mul(16, Sqrt(Pi))))))

make_entry(ID("4b040d"),
    Formula(Equal(EllipticK((4-3*Sqrt(2))/8), Div(Pow(Gamma(Div(1, 4)), 2), Mul(Mul(4, Pow(2, Div(1, 4))), Sqrt(Pi))))))

make_entry(ID("0abbe1"),
    Formula(Equal(EllipticK((1+Sqrt(3)*ConstI)/2), Exp(ConstI * Pi / 12) * 3**Div(1,4) * Gamma(Div(1,3))**3 / (2**Div(7,3) * Pi))))

make_entry(ID("175b7a"),
    Formula(Equal(EllipticK((1-Sqrt(3)*ConstI)/2), Exp(-(ConstI * Pi / 12)) * 3**Div(1,4) * Gamma(Div(1,3))**3 / (2**Div(7,3) * Pi))))

make_entry(ID("b95ffa"),
    Formula(Equal(EllipticK(4*Sqrt(3)-7), (Sqrt(3 + 2*Sqrt(3)) * Gamma(Div(1,3))**3 / (2**Div(10,3) * Pi)))))

make_entry(ID("40a376"),
    Formula(Equal(EllipticK(Div(1,2) - Sqrt(3)/4), (3**Div(1,4) * Gamma(Div(1,3))**3) / (4 * 2**Div(1,3) * Pi))))

make_entry(ID("618a54"),
    Formula(Equal(EllipticPi(0, 0), Pi / 2)))

make_entry(ID("18e226"),
    Formula(Equal(EllipticPi(0, 1), Infinity)))

make_entry(ID("061c49"),
    Formula(Equal(EllipticPi(1, 0), UnsignedInfinity)))

make_entry(ID("3c4979"),
    Formula(Equal(EllipticPi(0, Div(1, 2)), Div(Pow(Gamma(Div(1, 4)), 2), Mul(4, Sqrt(Pi))))))

make_entry(ID("124d02"),
    Formula(Equal(EllipticPi(Div(1, 2), 0), (Pi * Sqrt(2)) / 2)))

make_entry(ID("9b0385"),
    Formula(Equal(EllipticPi(Div(1, 2), Div(1, 2)), Add(Div(Pow(Gamma(Div(1, 4)), 2), Mul(4, Sqrt(Pi))), Div(2 * Pow(Pi, Div(3, 2)), Pow(Gamma(Div(1, 4)), 2))))))

make_entry(ID("ce4df4"),
    Formula(Equal(EllipticPi(1, m), UnsignedInfinity)),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("e9c797"),
    Formula(Equal(EllipticPi(n, 1), Cases(Tuple((1-n)**(-1) * Infinity, NotEqual(n, 1)), Tuple(UnsignedInfinity, Equal(n, 1))))),
    Variables(n),
    Assumptions(Element(n, CC)))

make_entry(ID("5d8804"),
    Formula(Equal(EllipticPi(n, 0), Pi / (2 * Sqrt(1 - n)))),
    Variables(n),
    Assumptions(Element(n, CC)))

make_entry(ID("dd67fb"),
    Formula(Equal(EllipticPi(0, m), EllipticK(m))),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("9227bf"),
    Formula(Equal(EllipticPi(m, m), EllipticE(m) / (1 - m))),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("ba1965") ,
    Formula(Equal(IncompleteEllipticF(0, 0), 0)))

make_entry(ID("4268fc"),
    Formula(Equal(IncompleteEllipticF(0, m), 0)),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("d2adb6"),
    Formula(Equal(IncompleteEllipticF(phi, 0), phi)),
    Variables(phi),
    Assumptions(Element(phi, CC)))

make_entry(ID("0b8fd6"),
    Formula(Equal(IncompleteEllipticF(Pi / 2, m), EllipticK(m))),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("81f7db"),
    Formula(Equal(IncompleteEllipticF(-Pi / 2, m), -EllipticK(m))),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("afabeb"),
    Formula(Equal(IncompleteEllipticF(Pi * k / 2, m), k * EllipticK(m))),
    Variables(m, k),
    Assumptions(And(Element(m, CC), Element(k, ZZ), Or(NotEqual(k, 0), NotEqual(m, 1)))))

make_entry(ID("c0ad12"),
    Formula(Equal(IncompleteEllipticF(Pi / 2, 0), Pi / 2)))

make_entry(ID("ace837"),
    Formula(Equal(IncompleteEllipticF(Pi / 2, -1), Gamma(Div(1,4))**2 / (4*Sqrt(2*Pi)))))

make_entry(ID("16612f"),
    Formula(Equal(IncompleteEllipticF(Pi / 2, 1), Infinity)))

make_entry(ID("04c829"),
    Formula(Equal(IncompleteEllipticF(-Pi / 2, 1), -Infinity)))

make_entry(ID("c584c3"),
    Formula(Equal(IncompleteEllipticF(Pi / 3, 1), Log(2+Sqrt(3)))))

make_entry(ID("f5d489"),
    Formula(Equal(IncompleteEllipticF(Pi / 4, 1), Log(1+Sqrt(2)))))

make_entry(ID("a91f8d"),
    Formula(Equal(IncompleteEllipticF(Pi / 6, 1), Log(3)/2)))

make_entry(ID("8b4be6"),
    Formula(Equal(IncompleteEllipticF(Pi / 4, 2), Div(Mul(Sqrt(2), Pow(Gamma(Div(1, 4)), 2)), Mul(8, Sqrt(Pi))))))

make_entry(ID("aac129"),
    Formula(Equal(IncompleteEllipticF(Pi / 6, 4), (EllipticK(Div(1,4)) / 2))))

make_entry(ID("b7cfb3"),
    Formula(Equal(IncompleteEllipticF(phi, 1), Cases(Tuple(Log((1 + Sin(phi))/Cos(phi)), And(LessEqual(-Pi/2, Re(phi), Pi/2), NotElement(phi, Set(-Pi/2, Pi/2)))),
        Tuple(Sign(phi) * Infinity, Element(phi, Set(-Pi/2, Pi/2))),
        Tuple(UnsignedInfinity, Otherwise)))),
    Variables(phi),
    Assumptions(Element(phi, CC)))

make_entry(ID("087a7c"),
    Formula(Equal(IncompleteEllipticF(Asin(1/Sqrt(m)), m), EllipticK(1/m) / Sqrt(m))),
    Variables(m),
    Assumptions(Element(m, SetMinus(CC, Set(0)))))

make_entry(ID("a6c07e"),
    Formula(Equal(IncompleteEllipticE(0, 0), 0)))

make_entry(ID("be3e09"),
    Formula(Equal(IncompleteEllipticE(0, m), 0)))

make_entry(ID("efc7a4"),
    Formula(Equal(IncompleteEllipticE(phi, 0), phi)),
    Variables(phi),
    Assumptions(Element(phi, CC)))

make_entry(ID("1b881e"),
    Formula(Equal(IncompleteEllipticE(Pi/2, m), EllipticE(m))),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("2ef763"),
    Formula(Equal(IncompleteEllipticE(-Pi/2, m), -EllipticE(m))),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("a14442"),
    Formula(Equal(IncompleteEllipticE(Pi*k/2, m), k*EllipticE(m))),
    Variables(m, k),
    Assumptions(And(Element(m, CC), Element(k, ZZ))))

make_entry(ID("75e141"),
    Formula(Equal(IncompleteEllipticE(phi, 1), Sin(phi))),
    Variables(phi),
    Assumptions(And(Element(phi, CC), Or(Element(Re(phi), ClosedOpenInterval(-Pi/2, Pi/2)), Equal(phi, Pi/2)))))

make_entry(ID("f35a37"),
    Formula(Equal(IncompleteEllipticE(phi, 1), (-1)**Floor(Re(phi)/Pi+Div(1,2)) * Sin(phi) + 2*Floor(Re(phi)/Pi+Div(1,2)))),
    Variables(phi),
    Assumptions(Element(phi, CC)))

make_entry(ID("51a946"),
    Formula(Equal(IncompleteEllipticE(Pi / 2, 0), Pi / 2)))

make_entry(ID("2573ba"),
    Formula(Equal(IncompleteEllipticE(Pi / 2, -1), Mul(Sqrt(2), Add(Div(Pow(Gamma(Div(1, 4)), 2), Mul(8, Sqrt(Pi))), Div(Pow(Pi, Div(3, 2)), Pow(Gamma(Div(1, 4)), 2)))))))

make_entry(ID("b62aae"),
    Formula(Equal(IncompleteEllipticE(Pi / 2, 1), 1)))

make_entry(ID("dec0d2"),
    Formula(Equal(IncompleteEllipticE(-Pi / 2, 1), -1)))

make_entry(ID("2245df"),
    Formula(Equal(IncompleteEllipticE(Pi*k/2, 1), k)),
    Variables(k),
    Assumptions(Element(k, ZZ)))

make_entry(ID("3aed02"),
    Formula(Equal(IncompleteEllipticE(Pi/3, 1), Sqrt(3) / 2)))

make_entry(ID("d88dd1"),
    Formula(Equal(IncompleteEllipticE(Pi/6, 1), Div(1, 2))))

make_entry(ID("4dabda"),
    Formula(Equal(IncompleteEllipticE(Pi/4, 2), Div(Mul(Sqrt(2), Pow(Pi, Div(3, 2))), Pow(Gamma(Div(1, 4)), 2)))))

make_entry(ID("eba27c"),
    Formula(Equal(IncompleteEllipticE(Pi/6, 4), 2*EllipticE(Div(1, 4)) - Div(3,2)*EllipticK(Div(1, 4)))))

make_entry(ID("f0bcb5"),
    Formula(Equal(IncompleteEllipticE(Asin(1/Sqrt(m)), m), Sqrt(m) * (EllipticE(1/m) - (1 - 1/m)*EllipticK(1/m)))),
    Variables(m),
    Assumptions(Element(m, SetMinus(CC, Set(0, 1)))))

make_entry(ID("713966"),
    Formula(Equal(EllipticK(Conjugate(m)), Conjugate(EllipticK(m)))),
    Variables(m),
    Assumptions(Element(m, SetMinus(CC, OpenInterval(1, Infinity)))))

make_entry(ID("8e5c81"),
    Formula(Equal(EllipticE(Conjugate(m)), Conjugate(EllipticE(m)))),
    Variables(m),
    Assumptions(Element(m, SetMinus(CC, OpenInterval(1, Infinity)))))

make_entry(ID("b0eb37"),
    Formula(Equal(IncompleteEllipticF(-phi, m), -IncompleteEllipticF(phi, m))),
    Variables(phi, m),
    Assumptions(And(Element(phi, CC), Element(m, CC))))

make_entry(ID("aa1b8e"),
    Formula(Equal(IncompleteEllipticE(-phi, m), -IncompleteEllipticE(phi, m))),
    Variables(phi, m),
    Assumptions(And(Element(phi, CC), Element(m, CC))))

make_entry(ID("255d81"),
    Formula(Equal(IncompleteEllipticPi(n, -phi, m), -IncompleteEllipticPi(n, phi, m))),
    Variables(n, phi, m),
    Assumptions(And(Element(n, CC), Element(phi, CC), Element(m, CC))))

make_entry(ID("685126"),
    Formula(Equal(IncompleteEllipticF(phi + k*Pi, m), IncompleteEllipticF(phi, m) + 2 * k * EllipticK(m))),
    Variables(phi, m, k),
    Assumptions(And(Element(phi, CC), Element(m, CC), Element(k, ZZ), NotEqual(m, 1))))

make_entry(ID("c28288"),
    Formula(Equal(IncompleteEllipticE(phi + k*Pi, m), IncompleteEllipticE(phi, m) + 2 * k * EllipticE(m))),
    Variables(phi, m, k),
    Assumptions(And(Element(phi, CC), Element(m, CC), Element(k, ZZ))))

make_entry(ID("5f84d9"),
    Formula(Equal(IncompleteEllipticPi(n, phi + k*Pi, m), IncompleteEllipticPi(n, phi, m) + 2 * k * EllipticPi(n, m))),
    Variables(n, phi, m, k),
    Assumptions(And(Element(n, CC), Element(phi, CC), Element(m, CC), Element(k, ZZ), NotEqual(n, 1), NotEqual(m, 1))))

make_entry(ID("b760d1"),
    Formula(Equal(EllipticK(m), (Pi/2) * Hypergeometric2F1(Div(1,2), Div(1,2), 1, m))),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("16d2e1"),
    Formula(Equal(EllipticE(m), (Pi/2) * Hypergeometric2F1(-Div(1,2), Div(1,2), 1, m))),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("752619"),
    Formula(Equal(2*EllipticE(m) - EllipticK(m), (Pi/2) * Hypergeometric2F1(-Div(1,2), Div(3,2), 1, m))),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("0cc11f"),
    Formula(Equal(EllipticK(m), CarlsonRF(0, 1-m, 1))),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("6520e7"),
    Formula(Equal(EllipticE(m), 2 * CarlsonRG(0, 1-m, 1))),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("9ccaef"),
    Formula(Equal(EllipticPi(n, m), CarlsonRF(0, 1-m, 1) + (n/3) * CarlsonRJ(0, 1-m, 1, 1-n))),
    Variables(n, m),
    Assumptions(And(Element(n, CC), Element(m, CC), NotEqual(m, 1))))

make_entry(ID("41cf8e"),
    Formula(Equal(EllipticE(m), ((1-m)/3) * (CarlsonRD(0, 1-m, 1) + CarlsonRD(0, 1, 1-m)))),
    Variables(m),
    Assumptions(And(Element(m, CC), NotEqual(m, 1))))

make_entry(ID("94f646"),
    Formula(Equal(EllipticK(m) - EllipticE(m), (m / 3) * CarlsonRD(0, 1-m, 1))),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("55d23d"),
    Formula(Equal(EllipticE(m) - (1-m) * EllipticK(m), ((m*(1-m)) / 3) * CarlsonRD(0, 1, 1-m))),
    Variables(m),
    Assumptions(Element(m, CC)))

make_entry(ID("e2445d"),
    Formula(Equal(IncompleteEllipticF(phi, m), Sin(phi) * CarlsonRF(Cos(phi)**2, 1 - m*Sin(phi)**2, 1))),
    Variables(phi, m),
    Assumptions(And(Element(phi, CC), Element(m, CC), LessEqual(-Pi/2, Re(phi), Pi/2))))

make_entry(ID("f48f54"),
    Formula(Equal(IncompleteEllipticE(phi, m), Sin(phi) * CarlsonRF(Cos(phi)**2, 1 - m*Sin(phi)**2, 1) - Div(1,3)*m*Sin(phi)**3*CarlsonRD(Cos(phi)**2, 1-m*Sin(phi)**2, 1))),
    Variables(phi, m),
    Assumptions(And(Element(phi, CC), Element(m, CC), LessEqual(-Pi/2, Re(phi), Pi/2))))

make_entry(ID("8f4e31"),
    Formula(Equal(IncompleteEllipticPi(n, phi, m), Sin(phi) * CarlsonRF(Cos(phi)**2, 1 - m*Sin(phi)**2, 1) + Div(1,3)*n*Sin(phi)**3*CarlsonRJ(Cos(phi)**2, 1-m*Sin(phi)**2, 1, 1-n*Sin(phi)**2))),
    Variables(n, phi, m),
    Assumptions(And(Element(n, CC), Element(phi, CC), Element(m, CC), LessEqual(-Pi/2, Re(phi), Pi/2))))

def_Topic(
    Title("Legendre polynomials"),
    Section("Particular values"),
    Entries(
        "9bdf22",
        "217521",
        "d77f0a",
        "9b7f05",
        "a17386",
        "13f971",
        "a7ac51",
        "3df748",
        "674afa",
        "85eebc",
    ),
    Section("Recurrence and functional equations"),
    Entries(
        "0010f3",
        "367ac2",
        "27688e",
        "925fdf",
    ),
    Section("Generating functions"),
    Entries(
        "d84519",
    ),
    Section("Rodrigues' formula"),
    Entries(
        "4cfeac",
    ),
    Section("Integrals"),
    Entries(
        "e36542",
    ),
    Section("Sum representations"),
    Entries(
        "c5dd9b",
        "f0569a",
        "7a85b7",
    ),
    Section("Hypergeometric representations"),
    Entries(
        "9395fc",
        "f55f0a",
        "3c87b9",
        "6cd4a1",
        "859445",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "1ba9a5",
        "155343",
        "ef4b53",
        "b786ad",
        "60ac50",
        "59e5df",
        "3b175b",
        "6476bd",
    ),
    Section("Analytic properties"),
    Entries(
        "40fa59",
        "d36fd7",
        "99e62f",
        "7680d3",
        "22a42f",
        "415911",
        "df439e",
        "0745ee",
        "b2d723",
    ),
    Section("Gauss-Legendre quadrature"),
    SeeTopics("Gaussian quadrature"),
    Entries(
        "ea4754",
        "47b181",
    ),
    Section("Bounds and inequalities"),
    Subsection("Turán's inequalities"),
    Entries(
        "c8d10e",
        "227d60",
    ),
)

make_entry(ID("0010f3"),
    Formula(Equal(LegendrePolynomial(n,-z), (-1)**n * LegendrePolynomial(n,z))),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, CC))))

make_entry(ID("367ac2"),
    Formula(Equal((n+1)*LegendrePolynomial(n+1,z) - (2*n+1)*z*LegendrePolynomial(n,z) + n*LegendrePolynomial(n-1,z), 0)),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(z, CC))))

make_entry(ID("27688e"),
    Formula(Equal((1-z**2)*ComplexDerivative(LegendrePolynomial(n,z), For(z,z,2)) - 2*z*ComplexDerivative(LegendrePolynomial(n,z), For(z,z,1)) + n*(n+1)*LegendrePolynomial(n,z), 0)),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, CC))))

make_entry(ID("925fdf"),
    Formula(Equal((1-z**2)*ComplexDerivative(LegendrePolynomial(n,z), For(z,z,1)) + n*z*LegendrePolynomial(n,z) - n*LegendrePolynomial(n-1,z), 0)),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(z, CC))))

make_entry(ID("9bdf22"),
    Formula(Equal(LegendrePolynomial(0,z), 1)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("217521"),
    Formula(Equal(LegendrePolynomial(1,z), z)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("d77f0a"),
    Formula(Equal(LegendrePolynomial(2,z), Div(1,2)*(3*z**2 - 1))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("9b7f05"),
    Formula(Equal(LegendrePolynomial(3,z), Div(1,2)*(5*z**3 - 3*z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("a17386"),
    Formula(Equal(LegendrePolynomial(4,z), Div(1,8)*(35*z**4 - 30*z**2 + 3))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("13f971"),
    Formula(Equal(LegendrePolynomial(5,z), Div(1,8)*(63*z**5 - 70*z**3 + 15*z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("a7ac51"),
    Formula(Equal(LegendrePolynomial(n,1), 1)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("3df748"),
    Formula(Equal(LegendrePolynomial(n,-1), (-1)**n)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("674afa"),
    Formula(Equal(LegendrePolynomial(2*n,0), ((-1)**n / 4**n) * Binomial(2*n,n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("85eebc"),
    Formula(Equal(LegendrePolynomial(2*n+1,0), 0)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("d84519"),
    Formula(Equal(Sum(LegendrePolynomial(n,x) * z**n, For(n, 0, Infinity)),
        1 / Sqrt(1 - 2*x*z + z**2))),
    Variables(x, z),
    Assumptions(And(Element(x, ClosedInterval(-1,1)), Element(z, CC), Less(Abs(z), 1))))

make_entry(ID("4cfeac"),
    Formula(Equal(LegendrePolynomial(n,z),
        Div(1,2**n * Factorial(n)) * ComplexDerivative((t**2-1)**n, For(t, z, n)))),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0))), Element(z, CC)))

make_entry(ID("e36542"),
    Formula(Equal(Integral(LegendrePolynomial(n, x) * LegendrePolynomial(m, x), For(x, -1, 1)), Div(2,2*n+1) * KroneckerDelta(n, m))),
    Variables(n, m),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(m, ZZGreaterEqual(0)))))

make_entry(ID("c5dd9b"),
    Formula(Equal(LegendrePolynomial(n, z), Div(1,2**n) * Sum(Binomial(n,k)**2 * (z-1)**(n-k) * (z+1)**k, For(k, 0, n)))),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, CC))))

make_entry(ID("f0569a"),
    Formula(Equal(LegendrePolynomial(n, z), Sum(Binomial(n,k) * Binomial(n+k,k) * Div(z-1,2)**k, For(k, 0, n)))),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, CC))))

make_entry(ID("7a85b7"),
    Formula(Equal(LegendrePolynomial(n, z), Div(1,2**n) * Sum((-1)**k * Binomial(n,k) * Binomial(2*n-2*k,n) * z**(n-2*k), For(k, 0, Floor(n/2))))),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, CC))))

make_entry(ID("9395fc"),
    Formula(Equal(LegendrePolynomial(n, z), Hypergeometric2F1(-n, n+1, 1, (1-z)/2))),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, CC))))

make_entry(ID("f55f0a"),
    Formula(Equal(LegendrePolynomial(n, z), Binomial(2*n,n) * (z/2)**n * Hypergeometric2F1(-(n/2), (1-n)/2, Div(1,2)-n, 1/z**2))),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, SetMinus(CC, Set(0))))))

make_entry(ID("3c87b9"),
    Formula(Equal(LegendrePolynomial(n, z), Div(z-1,2)**n * Hypergeometric2F1(-n, -n, 1, (z+1)/(z-1)))),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, SetMinus(CC, Set(1))))))

make_entry(ID("6cd4a1"),
    Formula(Equal(LegendrePolynomial(2*n, z), Div((-1)**n, 4**n) * Binomial(2*n,n) * Hypergeometric2F1(-n, n+Div(1,2), Div(1,2), z**2))),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, CC))))

make_entry(ID("859445"),
    Formula(Equal(LegendrePolynomial(2*n+1, z), Div((-1)**n, 4**n) * (2*n+1) * Binomial(2*n,n) * z * Hypergeometric2F1(-n, n+Div(3,2), Div(3,2), z**2))),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, CC))))

make_entry(ID("1ba9a5"),
    Formula(LessEqual(Abs(LegendrePolynomial(n,x)), 1)),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), LessEqual(-1, x, 1))))

make_entry(ID("155343"),
    Formula(LessEqual(Abs(LegendrePolynomial(n,x)), 2*BesselI(0,2*n*Sqrt(Abs(x-1)/2)), 2*Exp(2*n*Sqrt(Abs(x-1)/2)))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(x, RR))))

make_entry(ID("ef4b53"),
    Formula(LessEqual(Abs(LegendrePolynomial(n,z)), Abs(LegendrePolynomial(n, Abs(z)*ConstI)), (Abs(z)+Sqrt(1+Abs(z)**2))**n)),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, CC))))

make_entry(ID("b786ad"),
    Formula(LessEqual(Abs(ComplexDerivative(LegendrePolynomial(n,x), For(x, x, 1))), (n*(n+1))/2)),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), LessEqual(-1, x, 1))))

make_entry(ID("60ac50"),
    Formula(LessEqual(Abs(ComplexDerivative(LegendrePolynomial(n,x), For(x, x, 1))), (2**Div(3,2) / Sqrt(Pi)) * (n**Div(1,2) / (1 - x**2)**Div(3,4)))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Less(-1, x, 1))))

make_entry(ID("59e5df"),
    Formula(LessEqual(Abs(ComplexDerivative(LegendrePolynomial(n,x), For(x, x, 2))), ((n-1)*n*(n+1)*(n+2))/8)),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), LessEqual(-1, x, 1))))

make_entry(ID("3b175b"),
    Formula(LessEqual(Abs(ComplexDerivative(LegendrePolynomial(n,x), For(x, x, 2))), (2**Div(5,2) / Sqrt(Pi)) * (n**Div(3,2) / (1 - x**2)**Div(5,4)))),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Less(-1, x, 1))))

make_entry(ID("6476bd"),
    Formula(LessEqual(Abs(ComplexDerivative(LegendrePolynomial(n,x), For(x, x, r))), (2**(r+Div(1,2)) / Sqrt(Pi)) * (n**(r-Div(1,2)) / (1 - x**2)**((2*n+1)/4)))),
    Variables(n, r, x),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(r, ZZGreaterEqual(0)), Less(-1, x, 1))))

make_entry(ID("40fa59"),
    Formula(IsHolomorphic(LegendrePolynomial(n,z), ForElement(z, CC))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("d36fd7"),
    Formula(Equal(Poles(LegendrePolynomial(n,z), ForElement(z, Union(CC, Set(UnsignedInfinity)))), Set(UnsignedInfinity))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("99e62f"),
    Formula(Equal(EssentialSingularities(LegendrePolynomial(n,z), z, Union(CC, Set(UnsignedInfinity))), Set())),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("7680d3"),
    Formula(Equal(BranchPoints(LegendrePolynomial(n,z), z, Union(CC, Set(UnsignedInfinity))), Set())),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("22a42f"),
    Formula(Equal(BranchCuts(LegendrePolynomial(n,z), z, CC), Set())),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("415911"),
    Formula(Equal(Cardinality(Zeros(LegendrePolynomial(n,z), ForElement(z, CC))), n)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("df439e"),
    Formula(Subset(Zeros(LegendrePolynomial(n,z), ForElement(z, CC)), OpenInterval(-1,1))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("0745ee"),
    Formula(Equal(Zeros(LegendrePolynomial(n,z), ForElement(z, CC)), Set(LegendrePolynomialZero(n,k), For(k, 1, n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("b2d723"),
    Formula(Equal(LegendrePolynomial(n, Conjugate(z)), Conjugate(LegendrePolynomial(n, z)))),
    Variables(n, z),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(z, CC))))

make_entry(ID("c8d10e"),
    Formula(GreaterEqual(Parentheses(LegendrePolynomial(n, x))**2 - LegendrePolynomial(n-1, x) * LegendrePolynomial(n+1, x), 0)),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(x, ClosedInterval(-1, 1)))))

make_entry(ID("227d60"),
    Formula(Greater(Parentheses(LegendrePolynomial(n, x))**2 - LegendrePolynomial(n-1, x) * LegendrePolynomial(n+1, x), 0)),
    Variables(n, x),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(x, OpenInterval(-1, 1)))))

def_Topic(
    Title("Natural logarithm"),
    Section("Definitions"),
    Entries(
        "ed210c",
    ),
    Section("Illustrations"),
    Entries(
        "4fe0ff",
    ),
    Section("Particular values"),
    Entries(
        "07731b",
        "699c83",
        "d496b8",
        "c331da",
        "2f1f7b",
    ),
    Section("Functional equations and connection formulas"),
    Entries(
        "d87f6e",
        "4c1e1e",
        "a3a253",
        "c43533",
        "f67fa2",
    ),
    Section("Analytic properties"),
    Entries(
        "4538ba",
        "c464e3",
        "ddc8a1",
        "940c48",
        "b5ded1",
        "ed6590",
        "c1bee1",
        "a2189a",
        "cbfd70",
        "1d447b",
    ),
    Section("Complex parts"),
    Entries(
        "13895b",
        "099b19",
        "fbfb81",
        "dcc1e5",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "4986ed",
        "792c76",
        "77aa12",
    ),
    Section("Integral representations"),
    Entries(
        "0ba9b2",
        "c77f9a",
        "e4f73a",
        "a4ac32",
    ),
)

Log_branch_cut = OpenClosedInterval(-Infinity, 0)

Log_holomorphic_domain = SetMinus(CC, Log_branch_cut)

make_entry(ID("ed210c"),
    SymbolDefinition(Log, Log(z), "Natural logarithm"),
    Description("The principal branch of the natural logarithm", Log(z), "is a function of one complex variable", z, ".",),
    Description("It has a branch point singularity at", Equal(z, 0),
        "and a branch cut on", OpenClosedInterval(-Infinity, 0), "where the value on",
            OpenInterval(-Infinity, 0), "is taken to be continuous with the upper half plane."),
    Description("The following table lists all conditions such that", SourceForm(Log(z)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(Element(z, Set(1)), Element(Log(z), Set(0))),
        Tuple(Element(z, OpenInterval(0,Infinity)), Element(Log(z), RR)),
        Tuple(Element(z, SetMinus(CC, Set(0))), Element(Log(z), CC)),
        TableSection("Infinities"),
        Tuple(Element(z, Set(Infinity)), Element(Log(z), Set(Infinity))),
        TableSection("Formal power series"),
        Tuple(And(Element(z, PowerSeries(QQ, x)), Equal(SeriesCoefficient(z, x, 0), 1)),
            And(Element(Log(z), PowerSeries(QQ, x)), Equal(SeriesCoefficient(Log(z), x, 0), 0))),
        Tuple(And(Element(z, PowerSeries(RR, x)), Element(SeriesCoefficient(z, x, 0), OpenInterval(0,Infinity))),
            And(Element(Log(z), PowerSeries(RR, x)))),
        Tuple(And(Element(z, PowerSeries(CC, x)), NotEqual(SeriesCoefficient(z, x, 0), 0)),
            And(Element(Log(z), PowerSeries(CC, x)))),
      )))

make_entry(ID("4fe0ff"),
    Image(Description("X-ray of", Log(z), "on", Element(z, ClosedInterval(-3,3) + ClosedInterval(-3,3)*ConstI)),
        ImageSource("xray_log")),
    description_xray,
    )

make_entry(ID("07731b"),
    Formula(Equal(Log(1), 0)))

make_entry(ID("699c83"),
    Formula(Equal(Log(ConstE), 1)))

make_entry(ID("d496b8"),
    Description("Table of", Log(n), "to 50 digits for", LessEqual(1, n, 50)),
    Table(
      Var(n),
      TableValueHeadings(n, NearestDecimal(Log(n), 50)),
      TableSplit(1),
      List(
    Tuple(1, Decimal("0")),
    Tuple(2, Decimal("0.69314718055994530941723212145817656807550013436026")),
    Tuple(3, Decimal("1.0986122886681096913952452369225257046474905578227")),
    Tuple(4, Decimal("1.3862943611198906188344642429163531361510002687205")),
    Tuple(5, Decimal("1.6094379124341003746007593332261876395256013542685")),
    Tuple(6, Decimal("1.7917594692280550008124773583807022727229906921830")),
    Tuple(7, Decimal("1.9459101490553133051053527434431797296370847295819")),
    Tuple(8, Decimal("2.0794415416798359282516963643745297042265004030808")),
    Tuple(9, Decimal("2.1972245773362193827904904738450514092949811156455")),
    Tuple(10, Decimal("2.3025850929940456840179914546843642076011014886288")),
    Tuple(11, Decimal("2.3978952727983705440619435779651292998217068539374")),
    Tuple(12, Decimal("2.4849066497880003102297094798388788407984908265433")),
    Tuple(13, Decimal("2.5649493574615367360534874415653186048052679447602")),
    Tuple(14, Decimal("2.6390573296152586145225848649013562977125848639421")),
    Tuple(15, Decimal("2.7080502011022100659960045701487133441730919120913")),
    Tuple(16, Decimal("2.7725887222397812376689284858327062723020005374410")),
    Tuple(17, Decimal("2.8332133440562160802495346178731265355882030125857")),
    Tuple(18, Decimal("2.8903717578961646922077225953032279773704812500058")),
    Tuple(19, Decimal("2.9444389791664404600090274318878535372373792612991")),
    Tuple(20, Decimal("2.9957322735539909934352235761425407756766016229890")),
    Tuple(21, Decimal("3.0445224377234229965005979803657054342845752874046")),
    Tuple(22, Decimal("3.0910424533583158534791756994233058678972069882977")),
    Tuple(23, Decimal("3.1354942159291496908067528318101961184423803148404")),
    Tuple(24, Decimal("3.1780538303479456196469416012970554088739909609035")),
    Tuple(25, Decimal("3.2188758248682007492015186664523752790512027085370")),
    Tuple(26, Decimal("3.2580965380214820454707195630234951728807680791205")),
    Tuple(27, Decimal("3.2958368660043290741857357107675771139424716734682")),
    Tuple(28, Decimal("3.3322045101752039239398169863595328657880849983024")),
    Tuple(29, Decimal("3.3672958299864740271832720323619116054945129139227")),
    Tuple(30, Decimal("3.4011973816621553754132366916068899122485920464515")),
    Tuple(31, Decimal("3.4339872044851462459291643245423572104499389304806")),
    Tuple(32, Decimal("3.4657359027997265470861606072908828403775006718013")),
    Tuple(33, Decimal("3.4965075614664802354571888148876550044691974117602")),
    Tuple(34, Decimal("3.5263605246161613896667667393313031036637031469460")),
    Tuple(35, Decimal("3.5553480614894136797061120766693673691626860838504")),
    Tuple(36, Decimal("3.5835189384561100016249547167614045454459813843660")),
    Tuple(37, Decimal("3.6109179126442244443680956710314471639000775871676")),
    Tuple(38, Decimal("3.6375861597263857694262595533460301053128793956594")),
    Tuple(39, Decimal("3.6635616461296464274487326784878443094527585025830")),
    Tuple(40, Decimal("3.6888794541139363028524556976007173437521017573493")),
    Tuple(41, Decimal("3.7135720667043078038667633730374075883764104693993")),
    Tuple(42, Decimal("3.7376696182833683059178301018238820023600754217649")),
    Tuple(43, Decimal("3.7612001156935624234728425133458470355591361848816")),
    Tuple(44, Decimal("3.7841896339182611628964078208814824359727071226579")),
    Tuple(45, Decimal("3.8066624897703197573912498070712390488205824699140")),
    Tuple(46, Decimal("3.8286413964890950002239849532683726865178804492007")),
    Tuple(47, Decimal("3.8501476017100585868209506697721737088960505020202")),
    Tuple(48, Decimal("3.8712010109078909290641737227552319769494910952638")),
    Tuple(49, Decimal("3.8918202981106266102107054868863594592741694591637")),
    Tuple(50, Decimal("3.9120230054281460586187507879105518471267028428973")))))

make_entry(ID("c331da"),
    Formula(Equal(Log(ConstI), Pi*ConstI/2)))

make_entry(ID("2f1f7b"),
    Formula(Equal(Log(-1), Pi*ConstI)))

make_entry(ID("4538ba"),
    Formula(IsHolomorphic(Log(z), ForElement(z, Log_holomorphic_domain))))

make_entry(ID("c464e3"),
    Formula(Equal(Poles(Log(z), ForElement(z, Union(CC, Set(UnsignedInfinity)))), Set())))

make_entry(ID("ddc8a1"),
    Formula(Equal(EssentialSingularities(Log(z), z, Union(CC, Set(UnsignedInfinity))), Set())))

make_entry(ID("940c48"),
    Formula(Equal(BranchPoints(Log(z), z, Union(CC, Set(UnsignedInfinity))), Set(UnsignedInfinity, 0))))

make_entry(ID("b5ded1"),
    Formula(Equal(BranchCuts(Log(z), z, CC), Set(Log_branch_cut))))

make_entry(ID("ed6590"),
    Formula(Equal(AnalyticContinuation(Log(z), For(z, a, b)), Log(-b) + Pi*ConstI)),
    Variables(a,b),
    Assumptions(And(Element(a, CC), Element(b, CC), Greater(Im(a), 0), Less(Im(b), 0), Greater(Re(a)*Im(b)-Re(b)*Im(a), 0))))

make_entry(ID("c1bee1"),
    Formula(Equal(AnalyticContinuation(Log(z), For(z, a, b)), Log(-b) - Pi*ConstI)),
    Variables(a,b),
    Assumptions(And(Element(a, CC), Element(b, CC), Less(Im(a), 0), Greater(Im(b), 0), Less(Re(a)*Im(b)-Re(b)*Im(a), 0))))

make_entry(ID("a2189a"),
    Formula(Equal(AnalyticContinuation(Log(z), For(z, CurvePath(R * Exp(ConstI*t), For(t, 0, theta)))), Log(R) + theta*ConstI)),
    Variables(R, theta),
    Assumptions(And(Element(R, OpenInterval(0, Infinity)), Element(theta, RR))))

make_entry(ID("cbfd70"),
    Formula(Equal(AnalyticContinuation(Log(R * Exp(ConstI*t)), For(t, 0, theta)), Log(R) + theta*ConstI)),
    Variables(R, theta),
    Assumptions(And(Element(R, OpenInterval(0, Infinity)), Element(theta, RR))))

make_entry(ID("1d447b"),
    Formula(Equal(Zeros(Log(z), ForElement(z, CC)), Set(1))))

make_entry(ID("13895b"),
    Formula(Equal(Log(Conjugate(z)), Conjugate(Log(z)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Log_branch_cut))))

make_entry(ID("099b19"),
    Formula(Equal(Re(Log(z)), Log(Abs(z)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("fbfb81"),
    Formula(Equal(Im(Log(z)), Arg(z))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("dcc1e5"),
    Formula(Equal(Abs(Log(z)), Sqrt(Log(Abs(z))**2 + Arg(z)**2))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("4986ed"),
    Formula(LessEqual(Log(x), x-1)),
    Variables(x),
    Assumptions(Element(x, OpenInterval(0,Infinity))))

make_entry(ID("792c76"),
    Formula(LessEqual(Abs(Log(z)), Abs(Log(Abs(z))) + Pi)),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("d87f6e"),
    Formula(Equal(Exp(Log(z)), z)),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("4c1e1e"),
    Formula(Equal(Log(Exp(z)), z)),
    Variables(z),
    Assumptions(And(Element(z, CC), Element(Im(z), OpenClosedInterval(-Pi, Pi)))))

make_entry(ID("a3a253"),
    Formula(Equal(Log(Exp(z)), z - 2*Pi*ConstI*Ceil(Im(z)/(2*Pi)-Div(1,2)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("c43533"),
    Formula(Equal(Log(z), Log(Abs(z)) + Arg(z)*ConstI)),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("f67fa2"),
    Formula(Equal(Log(c*z), Log(c) + Log(z))),
    Variables(c, z),
    Assumptions(And(Element(c, OpenInterval(0, Infinity)), Element(z, SetMinus(CC, Set(0))))))

make_entry(ID("0ba9b2"),
    Formula(Equal(Log(z), Integral(1/t, For(t, 1, z)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Log_branch_cut))))

make_entry(ID("77aa12"),
    Formula(LessEqual(Abs(Log(x+a)-Log(x)), Log(1+Abs(a)/(x-Abs(a))))),
    Variables(x, a),
    Assumptions(And(Element(x, RR), Element(a, RR), GreaterEqual(a, 0), Less(Abs(a), x))))

make_entry(ID("c77f9a"),
    Formula(ComplexIndefiniteIntegralEqual(1/z, Log(z), z)),
    Variables(z),
    Assumptions(Element(z, Log_holomorphic_domain)))

make_entry(ID("e4f73a"),
    Formula(ComplexIndefiniteIntegralEqual(1/z, Log(-z), z)),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("a4ac32"),
    Formula(RealIndefiniteIntegralEqual(1/x, Log(Abs(x)), x)),
    Variables(x),
    Assumptions(Element(x, SetMinus(RR, Set(0)))))

def_Topic(
    Title("Elementary logic and set theory"),
    Section("Logical operations"),
    Entries(
        "488b6d",
        "0a6d2e",
        "a53803",
        "2d6cf1",
        "379aa0",
    ),
    Section("Sets"),
    Entries(
        "cf447f",
    ),
    Section("Set operations"),
    Entries(
        "81efd5",
        "1d963f",
        "985bda",
        "0e613e",
        "ec33ac",
        "27f845",
        "590290",
        "a9e8df",
        "e58aaf",
    ),
)

make_entry(ID("488b6d"),
    SymbolDefinition(Not, Not(x), "Logical not"))

make_entry(ID("0a6d2e"),
    SymbolDefinition(And, And(x, y), "Logical and"))

make_entry(ID("a53803"),
    SymbolDefinition(Or, Or(x, y), "Logical or"))

make_entry(ID("2d6cf1"),
    SymbolDefinition(Equivalent, Equivalent(x, y), "Logical equivalence"))

make_entry(ID("379aa0"),
    SymbolDefinition(Implies, Implies(x, y), "Logical implication"))

make_entry(ID("cf447f"),
    SymbolDefinition(Set, Set(Ellipsis), "Set with given elements"),
    Description(SourceForm(Set(x, y, z)), ", rendered as", Set(x, y, z),
        ", represents the finite set containing the given elements (and similarly with any number of argumeents).",
        "In particular, ", SourceForm(Set()), "or", Set(),
            "is the empty set, and", SourceForm(Set(x)), "or", Set(x), "is a singleton set."),
    Description("The special expressions", SourceForm(For), ", ", SourceForm(ForElement), "define a set comprehension:"),
    Description(SourceForm(Set(f(x), For(x), P(x))), ", rendered as", Set(f(x), For(x), P(x)), "."),
    Description(SourceForm(Set(f(x), ForElement(x, S))), ", rendered as", Set(f(x), ForElement(x, S)), "."),
    Description(SourceForm(Set(f(x), ForElement(x, S), P(x))), ", rendered as", Set(f(x), ForElement(x, S), P(x)), "."),
    Description(SourceForm(Set(f(x), For(x, a, b))), ", rendered as", Set(f(x), For(x, a, b)), ".")
)

make_entry(ID("81efd5"),
    SymbolDefinition(Cardinality, Cardinality(S), "Set cardinality"),
    Description(SourceForm(Cardinality(S)), ", rendered as", Cardinality(S),
        ", represents the cardinality of the set", S, ".",
        "The cardinality of a finite set is a nonnegative integer.",
        "Cardinalities of infinite sets may be represented in terms of this symbol;",
        "for example,", Cardinality(ZZ), "is the cardinality of any countable set",
        "and", Cardinality(RR), "is the cardinality of the continuum."))

make_entry(ID("1d963f"),
    SymbolDefinition(PowerSet, PowerSet(S), "Power set"))

make_entry(ID("985bda"),
    SymbolDefinition(Union, Union(S, T), "Set union"))

make_entry(ID("0e613e"),
    SymbolDefinition(Intersection, Intersection(S, T), "Set intersection"))

make_entry(ID("ec33ac"),
    SymbolDefinition(SetMinus, SetMinus(S, T), "Set difference"))

make_entry(ID("27f845"),
    SymbolDefinition(Element, Element(x, S), "Set membership"))

make_entry(ID("590290"),
    SymbolDefinition(NotElement, NotElement(x, S), "Set non-membership"))

make_entry(ID("a9e8df"),
    SymbolDefinition(Subset, Subset(S, T), "Strict subset"))

make_entry(ID("e58aaf"),
    SymbolDefinition(SubsetEqual, SubsetEqual(S, T), "Subset"))

def_Topic(
    Title("Modular j-invariant"),
    Section("Definitions"),
    Entries(
        "70eb98",
    ),
    Section("Illustrations"),
    Entries(
        "8c2862",
    ),
    Section("Modular transformations"),
    Entries(
        "a997f2",
        "42a909",
        "d5f569",
    ),
    Section("Special values"),
    Entries(
        "9aa62c",
        "ad228f",
        "229c97",
        "1356e4",
        "8be46c",
        "3189b9",
        "29c095",
        "a498dd",
        "3ee358",
        "5b108e",
        "951017",
        "1cb24e",
    ),
    Section("Connection formulas"),
    Entries(
        "cedcfc",
        "664b4c",
        "dc8251",
    ),
    Section("Derivatives"),
    Entries(
        "f0f53b",
        "348b26",
    ),
    Section("Analytic properties"),
    Entries(
        "27f9d2",
        "ea3e3c",
        "1b2d8a",
        "dcc8b1",
        "441301",
    ),
    Section("Hilbert class polynomials"),
    Entries(
        "36eb82",
        "0b4d4b",
        "fd72e0",
        "dd5681",
        "20b6d2",
    ),
)

make_entry(ID("70eb98"),
    SymbolDefinition(ModularJ, ModularJ(tau), "Modular j-invariant"),
    Description("The modular j-invariant", ModularJ(tau), "is a function of one variable", tau, "in the upper half-plane."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(Element(tau, HH), Element(ModularJ(tau), CC)),
      )))

make_entry(ID("8c2862"),
    Image(Description("X-ray of", ModularJ(tau), "on", Element(tau, ClosedInterval(-1,1) + ClosedInterval(0,2)*ConstI), "with", ModularGroupFundamentalDomain, "highlighted"),
        ImageSource("xray_modular_j")),
    description_xray,
    )

make_entry(ID("a997f2"),
    Formula(Equal(ModularJ(tau+1), ModularJ(tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("42a909"),
    Formula(Equal(ModularJ(-(1/tau)), ModularJ(tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("d5f569"),
    Formula(Equal(ModularJ((a*tau+b)/(c*tau+d)), ModularJ(tau))),
    Variables(a, b, c, d, tau),
    Assumptions(And(Element(tau, HH), Element(Matrix2x2(a, b, c, d), SL2Z))))

make_entry(ID("9aa62c"),
    Formula(Equal(ModularJ(Exp(Pi*ConstI/3)), 0)))

make_entry(ID("ad228f"),
    Formula(Equal(ModularJ(ConstI), 1728)))

make_entry(ID("229c97"),
    Formula(Equal(ModularJ(2*ConstI), Pow(66, 3), 287496)))

make_entry(ID("1356e4"),
    Formula(Equal(ModularJ(Sqrt(2)*ConstI), Pow(20, 3), 8000)))

make_entry(ID("8be46c"),
    Formula(Equal(ModularJ(3*ConstI), 64 * (2+Sqrt(3))**2 * (21 + 20*Sqrt(3))**3)))

make_entry(ID("3189b9"),
    Formula(Equal(ModularJ(4*ConstI), 27 * (724 + 513*Sqrt(2))**3)))

make_entry(ID("29c095"),
    Formula(Equal(ModularJ(Div(1,2)*(1+Sqrt(7)*ConstI)), -Pow(15,3))))

make_entry(ID("a498dd"),
    Formula(Equal(ModularJ(Div(1,2)*(1+Sqrt(11)*ConstI)), -Pow(32,3))))

make_entry(ID("3ee358"),
    Formula(Equal(ModularJ(Div(1,2)*(1+Sqrt(19)*ConstI)), -Pow(96,3))))

make_entry(ID("5b108e"),
    Formula(Equal(ModularJ(Div(1,2)*(1+Sqrt(43)*ConstI)), -Pow(960,3))))

make_entry(ID("951017"),
    Formula(Equal(ModularJ(Div(1,2)*(1+Sqrt(67)*ConstI)), -Pow(5280,3))))

make_entry(ID("1cb24e"),
    Formula(Equal(ModularJ(Div(1,2)*(1+Sqrt(163)*ConstI)), -Pow(640320,3))))

make_entry(ID("cedcfc"),
    Formula(Equal(ModularJ(tau), 32 * (JacobiTheta(2,0,tau)**8 + JacobiTheta(3,0,tau)**8 + JacobiTheta(4,0,tau)**8)**3 /
        (JacobiTheta(2,0,tau) * JacobiTheta(3,0,tau) * JacobiTheta(4,0,tau))**8)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("664b4c"),
    Formula(Equal(ModularJ(tau), ((DedekindEta(tau)/DedekindEta(2*tau))**8 + Pow(2,8) * (DedekindEta(2*tau)/DedekindEta(tau))**16)**3)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("dc8251"),
    Formula(Equal(ModularJ(tau), EisensteinE(4,tau)**3 / DedekindEta(tau)**24)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("f0f53b"),
    Formula(Equal(ComplexDerivative(ModularJ(tau), For(tau, tau)), -(2*Pi*ConstI) * (EisensteinE(14,tau) / DedekindEta(tau)**24))),
    Variables(tau),
    Assumptions(And(Element(tau, HH))))

make_entry(ID("348b26"),
    Formula(Equal(ComplexDerivative(ModularJ(tau), For(tau, tau)), -(2*Pi*ConstI) * (EisensteinE(6,tau) / EisensteinE(4,tau)) * ModularJ(tau))),
    Variables(tau),
    Assumptions(And(Element(tau, HH), NotEqual(EisensteinE(4,tau), 0))))

make_entry(ID("27f9d2"),
    Formula(IsHolomorphic(ModularJ(tau), ForElement(tau, HH))))

make_entry(ID("ea3e3c"),
    Formula(Equal(Zeros(ModularJ(tau), ForElement(tau, ModularGroupFundamentalDomain)), Set(Exp(2*Pi*ConstI/3)))))

make_entry(ID("1b2d8a"),
    Formula(Equal(Zeros(ModularJ(tau), ForElement(tau, HH)), Set(ModularGroupAction(gamma, Exp(2*Pi*ConstI/3)), ForElement(gamma, PSL2Z)))))

make_entry(ID("dcc8b1"),
    Formula(Equal(Set(ModularJ(tau), ForElement(tau, ModularGroupFundamentalDomain)), CC)))

make_entry(ID("441301"),
    Formula(Equal(Cardinality(Solutions(Brackets(Equal(ModularJ(tau), z)), ForElement(tau, ModularGroupFundamentalDomain))), 1)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("36eb82"),
    SymbolDefinition(PrimitiveReducedPositiveIntegralBinaryQuadraticForms,
        PrimitiveReducedPositiveIntegralBinaryQuadraticForms(D), "Primitive reduced positive integral binary quadratic forms"))

make_entry(ID("0b4d4b"),
    Formula(Equal(PrimitiveReducedPositiveIntegralBinaryQuadraticForms(D),
        Set(Tuple(a,b,c), For(Tuple(a,b,c)), And(Element(a, ZZGreaterEqual(1)), Element(b, ZZ), Element(c, ZZ),
            Equal(b**2 - 4*a*c, D),
            LessEqual(Abs(b), a, c), Parentheses(Implies(Or(Equal(Abs(b), a), Equal(a, c)), GreaterEqual(b, 0))),
            Equal(GCD(a,b,c), 1))))),
    Variables(D),
    Assumptions(And(Element(D, ZZLessEqual(-3)), Element(Mod(-D, 4), Set(0,3)))),
    References("H. Cohen, A Course in Computational Algebraic Number Theory, Springer, 1993, Definition 5.3.2"))

make_entry(ID("fd72e0"),
    SymbolDefinition(HilbertClassPolynomial,
        HilbertClassPolynomial(D, x), "Hilbert class polynomial"))

make_entry(ID("dd5681"),
    Formula(Equal(HilbertClassPolynomial(D, x),
        Product(Parentheses(x - ModularJ((-b+Sqrt(D))/(2*a))), ForElement(Tuple(a,b,c),
            PrimitiveReducedPositiveIntegralBinaryQuadraticForms(D))))),
    Variables(D, x),
    Assumptions(And(Element(D, ZZLessEqual(-3)), Element(Mod(-D, 4), Set(0,3)), Element(x, CC))))

make_entry(ID("20b6d2"),
    Description("Table of", HilbertClassPolynomial(D,x), "for", LessEqual(-D, 68)),
    Table(TableRelation(Tuple(D, p), Equal(HilbertClassPolynomial(D,x), p)),
      TableHeadings(D, HilbertClassPolynomial(D,x)), TableSplit(1),
      List(
    Tuple(-3, x),
    Tuple(-4, x - 1728),
    Tuple(-7, x + 3375),
    Tuple(-8, x - 8000),
    Tuple(-11, x + 32768),
    Tuple(-12, x - 54000),
    Tuple(-15, x**2 + 191025*x - 121287375),
    Tuple(-16, x - 287496),
    Tuple(-19, x + 884736),
    Tuple(-20, x**2 - 1264000*x - 681472000),
    Tuple(-23, x**3 + 3491750*x**2 - 5151296875*x + 12771880859375),
    Tuple(-24, x**2 - 4834944*x + 14670139392),
    Tuple(-27, x + 12288000),
    Tuple(-28, x - 16581375),
    Tuple(-31, x**3 + 39491307*x**2 - 58682638134*x + 1566028350940383),
    Tuple(-32, x**2 - 52250000*x + 12167000000),
    Tuple(-35, x**2 + 117964800*x - 134217728000),
    Tuple(-36, x**2 - 153542016*x - 1790957481984),
    Tuple(-39, x**4 + 331531596*x**3 - 429878960946*x**2 + 109873509788637459*x + 20919104368024767633),
    Tuple(-40, x**2 - 425692800*x + 9103145472000),
    Tuple(-43, x + 884736000),
    Tuple(-44, x**3 - 1122662608*x**2 + 270413882112*x - 653249011576832),
    Tuple(-47, x**5 + 2257834125*x**4 - 9987963828125*x**3 + 5115161850595703125*x**2 - 14982472850828613281250*x + 16042929600623870849609375),
    Tuple(-48, x**2 - 2835810000*x + 6549518250000),
    Tuple(-51, x**2 + 5541101568*x + 6262062317568),
    Tuple(-52, x**2 - 6896880000*x - 567663552000000),
    Tuple(-55, x**4 + 13136684625*x**3 - 20948398473375*x**2 + 172576736359017890625*x - 18577989025032784359375),
    Tuple(-56, x**4 - 16220384512*x**3 + 2059647197077504*x**2 + 2257767342088912896*x + 10064086044321563803648),
    Tuple(-59, x**3 + 30197678080*x**2 - 140811576541184*x + 374643194001883136),
    Tuple(-60, x**2 - 37018076625*x + 153173312762625),
    Tuple(-63, x**4 + 67515199875*x**3 - 193068841781250*x**2 + 4558451243295023437500*x - 6256903954262253662109375),
    Tuple(-64, x**2 - 82226316240*x - 7367066619912),
    Tuple(-67, x + 147197952000),
    Tuple(-68, x**4 - 178211040000*x**3 - 75843692160000000*x**2 - 318507038720000000000*x - 2089297506304000000000000))),
    Variables(x),
    Assumptions(Element(x, CC)))

def_Topic(
    Title("Modular lambda function"),
    Section("Definitions"),
    Entries(
        "f53771",
        "6c6204",
    ),
    Section("Illustrations"),
    Entries(
        "f0981b",
        "fc6cf6",
    ),
    Section("Domain"),
    Entries(
        "813d25",
        "c7f85b",
        "ad5aff",
        "55ee4a",
    ),
    Section("Modular transformations"),
    Subsection("Level 2 principal subgroup"),
    Entries(
        "6678af",
        "ec5a44",
        "21839d",
    ),
    Subsection("Arbitrary modular transformations"),
    Entries(
        "73427b",
        "bbfb6c",
        "07bf27",
        "e9f0c8",
        "2ba627",
        "3a7a0b",
        "099301",
    ),
    Subsection("Fundamental domain"),
    Entries(
        "737f2b",
        "b23575",
    ),
    Section("Theta function representations"),
    Entries(
        "5b9c02",
        "903962",
        "04d3a6",
    ),
    Section("Dedekind eta function representations"),
    Entries(
        "5dd24a",
        "033d39",
    ),
    Section("Elliptic function representations"),
    Entries(
        "166402",
    ),
    Section("Fourier series (q-series)"),
    Entries(
        "921f34",
        "e96684",
        "ac236f",
    ),
    Section("Range"),
    Entries(
        "90b419",
        "4b20ab",
        "e4315f",
        "830dd4",
    ),
    Section("Specific values"),
    Entries(
        "a35b3c",
        "fe2627",
        "078869",
        "ea56d1",
        "b0e1cb",
        "4877f2",
        "35c85f",
    ),
    Subsection("Limiting values"),
    Entries(
        "e8252c",
        "231141",
    ),
    Section("Inverse and transcendental equations"),
    Entries(
        "b7174d",
        "5d550c",
    ),
    Section("Connection to the j-invariant"),
    Entries(
        "44a529",
    ),
    Section("Derivatives"),
    Entries(
        "27b2c7",
        "c18c95",
        "38b4f3",
    ),
)

make_entry(ID("f53771"),
    SymbolDefinition(ModularLambda, ModularLambda(tau), "Modular lambda function"),
    Description("The modular lambda function", ModularLambda(tau), "is a function of one variable", tau, "in the upper half-plane."),
    CodeExample(ModularLambda(tau), "represents the modular lambda function evaluated at", tau, "."))

make_entry(ID("6c6204"),
    SymbolDefinition(ModularLambdaFundamentalDomain, ModularLambdaFundamentalDomain, "Fundamental domain of the modular lambda function"),
    Description("This subset of the upper half-planed is defined by ", EntryReference("737f2b"), "."))

make_entry(ID("f0981b"),
    Image(Description("X-ray of", ModularLambda(tau), "on", Element(tau, ClosedInterval(-Div(3,2),Div(3,2)) + ClosedInterval(0,2)*ConstI), "with", ModularLambdaFundamentalDomain, "highlighted"),
        ImageSource("xray_modular_lambda")),
    description_xray)

make_entry(ID("fc6cf6"),
    Image(Description("Plot of", ModularLambda(ConstI*x), "on", Element(x, ClosedInterval(0,4))),
        ImageSource("plot_modular_lambda")))

make_entry(ID("813d25"),
    Formula(Implies(Element(tau, HH), Element(ModularLambda(tau), SetMinus(CC, Set(0, 1))))),
    Variables(tau))

make_entry(ID("c7f85b"),
    Formula(Implies(Element(tau, Set(ConstI*Infinity)), Element(ModularLambda(tau), Set(0)))),
    Variables(tau))

make_entry(ID("ad5aff"),
    Formula(Implies(Element(tau, Set(2*n, ForElement(n, ZZ))), Element(ModularLambda(tau), Set(1)))),
    Variables(tau))

make_entry(ID("55ee4a"),
    Formula(IsHolomorphic(ModularLambda(tau), ForElement(tau, Union(HH, Set(ConstI*Infinity))))))

make_entry(ID("6678af"),
    Formula(Equal(ModularLambda(tau+2), ModularLambda(tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("ec5a44"),
    Formula(Equal(ModularLambda(tau/(2*tau+1)), ModularLambda(tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("21839d"),
    Formula(Equal(ModularLambda((a*tau+b)/(c*tau+d)), ModularLambda(tau))),
    Variables(tau, a, b, c, d),
    Assumptions(And(Element(tau, HH), Element(Matrix2x2(a,b,c,d), SL2Z), CongruentMod(Matrix2x2(a,b,c,d), Matrix2x2(1,0,0,1), 2))))

lam = ModularLambda(tau)

make_entry(ID("73427b"),
    Formula(Element(ModularLambda((a*tau+b)/(c*tau+d)), Set(lam, 1-lam, 1/lam, 1/(1-lam), (lam-1)/lam, lam/(lam-1)))),
    Variables(tau, a, b, c, d),
    Assumptions(And(Element(tau, HH), Element(Matrix2x2(a,b,c,d), SL2Z))))

make_entry(ID("bbfb6c"),
    Formula(Equal(ModularLambda(tau+1), lam/(lam-1))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("07bf27"),
    Formula(Equal(ModularLambda(-(1/tau)), 1-lam)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("e9f0c8"),
    Formula(Equal(ModularLambda(tau/(1-tau)), 1/lam)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("2ba627"),
    Formula(Equal(ModularLambda(1/(1-tau)), 1/(1-lam))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("3a7a0b"),
    Formula(Equal(ModularLambda((tau-1)/tau), (lam-1)/lam)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("099301"),
    Formula(Equal(ModularLambda((a*tau+b)/(c*tau+d)),
        Cases(
            Tuple(lam, CongruentMod(Tuple(a,b,c,d), Tuple(1,0,0,1), 2)),
            Tuple(1-lam, CongruentMod(Tuple(a,b,c,d), Tuple(0,1,1,0), 2)),
            Tuple(1/lam, CongruentMod(Tuple(a,b,c,d), Tuple(1,0,1,1), 2)),
            Tuple(1/(1-lam), CongruentMod(Tuple(a,b,c,d), Tuple(0,1,1,1), 2)),
            Tuple((lam-1)/lam, CongruentMod(Tuple(a,b,c,d), Tuple(1,1,1,0), 2)),
            Tuple(lam/(lam-1), CongruentMod(Tuple(a,b,c,d), Tuple(1,1,0,1), 2))))),
    Variables(tau, a, b, c, d),
    Assumptions(And(Element(tau, HH), Element(Matrix2x2(a,b,c,d), SL2Z))))

make_entry(ID("737f2b"),
    Formula(Equal(ModularLambdaFundamentalDomain, Set(tau, For(tau), And(Element(tau, HH),
        Or(And(Element(Re(tau), OpenInterval(-1,1)),
            Greater(Min(Abs(tau-Div(1,2)), Abs(z+Div(1,2))), Div(1,2))),
            Equal(Re(tau), -1),
            Equal(Abs(tau+Div(1,2)), Div(1,2))))))),
    References("J. M. Borwein and P. B. Borwein. Pi and the AGM. Wiley, New York, 1987. p. 113."))

make_entry(ID("b23575"),
    Formula(Equal(HH, Set(ModularGroupAction(gamma, tau), For(Tuple(tau, gamma)),
        And(Element(tau, ModularLambdaFundamentalDomain),
            Element(gamma, SL2Z),
            CongruentMod(gamma, Matrix2x2(1,0,0,1), 2))))))

make_entry(ID("5b9c02"),
    Formula(Equal(ModularLambda(tau), JacobiTheta(2,0,tau)**4 / JacobiTheta(3,0,tau)**4)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("903962"),
    Formula(Equal(lam/(lam-1), -(JacobiTheta(2,0,tau)**4 / JacobiTheta(4,0,tau)**4))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("04d3a6"),
    Formula(Equal(1-lam, JacobiTheta(4,0,tau)**4 / JacobiTheta(3,0,tau)**4)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("5dd24a"),
    Formula(Equal(ModularLambda(tau), 16 * (DedekindEta(tau/2)**8 * DedekindEta(2*tau)**16 / DedekindEta(tau)**24))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("033d39"),
    Formula(Equal(1/ModularLambda(tau), Div(1,16) * (DedekindEta(tau/2)**8 / (DedekindEta(2*tau)**8)) + 1)),
    Variables(tau),
    Assumptions(Element(tau, HH)))

_e1 = WeierstrassP(Div(1,2), tau)

_e2 = WeierstrassP(Div(tau,2), tau)

_e3 = WeierstrassP(Div(1,2)*(1+tau), tau)

make_entry(ID("166402"),
    Formula(Equal(ModularLambda(tau), (_e3 - _e2) / (_e1 - _e2))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("921f34"),
    Formula(EqualQSeriesEllipsis(ModularLambda(tau), tau, q, 16*q - 128*q**2 + 704*q**3 - 3072*q**4 + 11488*q**5 - 38400*q**6, Equal(q, Exp(Pi*ConstI*tau)))),
    Variables(tau),
    Assumptions(Element(tau, HH)),
    References("https://oeis.org/A115977"))

make_entry(ID("e96684"),
    Formula(Equal(ModularLambda(tau), Where(16*q*Product(((1+q**(2*k))/(1+q**(2*k-1)))**8, For(k, 1, Infinity)), Equal(q, Exp(Pi*ConstI*tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("ac236f"),
    Formula(Where(AsymptoticTo(a(n), (-1)**(n+1) * (Exp(2*Pi*Sqrt(n)) / (32 * n**Div(3,4))),
        n, Infinity), Equal(a(n), QSeriesCoefficient(ModularLambda(tau), tau, q, n, Equal(q, Exp(Pi*ConstI*tau)))))),
    References("https://oeis.org/A115977"))

make_entry(ID("90b419"),
    Formula(Equal(Set(ModularLambda(tau), ForElement(tau, HH)),
        Set(ModularLambda(tau), ForElement(tau, ModularLambdaFundamentalDomain)), SetMinus(CC, Set(0, 1)))))

make_entry(ID("4b20ab"),
    Formula(Equal(Set(ModularLambda(tau), ForElement(tau, HH), Equal(Re(tau), -1)), OpenInterval(-Infinity, 0))),
    Description("This mapping is one-to-one."),
    References("J. M. Borwein and P. B. Borwein. Pi and the AGM. Wiley, New York, 1987. p. 118."))

make_entry(ID("e4315f"),
    Formula(Equal(Set(ModularLambda(tau), ForElement(tau, HH), Equal(Abs(tau+Div(1,2)), Div(1,2))), OpenInterval(1, Infinity))),
    Description("This mapping is one-to-one."),
    References("J. M. Borwein and P. B. Borwein. Pi and the AGM. Wiley, New York, 1987. p. 118."))

make_entry(ID("830dd4"),
    Formula(Equal(Set(ModularLambda(tau), ForElement(tau, Interior(ModularLambdaFundamentalDomain))),
        SetMinus(CC, Parentheses(Union(OpenClosedInterval(-Infinity, 0), ClosedOpenInterval(1, Infinity)))))),
    Description("This mapping is one-to-one."),
    References("J. M. Borwein and P. B. Borwein. Pi and the AGM. Wiley, New York, 1987. p. 118."))

make_entry(ID("a35b3c"),
    Formula(Equal(ModularLambda(ConstI), Div(1,2))))

make_entry(ID("fe2627"),
    Formula(Equal(ModularLambda(1+ConstI), -1)))

make_entry(ID("078869"),
    Formula(Equal(ModularLambda((1+ConstI)/2), 2)))

make_entry(ID("ea56d1"),
    Formula(Element(ModularLambda((a*ConstI+b)/(c*ConstI+d)), Set(-1, Div(1,2), 2))),
    Variables(a, b, c, d),
    Assumptions(Element(Matrix2x2(a,b,c,d), SL2Z)))

make_entry(ID("b0e1cb"),
    Formula(Where(Equal(ModularLambda(omega), -omega), Equal(omega, Exp(2*Pi*ConstI/3)))))

make_entry(ID("4877f2"),
    Formula(Equal(ModularLambda(ConstI/2), 12*Sqrt(2)-16)))

make_entry(ID("35c85f"),
    Formula(Equal(ModularLambda(2*ConstI), 17 - 12*Sqrt(2))))

make_entry(ID("e8252c"),
    Formula(Equal(ModularLambda(ConstI*Infinity), ComplexLimit(ModularLambda(tau), For(tau, ConstI*Infinity)), 0)))

make_entry(ID("231141"),
    Formula(Equal(RightLimit(ModularLambda(n+ConstI*epsilon), For(epsilon, 0)), Cases(Tuple(1, Even(n)), Tuple(-Infinity, Odd(n))))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("b7174d"),
    Formula(Equal(tau, ConstI * (EllipticK(1-ModularLambda(tau))/EllipticK(ModularLambda(tau))))),
    Variables(tau),
    Assumptions(Element(tau, Union(Interior(ModularLambdaFundamentalDomain), Set(tau, For(tau), And(Element(tau, HH), Equal(Re(tau), 1)))))))

tau1 = Subscript(tau,1)

make_entry(ID("5d550c"),
    Formula(Equal(tau, ConstI * (EllipticK(1-ModularLambda(tau))/EllipticK(ModularLambda(tau))) + 2 * Ceil(Div(1,2)*Re(tau) - Div(1,2)))),
    Variables(tau),
    Assumptions(Element(tau, Set(tau1+n, For(Tuple(tau1, n)), And(Element(tau1, Interior(ModularLambdaFundamentalDomain)), Element(n, ZZ))))))

make_entry(ID("44a529"),
    Formula(Equal(ModularJ(tau), 256 * ((1-ModularLambda(tau)+ModularLambda(tau)**2)**3 / (ModularLambda(tau)**2 * (1 - ModularLambda(tau))**2)))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("27b2c7"),
    Formula(Equal(ComplexDerivative(ModularLambda(tau), For(tau, tau)),
        ((Pi*ConstI)/3) * (EisensteinE(2,tau/2) + 8*EisensteinE(2,2*tau) - 6*EisensteinE(2,tau)) * ModularLambda(tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("c18c95"),
    Formula(Equal(ComplexDerivative(ModularLambda(tau), For(tau, tau)),
        ((2*ConstI)/Pi) * (WeierstrassZeta(Div(1,2),tau/2) + 8*WeierstrassZeta(Div(1,2),2*tau) - 6*WeierstrassZeta(Div(1,2),tau)) * ModularLambda(tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("38b4f3"),
    Formula(Equal(ComplexDerivative(ModularLambda(tau), For(tau, tau)),
        -((4*ConstI)/Pi) * EllipticK(ModularLambda(tau))**2 * (ModularLambda(tau)-1) * ModularLambda(tau))),
    Variables(tau),
    Assumptions(Element(tau, Set(tau1+n, For(Tuple(tau1, n)), And(Element(tau1, Interior(ModularLambdaFundamentalDomain)), Element(n, ZZ))))),
    References("http://functions.wolfram.com/EllipticFunctions/ModularLambda/20/01/0001/ Note: because of the branch cut of the elliptic integral, only valid on part of the domain."))

def_Topic(
    Title("Modular transformations"),
    Entries(
        "094772",
        "1e211d",
        "76de9d",
        "dc2c26",
    ),
    Section("Basic formulas"),
    Entries(
        "d7962e",           "c84f3f",           "80279d",           "127a52",           "5636db",
    ),
    Section("Fundamental domain"),
    Entries(
        "a637cd",           "1d1028",           "21b67f",           "e28209",
        "fd53ab",       ),
    Section("Ford circles"),
    Subsection("Area of Ford circles on the unit square"),
    Entries(
        "8a9884",
    ),
)

make_entry(ID("094772"),
    SymbolDefinition(SL2Z, SL2Z, "Modular group"),
    Description("Whether", SL2Z, "or", PSL2Z,
        "should be called \"the modular group\" is an arbitrary convention. Here we allow any element of",
        SL2Z, "to represent an element of the modular group, but we use", PSL2Z, "when uniqueness is desired."))

make_entry(ID("1e211d"),
    SymbolDefinition(PSL2Z, PSL2Z, "Modular group (canonical representatives)"))

make_entry(ID("76de9d"),
    SymbolDefinition(ModularGroupAction, ModularGroupAction(gamma, tau), "Action of modular group"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(And(Element(gamma, SL2Z), Element(tau, HH)), Element(ModularGroupAction(gamma, tau), HH)),
      )))

make_entry(ID("dc2c26"),
    SymbolDefinition(ModularGroupFundamentalDomain, ModularGroupFundamentalDomain, "Fundamental domain for action of the modular group"))

make_entry(ID("c84f3f"),
    Formula(Equal(SL2Z, Set(Matrix2x2(a, b, c, d), For(Tuple(a, b, c, d)), And(Element(a,ZZ), Element(b,ZZ), Element(c,ZZ), Element(d,ZZ), Equal(a*d-b*c, 1))))))

make_entry(ID("80279d"),
    Formula(Equal(PSL2Z, Set(Matrix2x2(a, b, c, d), For(Tuple(a, b, c, d)), And(Element(Matrix2x2(a, b, c, d), SL2Z), Or(Greater(c, 0), And(Equal(c, 0), Greater(d, 0))))))))

make_entry(ID("127a52"),
    Formula(Equal(ModularGroupAction(Matrix2x2(a, b, c, d), tau), (a * tau + b) / (c * tau + d))),
    Assumptions(And(Element(Matrix2x2(a, b, c, d), SL2Z), Element(tau, HH))))

make_entry(ID("5636db"),
    Formula(Equal(ModularGroupAction(Parentheses(Mul(gamma, eta)), tau), ModularGroupAction(gamma, Parentheses(ModularGroupAction(eta, tau))))),
    Variables(gamma, eta, tau),
    Assumptions(And(Element(gamma, SL2Z), Element(eta, SL2Z), Element(tau, HH))))

make_entry(ID("a637cd"),
    Formula(Equal(ModularGroupFundamentalDomain, Set(tau, For(tau), And(Element(tau, HH),
        Element(Re(tau), ClosedOpenInterval(-Div(1,2), Div(1,2))),
            Or(Greater(Abs(tau), 1), And(Equal(Abs(tau), 1), LessEqual(Re(tau), 0))))))),
    Description("The choice to include the left or right boundary is arbitrary; the present definition follows Cohen and simplifies the treatment of reduced binary quadratic forms."),
    References("H. Cohen, A Course in Computational Algebraic Number Theory, Springer, 1993"))

make_entry(ID("1d1028"),
    Formula(Element(ConstI, ModularGroupFundamentalDomain)))

make_entry(ID("21b67f"),
    Formula(EqualAndElement(Exp(2*Pi*ConstI/3), (-1+Sqrt(3)*ConstI)/2, ModularGroupFundamentalDomain)),
    Description("Corner of the fundamental domain."))

make_entry(ID("e28209"),
    Formula(Less(Abs(Exp(2*Pi*ConstI*tau)), Decimal("0.004334"))),       Variables(tau),
    Assumptions(Element(tau, ModularGroupFundamentalDomain)))

make_entry(ID("fd53ab"),
    Formula(Equal(Set(ModularGroupAction(gamma, tau), For(Tuple(gamma, tau)), And(Element(tau, ModularGroupFundamentalDomain), Element(gamma, PSL2Z))), HH)))

make_entry(ID("8a9884"),
    Formula(Equal((Pi/4) * Sum(Totient(q) / q**4, For(q, 1, Infinity)), (Pi/4) * (RiemannZeta(3)/RiemannZeta(4)), 45 * RiemannZeta(3) / (2 * Pi**3))))

def_Topic(
    Title("Multiple zeta values"),
    Section("Definitions"),
    Entries(
        "aab550",
    ),
    Section("Sum representations"),
    Entries(
        "94a39f",
    ),
    Section("Specific values"),
    Entries(
        "345c26",
        "62de01",
        "a5e52e",
        "ef2c71",
        "856317",
        "3a5167",
    ),
    Section("Families of closed forms"),
    Entries(
        "ef8b17",
        "4a23c7",
    ),
    Section("Relations"),
    Entries(
        "da71d3",
        "70c42b",
    ),
)

make_entry(ID("aab550"),
    SymbolDefinition(MultiZetaValue, MultiZetaValue(Subscript(s, 1), Ellipsis, Subscript(s, k)), "Multiple zeta value (MZV)"),
    References("https://www.usna.edu/Users/math/meh/biblio.html"))

make_entry(ID("94a39f"),
    Formula(Equal(MultiZetaValue(Step(Subscript(s, i), For(i, 1, k))),
        Sum(Product(1/Subscript(n,i)**Subscript(s,i), For(i, 1, k)), ForElement(n, Pow(ZZ, k)), Greater(Step(Subscript(n, i), For(i, 1, k)), 0)))),
    Variables(k, s),
    Assumptions(And(Element(k, ZZGreaterEqual(1)), Element(s, Pow(ZZGreaterEqual(1), k)), Greater(Sum(Subscript(s, i), For(i, 1, k)), k))))

make_entry(ID("345c26"),
    Formula(Equal(MultiZetaValue(2, 1), Sum(HarmonicNumber(n)/(n+1)**2, For(n, 1, Infinity)), RiemannZeta(3))))

make_entry(ID("62de01"),
    Formula(Equal(MultiZetaValue(2, 2), Div(3,4)*RiemannZeta(4))))

make_entry(ID("a5e52e"),
    Formula(Equal(MultiZetaValue(3, 2), 3*RiemannZeta(2)*RiemannZeta(3) - Div(11,2)*RiemannZeta(5))))

make_entry(ID("ef2c71"),
    Formula(Equal(MultiZetaValue(4, 2), RiemannZeta(3)**2 - Div(4,3)*RiemannZeta(6))))

make_entry(ID("856317"),
    Formula(Equal(MultiZetaValue(2, 3), Div(9,2)*RiemannZeta(5) - 2*RiemannZeta(2)*RiemannZeta(3))))

make_entry(ID("3a5167"),
    Formula(Equal(MultiZetaValue(3, 3), Div(1,2)*(RiemannZeta(3)**2 - RiemannZeta(6)))))

make_entry(ID("ef8b17"),
    Formula(Equal(MultiZetaValue(s, s), Div(1,2)*(RiemannZeta(s)**2 - RiemannZeta(2*s)))),
    Variables(s),
    Assumptions(Element(s, ZZGreaterEqual(2))))

make_entry(ID("4a23c7"),
    Formula(Equal(MultiZetaValue(Repeat(2, n)), Pi**(2*n) / Factorial(2*n+1))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("da71d3"),
    Formula(Equal(MultiZetaValue(a, b) + MultiZetaValue(b, a), RiemannZeta(a)*RiemannZeta(b) - RiemannZeta(a+b))),
    Variables(a, b),
    Assumptions(And(Element(a, ZZGreaterEqual(2)), Element(b, ZZGreaterEqual(2)))))

make_entry(ID("70c42b"),
    Formula(Equal(MultiZetaValue(Repeat(3, 1, n)), 1/(2*n+1) * MultiZetaValue(Repeat(2, 2*n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

def_Topic(
    Title("Numbers and infinities"),
    Section("Numbers"),
    Subsection("Standard number domains"),
    Entries(
        "298e9e",
        "7be5dc",
        "bfe358",
        "0deea6",
        "4fd123",
    ),
    Subsection("Rational numbers"),
    Entries(
        "c01d22",
        "81c491",
        "0c838a",
    ),
    Subsection("Complex numbers"),
    Description("Related topics: ", TopicReference("Imaginary unit"), ", ", TopicReference("Complex plane")),
    Entries(
        "88ad6f",
        "72cef9",
        "a08fb9",
        "77ef0c",      ),
    Subsection("Algebraic numbers"),
    Entries(
        "be9c83",
        "aa6b07",
        "e5a04c",
        "24c179",
        "cd8a07",
        "155575",
    ),
    Section("Infinities"),
    Entries(
        "b738b1",
        "486ab2",
    ),
    Section("Ranges and intervals"),
    Entries(
        "03fbae",
        "2a52af",
        "00b82b",
        "12d5ab",
        "3fe68f",
        "b2162a",
        "ed302a",
    ),
)

make_entry(ID("298e9e"),
    SymbolDefinition(ZZ, ZZ, "Integers"),
    Description("Represents the set of integers."))

make_entry(ID("7be5dc"),
    SymbolDefinition(QQ, QQ, "Rational numbers"),
    Description("Represents the set of rational numbers."))

make_entry(ID("bfe358"),
    SymbolDefinition(RR, RR, "Real numbers"),
    Description("Represents the set of real numbers."))

make_entry(ID("0deea6"),
    SymbolDefinition(CC, CC, "Complex numbers"),
    Description("Represents the set of complex numbers."))

make_entry(ID("c01d22"),
    Formula(Equal(QQ, Set(p/q, For(Tuple(p, q)), And(Element(p, ZZ), Element(q, SetMinus(ZZ, Set(0))))))))

make_entry(ID("81c491"),
    Formula(NotElement(Sqrt(2), QQ)))

make_entry(ID("4fd123"),
    Formula(Subset(ZZ, QQ, RR, CC)))

make_entry(ID("be9c83"),
    SymbolDefinition(AlgebraicNumbers, AlgebraicNumbers, "Algebraic numbers"),
    Description("Represents the set of algebraic numbers."))

make_entry(ID("e5a04c"),
    Formula(Subset(ZZ, QQ, AlgebraicNumbers, CC)))

make_entry(ID("aa6b07"),
    Formula(Equal(AlgebraicNumbers, Set(z, ForElement(z, CC), Parentheses(Exists(Equal(CallIndeterminate(f, XX(1), z), 0), ForElement(f, SetMinus(Polynomials(ZZ, XX(1)), Set(0)))))))))

make_entry(ID("24c179"),
    Formula(Element(Sqrt(2), AlgebraicNumbers)))

make_entry(ID("b738b1"),
    SymbolDefinition(Infinity, Infinity, "Positive infinity"),
    Description("This formal symbol represents a quantity larger than any real number. We define", Equal(+Infinity, Infinity), "."),
    Description("Multiplication of", Infinity, "by a nonzero complex number represents an infinite limit with the given direction in the complex plane.",
        "In particular,", -Infinity, ",", ConstI*Infinity, "and", -ConstI*Infinity, "are frequently used."),
    Description("The set", Union(RR, Set(Infinity, -Infinity)), "is known as the extended real line."))

make_entry(ID("486ab2"),
    SymbolDefinition(UnsignedInfinity, UnsignedInfinity, "Unsigned infinity"),
    Description("This formal symbol represents a quantity with infinite magnitude and undefined sign."),
    Description("It is typically used to represent the value of meromorphic functions at poles."),
    Description("The set", Union(CC, Set(UnsignedInfinity)), "represents the complex Riemann sphere."))

make_entry(ID("03fbae"),
    SymbolDefinition(ZZGreaterEqual, ZZGreaterEqual(n), "Integers greater than or equal to n"))

make_entry(ID("2a52af"),
    SymbolDefinition(ZZLessEqual, ZZLessEqual(n), "Integers less than or equal to n"),
    Description("This symbol may be rendered differently when", n, "is a concrete value, for example: ", ZZLessEqual(-3)))

make_entry(ID("00b82b"),
    SymbolDefinition(Range, Range(a, b), "Integers between given endpoints"),
    CodeExample(Range(a, b), "Given", Element(a, ZZ), "and", Element(b, ZZ), ", represents", Set(n, ForElement(n, ZZ), LessEqual(a, n, b)), "."),
    CodeExample(Range(a, b), "Given", Element(a, ZZ), "and", Element(b, ZZ), ", is equivalent to", SourceForm(Set(n, For(n, a, b))), "."),
    CodeExample(Range(3, 3), "Represents the singleton set", Set(3), ".", " Note: potentially confusing rendering."),
    CodeExample(Range(3, 2), "Represents the empty set.", " Note: potentially confusing rendering."))

make_entry(ID("12d5ab"),
    SymbolDefinition(ClosedInterval, ClosedInterval(a, b), "Closed interval"),
    CodeExample(ClosedInterval(a, b), "Represents", Set(x, ForElement(x, Union(RR, Set(-Infinity, Infinity))), LessEqual(a, x, b)), "."),
    CodeExample(ClosedInterval(0, 1), "Represents the closed unit interval."),
    CodeExample(ClosedInterval(1, 1), "Represents the singleton set", Set(1), "."),
    CodeExample(ClosedInterval(-Infinity, 0), "Represents half the extended real line (including minus infinity and zero)."),
    CodeExample(ClosedInterval(1, -1), "Represents the empty set.", " Note: potentially confusing rendering."),
    CodeExample(1 + ClosedInterval(0, 1) * ConstI, "Represents a set of points in the complex plane. ",
        SourceForm(ClosedInterval(a, b)), "should only be used with extended real number", a, "and", b,
        "as endpoints, but line segments in the complex plane can be constructed by applying arithmetic operations to a set of real numbers (acting pointwise)."),
    CodeExample(ClosedInterval(1, 4) + ClosedInterval(0, 1) * ConstI, "Represents a rectangle in the complex plane. "))

make_entry(ID("3fe68f"),
    SymbolDefinition(OpenInterval, OpenInterval(a, b), "Open interval"),
    CodeExample(OpenInterval(a, b), "Represents", Set(x, ForElement(x, Union(RR, Set(-Infinity, Infinity))), Less(a, x, b)), "."),
    CodeExample(OpenInterval(0, 1), "Represents the open unit interval."),
    CodeExample(OpenInterval(1, 1), "Represents the empty set."),
    CodeExample(OpenInterval(-Infinity, 0), "Represents half the extended real line (excluding minus infinity and zero)."),
    CodeExample(OpenInterval(1, -1), "Represents the empty set.", " Note: potentially confusing rendering."),
    CodeExample(1 + OpenInterval(0, 1) * ConstI, "Represents a set of points in the complex plane. ",
        SourceForm(OpenInterval(a, b)), "should only be used with extended real number", a, "and", b,
        "as endpoints, but line segments in the complex plane can be constructed by applying arithmetic operations to a set of real numbers (acting pointwise)."),
    CodeExample(OpenInterval(1, 4) + OpenInterval(0, 1) * ConstI, "Represents a rectangle in the complex plane. "))

make_entry(ID("b2162a"),
    SymbolDefinition(ClosedOpenInterval, ClosedOpenInterval(a, b), "Closed-open interval"),
    CodeExample(ClosedOpenInterval(a, b), "Represents", Set(x, ForElement(x, Union(RR, Set(-Infinity, Infinity))), And(LessEqual(a, x), Less(x, b))), "."),
    CodeExample(ClosedOpenInterval(0, 1), "Represents the unit interval (including 0, excluding 1)."),
    CodeExample(ClosedOpenInterval(1, 1), "Represents the empty set."),
    CodeExample(ClosedOpenInterval(-Infinity, 0), "Represents half the extended real line (including minus infinity, excluding zero)."),
    CodeExample(ClosedOpenInterval(1, -1), "Represents the empty set.", " Note: potentially confusing rendering."),
    CodeExample(1 + ClosedOpenInterval(0, 1) * ConstI, "Represents a set of points in the complex plane. ",
        SourceForm(ClosedOpenInterval(a, b)), "should only be used with extended real number", a, "and", b,
        "as endpoints, but line segments in the complex plane can be constructed by applying arithmetic operations to a set of real numbers (acting pointwise)."),
    CodeExample(ClosedOpenInterval(1, 4) + ClosedOpenInterval(0, 1) * ConstI, "Represents a rectangle in the complex plane. "))

make_entry(ID("ed302a"),
    SymbolDefinition(OpenClosedInterval, OpenClosedInterval(a, b), "Open-closed interval"),
    CodeExample(OpenClosedInterval(a, b), "Represents", Set(x, ForElement(x, Union(RR, Set(-Infinity, Infinity))), And(Less(a, x), LessEqual(x, b))), "."),
    CodeExample(OpenClosedInterval(0, 1), "Represents the unit interval (excluding 0, including 1)."),
    CodeExample(OpenClosedInterval(1, 1), "Represents the empty set."),
    CodeExample(OpenClosedInterval(-Infinity, 0), "Represents half the extended real line (excluding minus infinity, including zero)."),
    CodeExample(OpenClosedInterval(1, -1), "Represents the empty set.", " Note: potentially confusing rendering."),
    CodeExample(1 + OpenClosedInterval(0, 1) * ConstI, "Represents a set of points in the complex plane. ",
        SourceForm(OpenClosedInterval(a, b)), "should only be used with extended real number", a, "and", b,
        "as endpoints, but line segments in the complex plane can be constructed by applying arithmetic operations to a set of real numbers (acting pointwise)."),
    CodeExample(OpenClosedInterval(1, 4) + OpenClosedInterval(0, 1) * ConstI, "Represents a rectangle in the complex plane. "))

def_Topic(
    Title("Operators"),
    Section("Sums and products"),
    Entries(
        "044e42",
        "1e2755",
        "9f703a",
        "2a896d",
        "8baf79",
        "5830eb",
    ),
    Section("Solutions and zeros"),
    Entries(
        "f7ce46",
        "d2714b",
        "5862bb",
        "f5ae93",
    ),
    Section("Extreme values"),
    Entries(
        "6ec976",
        "bbeb35",
        "d0cb24",
        "65ccf2",
        "0a3e5a",
        "617fe3",
        "f4fbb8",
        "be4926",
    ),
    Section("Limits"),
    Entries(
        "26ea9f",
        "1d2ee5",
        "6fe5c1",
        "c8a5f0",
        "afd5ca",
        "05a3ee",
        "2be0b5",
        "6cd302",
        "fdf152",
    ),
    Section("Derivatives"),
    Entries(
        "1b6a57",
        "452407",
        "b4b319",
        "96f695",
        "4c6780",
    ),
    Section("Integrals"),
    Entries(
        "c285c7",
    ),
    Section("Indefinite integrals"),
    Entries(
        "2e4fbc",
        "0be77d",
        "fb2790",
    ),
    Section("Holomorphic functions"),
    Entries(
        "499bdf",
        "0895b1",
        "231a99",
        "c54261",
    ),
    Section("Paths and analytic continuation"),
    Entries(
        "4d0e14",
        "bf8f37",
        "457aaa",
    ),
)

make_entry(ID("044e42"),
    SymbolDefinition(Sum, Sum(f(n), For(n)), "Sum"),
    Description(SourceForm(Sum(S)), ", rendered as ", Sum(S), ", gives the sum of the elements of the set", S, ". ",
        "The sum is required to be absolutely convergent."),
    Description(SourceForm(Sum(f(n), For(n, a, b))), ", rendered as ", Sum(f(n), For(n, a, b)), ", gives the sum of", f(n),
        "for integers", n, "from", a, "to", b, ", where", a, "and", b, "should be integers or", -Infinity, "or", Infinity, ". ",
        "If", Less(a, b), ", the sum is empty. The sum", Sum(f(n), For(n, 0, Infinity)), "is interpreted as",
        SequenceLimit(Sum(f(n), For(n, 0, N)), For(N, Infinity)), "and can be conditionally convergent."),
    Description(SourceForm(Sum(f(n), For(n, a, b), P(n))), ", rendered as ", Sum(f(n), For(n, a, b), P(n)), ", is as above but",
        "only terms satisfying the predicate", P(n), "are included."),
    Description(SourceForm(Sum(f(x), ForElement(x, S))), ", rendered as ", Sum(f(x), ForElement(x, S)), ", gives the sum of", f(x),
        "for all", x, "in the set", S, ". The sum is required to be absolutely convergent."),
    Description(SourceForm(Sum(f(x), ForElement(x, S), P(x))), ", rendered as ", Sum(f(x), ForElement(x, S), P(x)), ", gives the sum of", f(x),
        "for all", x, "in the set", S, "and satisfying the predicate", P(x), ". The sum is required to be absolutely convergent."),
    Description(SourceForm(Sum(f(x), For(x), P(x))), ", rendered as ", Sum(f(x), For(x), P(x)), ", gives the sum of", f(x),
        "for all", x, "satisfying the predicate", P(x), ". ",
        "The predicate", P(x), "should define the domain of", x, "unambiguously; that is, it must include a statement such as",
        Element(x, S), "where", S, "is a known set.",
         "The sum is required to be absolutely convergent."),
    Description("The empty sum is", 0, ". The sum can range over an uncountable number of terms, as long as only countably many terms are nonzero."),
    Description("The special expression", SourceForm(For(x)), ", ", SourceForm(For(x, a, b)), " or", SourceForm(ForElement(x)),
        "declares", SourceForm(x), "as a locally bound variable within the scope of the arguments to this operator. ",
        "Similarly", SourceForm(For(Tuple(x, y))), ", ", SourceForm(ForElement(Tuple(x, y), S)), "etc. defines multiple locally bound variables."))

make_entry(ID("1e2755"),
    SymbolDefinition(Product, Product(f(n), For(n)), "Product"),
    Description(SourceForm(Product(S)), ", rendered as ", Product(S), ", gives the product of the elements of the set", S, ". ",
        "The product is required to be absolutely convergent. The empty product is 1."),
    Description(SourceForm(Product(f(n), For(n, a, b))), ", rendered as ", Product(f(n), For(n, a, b)), ", gives the product of", f(n),
        "for integers", n, "from", a, "to", b, ", where", a, "and", b, "should be integers or", -Infinity, "or", Infinity, ". ",
        "If", Less(a, b), ", the product is empty. The product", Product(f(n), For(n, 0, Infinity)), "is interpreted as",
        SequenceLimit(Product(f(n), For(n, 0, N)), Var(N), Infinity), "and can be conditionally convergent."),
    Description(SourceForm(Product(f(n), For(n, a, b), P(n))), ", rendered as ", Product(f(n), For(n, a, b), P(n)), ", is as above but",
        "only terms satisfying the predicate", P(n), "are included."),
    Description(SourceForm(Product(f(x), ForElement(x, S))), ", rendered as ", Product(f(x), ForElement(x, S)), ", gives the product of", f(x),
        "for all", x, "in the set", S, ". The product is required to be absolutely convergent."),
    Description(SourceForm(Product(f(x), ForElement(x, S), P(x))), ", rendered as ", Product(f(x), ForElement(x, S), P(x)), ", gives the product of", f(x),
        "for all", x, "in the set", S, "and satisfying the predicate", P(x), ". The product is required to be absolutely convergent."),
    Description(SourceForm(Product(f(x), For(x), P(x))), ", rendered as ", Product(f(x), For(x), P(x)), ", gives the product of", f(x),
        "for all", x, "satisfying the predicate", P(x), ". ",
        "The predicate", P(x), "should define the domain of", x, "unambiguously; that is, it must include a statement such as",
        Element(x, S), "where", S, "is a known set.",
         "The product is required to be absolutely convergent."),
    Description("The empty product is", 1, ". The product can range over an uncountable number of factors, as long as only countably many factors are nonzero."),
    Description("The special expression", SourceForm(For(x)), ", ", SourceForm(For(x, a, b)), " or", SourceForm(ForElement(x)),
        "declares", SourceForm(x), "as a locally bound variable within the scope of the arguments to this operator. ",
        "Similarly", SourceForm(For(Tuple(x, y))), ", ", SourceForm(ForElement(Tuple(x, y), S)), "etc. defines multiple locally bound variables."))

make_entry(ID("9f703a"),
    SymbolDefinition(PrimeSum, PrimeSum(f(p), For(p)), "Sum over primes"),
    Description(SourceForm(PrimeSum(f(p), For(p))), ", rendered as ",
        PrimeSum(f(p), For(p)), ", represents the sum of", f(p), "taken over all prime numbers", p, "."),
    Description(SourceForm(PrimeSum(f(p), For(p), P(p))), ", rendered as ",
        PrimeSum(f(p), For(p), P(p)), ", represents the sum of", f(p), "taken over all prime numbers", p, "satisfying the predicate", P(p), "."),
    Description("The special expression", SourceForm(For(p)), "defines", SourceForm(p), "as a locally bound variable."),
    Description("The empty sum is equal to zero. Sums taken over an infinite number of terms are required to be absolutely convergent."))

make_entry(ID("2a896d"),
    SymbolDefinition(PrimeProduct, PrimeProduct(f(p), For(p)), "Product over primes"),
    Description(SourceForm(PrimeProduct(f(p), For(p))), ", rendered as ",
        PrimeProduct(f(p), For(p)), ", represents the product of", f(p), "taken over all prime numbers", p, "."),
    Description(SourceForm(PrimeProduct(f(p), For(p), P(p))), ", rendered as ",
        PrimeProduct(f(p), For(p), P(p)), ", represents the product of", f(p), "taken over all prime numbers", p, "satisfying the predicate", P(p), "."),
    Description("The special expression", SourceForm(For(p)), "defines", SourceForm(p), "as a locally bound variable."),
    Description("The empty product is equal to one. Products taken over an infinite number of factors are required to be absolutely convergent."))

make_entry(ID("8baf79"),
    SymbolDefinition(DivisorSum, DivisorSum(f(k), For(k, n)), "Sum over divisors"),
    Description(SourceForm(DivisorSum(f(k), For(k, n))), ", rendered as ",
        DivisorSum(f(k), For(k, n)), ", represents the sum of", f(k), "taken over all positive integers", k, "dividing the integer", n, "."),
    Description(SourceForm(DivisorSum(f(k), For(k, n), P(k))), ", rendered as ",
        DivisorSum(f(k), For(k, n), P(k)), ", represents the sum of", f(k), "taken over all positive integers", k, "dividing the integer", n, "and satisfying the predicate", P(k), "."),
    Description("The special expression", SourceForm(For(k, n)), "defines", SourceForm(k), "as a locally bound variable."),
    Description("The empty sum is equal to zero."))

make_entry(ID("5830eb"),
    SymbolDefinition(DivisorProduct, DivisorProduct(f(k), For(k, n)), "Product over divisors"),
    Description(SourceForm(DivisorProduct(f(k), For(k, n))), ", rendered as ",
        DivisorProduct(f(k), For(k, n)), ", represents the product of", f(k), "taken over all positive integers", k, "dividing the integer", n, "."),
    Description(SourceForm(DivisorProduct(f(k), For(k, n), P(k))), ", rendered as ",
        DivisorProduct(f(k), For(k, n), P(k)), ", represents the product of", f(k), "taken over all positive integers", k, "dividing the integer", n, "and satisfying the predicate", P(k), "."),
    Description("The special expression", SourceForm(For(k, n)), "defines", SourceForm(k), "as a locally bound variable."),
    Description("The empty product is equal to one."))

description_var_xyz = Description("The special expression", SourceForm(For(x)), "or", SourceForm(ForElement(x, S)),
    "declares", SourceForm(x), "as a locally bound variable within the scope of the arguments to this operator. ",
    "If", SourceForm(For(x)), "is used instead of", SourceForm(ForElement(x, S)), ", ",
    "the corresponding predicate", P(x), "must define the domain of", x, "unambiguously; that is, it must include a statement such as",
    Element(x, S), "where", S, "is a known set. Similarly,", SourceForm(For(Tuple(x, y))), ", ", SourceForm(For(Tuple(x, y, z))), ", etc.",
    "defines multiple locally bound variables which must be accompanied by a multivariate predicate", P(x,y), ", ", P(x,y,z), ", etc.")

make_entry(ID("f7ce46"),
    SymbolDefinition(Zeros, Zeros(f(x), ForElement(x, S)), "Zeros (roots) of function"),
    Description(SourceForm(Zeros(f(x), ForElement(x, S))), ", rendered", Zeros(f(x), ForElement(x, S)), ", represents the set of values",
        Element(x, S), "satisfying", Equal(f(x), 0), "."),
    Description(SourceForm(Zeros(f(x), ForElement(x, S), P(x))), ", rendered", Zeros(f(x), ForElement(x, S), P(x)), ", represents the set of values",
        Element(x, S), "satisfying", P(x), "and", Equal(f(x), 0), "."),
    Description(SourceForm(Zeros(f(x), For(x), P(x))), ", rendered", Zeros(f(x), For(x), P(x)), ", represents the set of values",
        x, "satisfying", P(x), "and", Equal(f(x), 0), "."),
    Description(SourceForm(Zeros(f(x,y), For(Tuple(x,y)), P(x,y))), ", rendered", Zeros(f(x,y), For(Tuple(x,y)), P(x,y)), ", represents the set of tuples",
        Tuple(x, y), "satisfying", P(x, y), "and", Equal(f(x,y), 0), ", and similarly for any number", GreaterEqual(n, 2), "of variables."),
    description_var_xyz)

make_entry(ID("d2714b"),
    SymbolDefinition(UniqueZero, UniqueZero(f(x), ForElement(x, S)), "Unique zero (root) of function"),
    Description(SourceForm(UniqueZero(f(x), ForElement(x, S))), ", rendered", UniqueZero(f(x), ForElement(x, S)), ", represents the unique value",
        Element(x, S), "satisfying", Equal(f(x), 0), "."),
    Description("This operation is undefined if such a value does not exist or is not unique."),
    Description(SourceForm(UniqueZero(f(x), ForElement(x, S), P(x))), ", rendered", UniqueZero(f(x), ForElement(x, S), P(x)), ", represents the unique value",
        Element(x, S), "satisfying", P(x), "and", Equal(f(x), 0), "."),
    Description(SourceForm(UniqueZero(f(x), For(x), P(x))), ", rendered", UniqueZero(f(x), For(x), P(x)), ", represents the unique value",
        x, "satisfying", P(x), "and", Equal(f(x), 0), "."),
    Description(SourceForm(UniqueZero(f(x,y), For(Tuple(x,y)), P(x,y))), ", rendered", UniqueZero(f(x,y), For(Tuple(x,y)), P(x,y)), ", represents the unique tuple",
        Tuple(x, y), "such that", P(x, y), "and", Equal(f(x,y), 0), ", and similarly for any number", GreaterEqual(n, 2), "of variables."),
    description_var_xyz)

make_entry(ID("5862bb"),
    SymbolDefinition(Solutions, Solutions(Q(x), ForElement(x, S)), "Solution set"),
    Description(SourceForm(Solutions(Q(x), ForElement(x, S))), ", rendered", Solutions(Q(x), ForElement(x, S)), ", represents the set of values",
        Element(x, S), "satisfying", Q(x), "."),
    Description(SourceForm(Solutions(Q(x), ForElement(x, S), P(x))), ", rendered", Solutions(Q(x), ForElement(x, S), P(x)), ", represents the set of values",
        Element(x, S), "satisfying", P(x), "and", Q(x), "."),
    Description(SourceForm(Solutions(Q(x), For(x), P(x))), ", rendered", Solutions(Q(x), For(x), P(x)), ", represents the set of values",
        x, "satisfying", P(x), "and", Q(x), "."),
    Description(SourceForm(Solutions(Q(x,y), For(Tuple(x,y)), P(x,y))), ", rendered", Solutions(Q(x,y), For(Tuple(x,y)), P(x,y)), ", represents the set of tuples",
        Tuple(x, y), "satisfying", P(x, y), "and", Q(x,y), ", and similarly for any number", GreaterEqual(n, 2), "of variables."),
    description_var_xyz)

make_entry(ID("f5ae93"),
    SymbolDefinition(UniqueSolution, UniqueSolution(Q(x), ForElement(x, S)), "Unique solution"),
    Description(SourceForm(UniqueSolution(Q(x), ForElement(x, S))), ", rendered", UniqueSolution(Q(x), ForElement(x, S)), ", represents the unique value",
        Element(x, S), "satisfying", Q(x), "."),
    Description("This operation is undefined if such a value does not exist or is not unique."),
    Description(SourceForm(UniqueSolution(Q(x), ForElement(x, S), P(x))), ", rendered", UniqueSolution(Q(x), ForElement(x, S), P(x)), ", represents the unique value",
        Element(x, S), "satisfying", P(x), "and", Q(x), "."),
    Description(SourceForm(UniqueSolution(Q(x), For(x), P(x))), ", rendered", UniqueSolution(Q(x), For(x), P(x)), ", represents the unique value",
        x, "satisfying", P(x), "and", Q(x), "."),
    Description(SourceForm(UniqueSolution(Q(x,y), For(Tuple(x,y)), P(x,y))), ", rendered", UniqueSolution(Q(x,y), For(Tuple(x,y)), P(x,y)), ", represents the unique tuple",
        Tuple(x, y), "satisfying", P(x, y), "and", Q(x,y), ", and similarly for any number", GreaterEqual(n, 2), "of variables."),
    description_var_xyz)

make_entry(ID("6ec976"),
    SymbolDefinition(Supremum, Supremum(f(x), ForElement(x, S)), "Supremum of a set or function"),
    Description(SourceForm(Supremum(S)), ", rendered", Supremum(S), ", represents the supremum of the set", S, ".",
        "This operator is only defined if", S, "is a subset of", Union(RR, Set(-Infinity, +Infinity)), ".",
        "The supremum does not need to be an element of", S, "itself; in particular, for an open interval",
        Equal(S, OpenInterval(a,b)), ", we have", Equal(Supremum(S), b), "."),
    Description(SourceForm(Supremum(f(x), ForElement(x, S))), ", rendered", Supremum(f(x), ForElement(x, S)),
        ", represents", Supremum(Set(f(x), ForElement(x, S))), "."),
    Description(SourceForm(Supremum(f(x), ForElement(x, S), P(x))), ", rendered", Supremum(f(x), ForElement(x, S), P(x)),
        ", represents", Supremum(Set(f(x), ForElement(x, S), P(x))), "."),
    Description(SourceForm(Supremum(f(x), For(x), P(x))), ", rendered", Supremum(f(x), For(x), P(x)),
        ", represents", Supremum(Set(f(x), For(x), P(x))), "."),
    Description(SourceForm(Supremum(f(x,y), For(Tuple(x,y)), P(x,y))), ", rendered", Supremum(f(x,y), For(Tuple(x, y)), P(x,y)),
        ", represents", Supremum(Set(f(x,y), For(Tuple(x,y)), P(x,y))), "where", P(x,y), "is a predicate defining the range of", x, "and", y,
        ", and similarly for any number", GreaterEqual(n, 2), "of variables."),
    description_var_xyz)

make_entry(ID("bbeb35"),
    SymbolDefinition(Infimum, Infimum(f(x), ForElement(x, S)), "Infimum of a set or function"),
    Description(SourceForm(Infimum(S)), ", rendered", Infimum(S), ", represents the infimum of the set", S, ".",
        "This operator is only defined if", S, "is a subset of", Union(RR, Set(-Infinity, +Infinity)), ".",
        "The infimum does not need to be an element of", S, "itself; in particular, for an open interval",
        Equal(S, OpenInterval(a,b)), ", we have", Equal(Infimum(S), b), "."),
    Description(SourceForm(Infimum(f(x), ForElement(x, S))), ", rendered", Infimum(f(x), ForElement(x, S)),
        ", represents", Infimum(Set(f(x), ForElement(x, S))), "."),
    Description(SourceForm(Infimum(f(x), ForElement(x, S), P(x))), ", rendered", Infimum(f(x), ForElement(x, S), P(x)),
        ", represents", Infimum(Set(f(x), ForElement(x, S), P(x))), "."),
    Description(SourceForm(Infimum(f(x), For(x), P(x))), ", rendered", Infimum(f(x), For(x), P(x)),
        ", represents", Infimum(Set(f(x), For(x), P(x))), "."),
    Description(SourceForm(Infimum(f(x,y), For(Tuple(x,y)), P(x,y))), ", rendered", Infimum(f(x,y), For(Tuple(x, y)), P(x,y)),
        ", represents", Infimum(Set(f(x,y), For(Tuple(x,y)), P(x,y))), "where", P(x,y), "is a predicate defining the range of", x, "and", y,
        ", and similarly for any number", GreaterEqual(n, 2), "of variables."),
    description_var_xyz)

make_entry(ID("d0cb24"),
    SymbolDefinition(Minimum, Minimum(f(x), ForElement(x, S)), "Minimum value of a set or function"),
    Description(SourceForm(Minimum(S)), ", rendered", Minimum(S), ", represents the minimum element of the set", S, ".",
        "This operator is only defined if", S, "is a subset of", Union(RR, Set(-Infinity, +Infinity)), " and the minimum exists."),
    Description(SourceForm(Minimum(f(x), ForElement(x, S))), ", rendered", Minimum(f(x), ForElement(x, S)),
        ", represents", Minimum(Set(f(x), ForElement(x, S))), "."),
    Description(SourceForm(Minimum(f(x), ForElement(x, S), P(x))), ", rendered", Minimum(f(x), ForElement(x, S), P(x)),
        ", represents", Minimum(Set(f(x), ForElement(x, S), P(x))), "."),
    Description(SourceForm(Minimum(f(x), For(x), P(x))), ", rendered", Minimum(f(x), For(x), P(x)),
        ", represents", Minimum(Set(f(x), For(x), P(x))), "."),
    Description(SourceForm(Minimum(f(x,y), For(Tuple(x,y)), P(x,y))), ", rendered", Minimum(f(x,y), For(Tuple(x, y)), P(x,y)),
        ", represents", Minimum(Set(f(x,y), For(Tuple(x,y)), P(x,y))), "where", P(x,y), "is a predicate defining the range of", x, "and", y,
        ", and similarly for any number", GreaterEqual(n, 2), "of variables."),
    description_var_xyz)

make_entry(ID("65ccf2"),
    SymbolDefinition(Maximum, Maximum(f(x), ForElement(x, S)), "Maximum value of a set or function"),
    Description("Called with 1 argument, ", SourceForm(Maximum(S)), ", rendered", Maximum(S), ", represents the maximum element of the set", S, ".",
        "This operator is only defined if", S, "is a subset of", Union(RR, Set(-Infinity, +Infinity)), " and the maximum exists."),
    Description(SourceForm(Maximum(f(x), ForElement(x, S))), ", rendered", Maximum(f(x), ForElement(x, S)),
        ", represents", Maximum(Set(f(x), ForElement(x, S))), "."),
    Description(SourceForm(Maximum(f(x), ForElement(x, S), P(x))), ", rendered", Maximum(f(x), ForElement(x, S), P(x)),
        ", represents", Maximum(Set(f(x), ForElement(x, S), P(x))), "."),
    Description(SourceForm(Maximum(f(x), For(x), P(x))), ", rendered", Maximum(f(x), For(x), P(x)),
        ", represents", Maximum(Set(f(x), For(x), P(x))), "."),
    Description(SourceForm(Maximum(f(x,y), For(Tuple(x,y)), P(x,y))), ", rendered", Maximum(f(x,y), For(Tuple(x, y)), P(x,y)),
        ", represents", Maximum(Set(f(x,y), For(Tuple(x,y)), P(x,y))), "where", P(x,y), "is a predicate defining the range of", x, "and", y,
        ", and similarly for any number", GreaterEqual(n, 2), "of variables."),
    description_var_xyz)

make_entry(ID("0a3e5a"),
    SymbolDefinition(ArgMin, ArgMin(f(x), ForElement(x, S)), "Locations of minimum value"),
    Description(SourceForm(ArgMin(f(x), ForElement(x, S))), ", rendered", ArgMin(f(x), ForElement(x, S)), ", gives the set of values",
        Element(x, S),
        "such that", Equal(f(x), Minimum(f(s), ForElement(s, S))), "."),
    Description(SourceForm(ArgMin(f(x), ForElement(x, S), P(x))), ", rendered", ArgMin(f(x), ForElement(x, S), P(x)), ", gives the set of values",
        Element(x, S),
        "satisfying", P(x),
        "and such that", Equal(f(x), Minimum(f(s), ForElement(s, S), P(s))), "."),
    Description("If", f(x), "does not attain a minimum value satisfying the conditions, the result is the empty set", Set(), "."),
    Description(SourceForm(ArgMin(f(x,y), For(Tuple(x,y)), P(x,y))), ", rendered", ArgMin(f(x,y), For(Tuple(x,y)), P(x,y)), ", gives the set of tuples",
        Tuple(x, y), "satisfying", P(x,y),
        "such that", Equal(f(x,y), Minimum(f(s,t), For(Tuple(s,t)), P(s,t))),
        ", and similarly for any number", GreaterEqual(n, 2), "of variables."),
    description_var_xyz)

make_entry(ID("617fe3"),
    SymbolDefinition(ArgMax, ArgMax(f(x), ForElement(x, S)), "Locations of maximum value"),
    Description(SourceForm(ArgMax(f(x), ForElement(x, S))), ", rendered", ArgMax(f(x), ForElement(x, S)), ", gives the set of values",
        Element(x, S),
        "such that", Equal(f(x), Maximum(f(s), ForElement(s, S))), "."),
    Description(SourceForm(ArgMax(f(x), ForElement(x, S), P(x))), ", rendered", ArgMax(f(x), ForElement(x, S), P(x)), ", gives the set of values",
        Element(x, S),
        "satisfying", P(x),
        "and such that", Equal(f(x), Maximum(f(s), ForElement(s, S), P(s))), "."),
    Description("If", f(x), "does not attain a maximum value satisfying the conditions, the result is the empty set", Set(), "."),
    Description(SourceForm(ArgMax(f(x,y), For(Tuple(x,y)), P(x,y))), ", rendered", ArgMax(f(x,y), For(Tuple(x,y)), P(x,y)), ", gives the set of tuples",
        Tuple(x, y), "satisfying", P(x,y),
        "such that", Equal(f(x,y), Maximum(f(s,t), For(Tuple(s,t)), P(s,t))),
        ", and similarly for any number", GreaterEqual(n, 2), "of variables."),
    description_var_xyz)

make_entry(ID("f4fbb8"),
    SymbolDefinition(ArgMinUnique, ArgMinUnique(f(x), ForElement(x, S)), "Unique location of minimum value"),
    Description(SourceForm(ArgMinUnique(f(x), ForElement(x, S))), ", rendered", ArgMinUnique(f(x), ForElement(x, S)), ", ",
        "represents the unique value", Element(x, S),
        "such that", Equal(f(x), Minimum(f(s), ForElement(s, S))), ". This operation is only defined if such a unique value exists."),
    Description(SourceForm(ArgMinUnique(f(x), ForElement(x, S), P(x))), ", rendered", ArgMinUnique(f(x), ForElement(x, S), P(x)), ", ",
        "represents the unique value", Element(x, S),
        "satisfying", P(x), "and",
        "such that", Equal(f(x), Minimum(f(s), ForElement(s, S))), ". This operation is only defined if such a unique value exists."),
    Description(SourceForm(ArgMinUnique(f(x,y), For(Tuple(x,y)), P(x,y))), "represents the unique tuple", Tuple(x, y),
        "satisfying", P(x, y),
        "such that", Equal(f(x, y), Minimum(f(s,t), For(Tuple(s,t)), P(s,t))),
        ", and similarly for any number", GreaterEqual(n, 2), "of variables."),
    description_var_xyz)

make_entry(ID("be4926"),
    SymbolDefinition(ArgMaxUnique, ArgMaxUnique(f(x), ForElement(x, S)), "Unique location of maximum value"),
    Description(SourceForm(ArgMaxUnique(f(x), ForElement(x, S))), ", rendered", ArgMaxUnique(f(x), ForElement(x, S)), ", ",
        "represents the unique value", Element(x, S),
        "such that", Equal(f(x), Maximum(f(s), ForElement(s, S))), ". This operation is only defined if such a unique value exists."),
    Description(SourceForm(ArgMaxUnique(f(x), ForElement(x, S), P(x))), ", rendered", ArgMaxUnique(f(x), ForElement(x, S), P(x)), ", ",
        "represents the unique value", Element(x, S),
        "satisfying", P(x), "and",
        "such that", Equal(f(x), Maximum(f(s), ForElement(s, S))), ". This operation is only defined if such a unique value exists."),
    Description(SourceForm(ArgMaxUnique(f(x,y), For(Tuple(x,y)), P(x,y))), "represents the unique tuple", Tuple(x, y),
        "satisfying", P(x, y),
        "such that", Equal(f(x, y), Maximum(f(s,t), For(Tuple(s,t)), P(s,t))),
        ", and similarly for any number", GreaterEqual(n, 2), "of variables."),
    description_var_xyz)

make_entry(ID("26ea9f"),
    SymbolDefinition(Limit, Limit(f(x), For(x, a)), "Limiting value"),
    Description(SourceForm(Limit(f(x), For(x, a), P(x))), "rendered as", Limit(f(x), For(x, a), P(x)), "represents the limiting value of", f(x),
        "for every sequence of", x, "satisfying", P(x), "and approaching the limit point", a, "."),
    Description("If the predicate", P(x), "is omitted, the expression renders correctly to LaTeX, ",
        "but this form should be avoided since it is ambiguous whether it denotes a sequence limit, ",
        "real limit or complex limit (or some other kind of limit). It is better to use",
        SourceForm(SequenceLimit), ",", SourceForm(RealLimit), ",", SourceForm(LeftLimit), ",", SourceForm(RightLimit), "or", SourceForm(ComplexLimit), "."),
    Description("The limit is always a deleted limit. That is, the value of", f(a), "does not need to be equal to the limit and does not even need to be defined."),
    Description("The expression", SourceForm(f(x)), "is not required to be defined for all", x, "satisfying", P(x), ".",
        "It only needs to be defined for all", x, "in some neighborhood of the limit point and also satisfying", P(x), "."),
    Description("The expression", SourceForm(For(x, a)), "declares", SourceForm(x), "as a locally bound variable within the scope of the arguments to this operator."))

make_entry(ID("1d2ee5"),
    SymbolDefinition(SequenceLimit, SequenceLimit(f(n), For(n, a)), "Limiting value of sequence"),
    Description("This operator can be called with three or four arguments."),
    Description(SourceForm(SequenceLimit(f(n), For(n, a))), ", rendered as", SequenceLimit(f(n), For(n, a)), ", is equivalent to", SourceForm(Limit(f(n), For(n, a), Element(n, ZZ))),
        "but renders to LaTeX without displaying the predicate", Element(n, ZZ), " which readers will typically understand from context."),
    Description(SourceForm(SequenceLimit(f(n), For(n, a), P(n))), ", rendered as", SequenceLimit(f(n), For(n, a), P(n)), ", is equivalent to", SourceForm(Limit(f(n), For(n, a), And(Element(n, ZZ), P(n)))), "."),
    Description("The expression", SourceForm(For(x, a)), "declares", SourceForm(x), "as a locally bound variable within the scope of the arguments to this operator."))

make_entry(ID("6fe5c1"),
    SymbolDefinition(RealLimit, RealLimit(f(x), For(x, a)), "Limiting value, real variable"),
    Description("This operator can be called with three or four arguments."),
    Description(SourceForm(RealLimit(f(x), For(x, a))), ", rendered as", RealLimit(f(x), For(x, a)), ", is equivalent to", SourceForm(Limit(f(x), For(x, a), Element(x, RR))),
        "but renders to LaTeX without displaying the predicate", Element(x, RR), " which readers will typically understand from context."),
    Description(SourceForm(RealLimit(f(x), For(x, a), P(x))), ", rendered as", RealLimit(f(x), For(x, a), P(x)), ", is equivalent to", SourceForm(Limit(f(x), For(x, a), And(Element(x, RR), P(x)))), "."),
    Description("The expression", SourceForm(For(x, a)), "declares", SourceForm(x), "as a locally bound variable within the scope of the arguments to this operator."))

make_entry(ID("c8a5f0"),
    SymbolDefinition(LeftLimit, LeftLimit(f(x), For(x, a)), "Limiting value, from the left"),
    Description("This operator can be called with three or four arguments."),
    Description(SourceForm(LeftLimit(f(x), For(x, a))), ", rendered as", LeftLimit(f(x), For(x, a)), ", is equivalent to", SourceForm(Limit(f(x), For(x, a), Element(x, OpenInterval(-Infinity,a)))), "."),
    Description(SourceForm(LeftLimit(f(x), For(x, a), P(x))), ", rendered as", LeftLimit(f(x), For(x, a), P(x)), ", is equivalent to", SourceForm(Limit(f(x), For(x, a), And(Element(x, OpenInterval(-Infinity,a)), P(x)))), "."),
    Description("The expression", SourceForm(For(x, a)), "declares", SourceForm(x), "as a locally bound variable within the scope of the arguments to this operator."))

make_entry(ID("afd5ca"),
    SymbolDefinition(RightLimit, RightLimit(f(x), For(x, a)), "Limiting value, from the right"),
    Description("This operator can be called with three or four arguments."),
    Description(SourceForm(RightLimit(f(x), For(x, a))), ", rendered as", RightLimit(f(x), For(x, a)), ", is equivalent to", SourceForm(Limit(f(x), For(x, a), Element(x, OpenInterval(a,Infinity)))), "."),
    Description(SourceForm(RightLimit(f(x), For(x, a), P(x))), ", rendered as", RightLimit(f(x), For(x, a), P(x)), ", is equivalent to", SourceForm(Limit(f(x), For(x, a), And(Element(x, OpenInterval(a,Infinity)), P(x)))), "."),
    Description("The expression", SourceForm(For(x, a)), "declares", SourceForm(x), "as a locally bound variable within the scope of the arguments to this operator."))

make_entry(ID("05a3ee"),
    SymbolDefinition(ComplexLimit, ComplexLimit(f(z), For(z, a)), "Limiting value, complex variable"),
    Description("This operator can be called with three or four arguments."),
    Description(SourceForm(ComplexLimit(f(z), For(z, a))), ", rendered as", ComplexLimit(f(z), For(z, a)), ", is equivalent to", SourceForm(Limit(f(z), For(z, a), Element(z, CC))),
        "but renders to LaTeX without displaying the predicate", Element(z, CC), " which readers will typically understand from context."),
    Description(SourceForm(ComplexLimit(f(z), For(z, a), P(z))), ", rendered as", ComplexLimit(f(z), For(z, a), P(z)), ", is equivalent to", SourceForm(Limit(f(z), For(z, a), And(Element(z, CC), P(z)))), "."),
    Description("The expression", SourceForm(For(z, a)), "declares", SourceForm(z), "as a locally bound variable within the scope of the arguments to this operator."))

make_entry(ID("2be0b5"),
    SymbolDefinition(MeromorphicLimit, MeromorphicLimit(f(z), For(z, a)), "Limiting value, allowing poles"),
    Description("This operator is equivalent to", SourceForm(ComplexLimit), "except that whereas", SourceForm(ComplexLimit),
        "in general is undefined when", a, "is a pole (because the direction of the resulting infinity depends on the direction of approach),", SourceForm(MeromorphicLimit), "is taken to give", SourceForm(UnsignedInfinity), "(", UnsignedInfinity, ")", "when", a, "is a pole."))

make_entry(ID("6cd302"),
    SymbolDefinition(SequenceLimitInferior, SequenceLimitInferior(f(n), For(n, a)), "Limit inferior of sequence"))

make_entry(ID("fdf152"),
    SymbolDefinition(SequenceLimitSuperior, SequenceLimitSuperior(f(n), For(n, a)), "Limit superior of sequence"))

make_entry(ID("1b6a57"),
    SymbolDefinition(Derivative, Derivative(Call(f, z), For(z, z)), "Derivative"),
    Description(SourceForm(Derivative(f(z), For(z, a))), ", rendered as ",
        Derivative(Call(f, z), For(z, a)), "or", Derivative(f(z), For(z, a)), ", represents the derivative of", f(z), "evaluated at", Equal(z, a), "."),
    Description(SourceForm(Derivative(f(z), For(z, a, n))), ", rendered as ",
        Derivative(Call(f, z), For(z, a, n)), "or", Derivative(f(z), For(z, a, n)), ", represents the order", n, "derivative of", f(z), "evaluated at", Equal(z, a), "."),
    Description("The second argument", z, "defines a locally bound variable for the expression in the first argument. With the evaluation point set to", Equal(a, z), ",", SourceForm(Derivative(f(z), For(z, z))),
        "may render more simply as", Derivative(Call(f, z), For(z, z)), "."),
    Description("This operator is ambiguous since the intended meaning could be a real derivative, a complex derivative, or some other form of derivative.",
        "It is better to use", SourceForm(RealDerivative), ",", SourceForm(ComplexDerivative), ",", SourceForm(ComplexBranchDerivative), ", or", SourceForm(MeromorphicDerivative), "."))

make_entry(ID("452407"),
    SymbolDefinition(RealDerivative, RealDerivative(Call(f, x), For(x, x)), "Real derivative"),
    Description("The call syntax for this operator is the same as for", SourceForm(Derivative), "."),
    Description("The result is defined as", Equal(RealDerivative(f(x), For(x, x)), RealLimit((f(x+h)-f(x))/h, For(h, 0))),
        "where the limit is taken with respect to a real variable", h, "(", SourceForm(RealLimit), ")."),
    Description("Note that", x,
        "can be complex and that the \"real derivative\" can be complex-valued; the \"real\" qualifier just refers to the direction in which the limit is computed."))

make_entry(ID("b4b319"),
    SymbolDefinition(ComplexDerivative, ComplexDerivative(Call(f, z), For(z, z)), "Complex derivative"),
    Description("The call syntax for this operator is the same as for", SourceForm(Derivative), "."),
    Description("The result is defined as", Equal(ComplexDerivative(f(z), For(z, z)), ComplexLimit((f(z+h)-f(z))/h, For(h, 0))),
        "where the limit is taken with respect to a complex variable", h, "(", SourceForm(ComplexLimit), ")."),
    Description("If this limit exists (and is finite), then", f, "is holomorphic at", z, "."))

make_entry(ID("96f695"),
    SymbolDefinition(ComplexBranchDerivative, ComplexBranchDerivative(Call(f, z), For(z, z)), "Complex derivative, allowing branch cuts"),
    Description("The call syntax for this operator is the same as for", SourceForm(Derivative), "."),
    Description("This operator is equivalent to", SourceForm(ComplexDerivative),
        "except that whereas", SourceForm(ComplexDerivative), "is undefined on a branch cut (where the function is not complex differentiable),",
        SourceForm(ComplexBranchDerivative), "gives the complex derivative of the analytically continued function across the branch cut."))

make_entry(ID("4c6780"),
    SymbolDefinition(MeromorphicDerivative, MeromorphicDerivative(Call(f, z), For(z, z)), "Complex derivative, allowing poles"),
    Description("The call syntax for this operator is the same as for", SourceForm(Derivative), "."),
    Description("This operator is equivalent to", SourceForm(ComplexDerivative),
        "except that whereas", SourceForm(ComplexDerivative), "is undefined at a pole,",
        SourceForm(MeromorphicDerivative), "gives",
        SourceForm(UnsignedInfinity), "(", UnsignedInfinity, ")", "at a pole."))

make_entry(ID("c285c7"),
    SymbolDefinition(Integral, Integral(f(x), For(x, a, b)), "Integral"),
    Description(SourceForm(Integral(f(x), For(x, a, b))), ", rendered as ",
        Integral(f(x), For(x, a, b)), ", represents the integral of", f(x), "from", a, "to", b, ". ",
        "The order is significant: ", Equal(Integral(f(x), For(x, a, b)), Neg(Integral(f(x), For(x, b, a)))), "."),
    Description(SourceForm(Integral(f(x), ForElement(x, S))), ", rendered as ",
        Integral(f(x), ForElement(x, S)), ", represents the integral of", f(x), "over the set", S, "."),
    Description("The special expression", SourceForm(For(x, a, b)), "or", SourceForm(ForElement(x, S)), "defines a locally bound variable."),
    Description("The precise class of integrals allowed by this operator is yet to be defined, but should normally encompass Lebesgue integrals."),
    Description("The integrand is allowed to be undefined on a subset of measure of zero."))

make_entry(ID("2e4fbc"),
    SymbolDefinition(IndefiniteIntegralEqual, IndefiniteIntegralEqual(f(x), g(x), x), "Indefinite integral"),
    Description(SourceForm(IndefiniteIntegralEqual(f(x), g(x), x, c)), ", rendered as ",
        IndefiniteIntegralEqual(f(x), g(x), x, c), ", expresses that", g(x), "is an antiderivative of", f(x), "at the point", c,
        ", or formally that", Equal(Derivative(g(x), For(x, c)), f(c)), ".",
        "In other words,", g(x), "belongs to the equivalence class of antiderivatives of", f(x),
        "at the point", c, ". This is rendered as a statement of equality (with an arbitrary constant of integration) to follow the conventional notation for indefinite integrals."),
    Description("This operator is ambiguous since the intended meaning could be a real derivative, a complex derivative, or some other form of derivative.",
        "It is better to use", SourceForm(RealIndefiniteIntegralEqual), "or", SourceForm(ComplexIndefiniteIntegralEqual), "."),
    Description("The argument", SourceForm(x), "defines a locally bound variable used in the expressions", f(x), "and", g(x), ". ",
        "If this operator is called more simply as", SourceForm(IndefiniteIntegralEqual(f(x), g(x), x)), ", ",
            "the meaning is the same as", SourceForm(IndefiniteIntegralEqual(f(x), g(x), x, x)), ", where the", SourceForm(x),
            "appearing in",  f(x), "and", g(x), "is understood as a new dummy variable. This dummy variable is evaluated at the value",
            SourceForm(x), "defined in the surrounding context only after the functions have been constructed."))

make_entry(ID("0be77d"),
    SymbolDefinition(RealIndefiniteIntegralEqual, RealIndefiniteIntegralEqual(f(x), g(x), x), "Indefinite integral, real derivative"),
    Description(SourceForm(RealIndefiniteIntegralEqual(f(x), g(x), x, c)), ", rendered as ",
        RealIndefiniteIntegralEqual(f(x), g(x), x, c), ", expresses that", g(x), "is an antiderivative of", f(x), "at the point", c,
        ", or formally that", Equal(RealDerivative(g(x), For(x, c)), f(c)), ".",
        "In other words,", g(x), "belongs to the equivalence class of antiderivatives of", f(x),
        "at the point", c, ". This is rendered as a statement of equality (with an arbitrary constant of integration) to follow the conventional notation for indefinite integrals."),
    Description("The argument", SourceForm(x), "defines a locally bound variable used in the expressions", f(x), "and", g(x), ". ",
        "If this operator is called more simply as", SourceForm(RealIndefiniteIntegralEqual(f(x), g(x), x)), ", ",
            "the meaning is the same as", SourceForm(RealIndefiniteIntegralEqual(f(x), g(x), x, x)), ", where the", SourceForm(x),
            "appearing in",  f(x), "and", g(x), "is understood as a new dummy variable. This dummy variable is evaluated at the value",
            SourceForm(x), "defined in the surrounding context only after the functions have been constructed."))

make_entry(ID("fb2790"),
    SymbolDefinition(ComplexIndefiniteIntegralEqual, ComplexIndefiniteIntegralEqual(f(x), g(x), x), "Indefinite integral, complex derivative"),
    Description(SourceForm(ComplexIndefiniteIntegralEqual(f(x), g(x), x, c)), ", rendered as ",
        ComplexIndefiniteIntegralEqual(f(x), g(x), x, c), ", expresses that", g(x), "is an antiderivative of", f(x), "at the point", c,
        ", or formally that", Equal(ComplexDerivative(g(x), For(x, c)), f(c)), ".",
        "In other words,", g(x), "belongs to the equivalence class of antiderivatives of", f(x),
        "at the point", c, ". This is rendered as a statement of equality (with an arbitrary constant of integration) to follow the conventional notation for indefinite integrals."),
    Description("The argument", SourceForm(x), "defines a locally bound variable used in the expressions", f(x), "and", g(x), ". ",
        "If this operator is called more simply as", SourceForm(ComplexIndefiniteIntegralEqual(f(x), g(x), x)), ", ",
            "the meaning is the same as", SourceForm(ComplexIndefiniteIntegralEqual(f(x), g(x), x, x)), ", where the", SourceForm(x),
            "appearing in",  f(x), "and", g(x), "is understood as a new dummy variable. This dummy variable is evaluated at the value",
            SourceForm(x), "defined in the surrounding context only after the functions have been constructed."))

make_entry(ID("499bdf"),
    SymbolDefinition(IsHolomorphic, IsHolomorphic(f(z), For(z, c)), "Holomorphic predicate"),
    Description(SourceForm(IsHolomorphic(f(z), For(z, c))), ", rendered", IsHolomorphic(f(z), For(z, c)), ", represents the predicate",
        "that", f(z), "is complex differentiable in some open neighborhood of the point", c, "."),
    Description(SourceForm(IsHolomorphic(f(z), ForElement(z, S))), ", rendered", IsHolomorphic(f(z), ForElement(z, S)), ", represents the predicate",
        "that", f(z), "is complex differentiable in some open neighborhood of every point in the set", S, "."),
    Description("As a special case", IsHolomorphic(f(z), For(z, UnsignedInfinity)), " is equivalent to", IsHolomorphic(f(1/z), For(z, 0)), "."),
    Description("As a special case", IsHolomorphic(f(z), For(z, ConstI*Infinity)), " represents the predicate that",
        f(z), "is a periodic function on the upper half plane that is holomorphic at infinity (in the sense of modular function theory)"))

make_entry(ID("0895b1"),
    SymbolDefinition(IsMeromorphic, IsMeromorphic(f(z), For(z, c)), "Meromorphic predicate"),
    Description(SourceForm(IsMeromorphic(f(z), For(z, c))), ", rendered", IsMeromorphic(f(z), For(z, c)), ", represents the predicate",
        "that", f(z), "is meromorphic in some open neighborhood of the point", c, "."),
    Description(SourceForm(IsMeromorphic(f(z), ForElement(z, S))), ", rendered", IsMeromorphic(f(z), ForElement(z, S)), ", represents the predicate",
        "that", f(z), "is meromorphic in some open neighborhood of every point in the set", S, "."),
    Description("As a special case", IsMeromorphic(f(z), For(z, UnsignedInfinity)), " is equivalent to", IsMeromorphic(f(1/z), For(z, 0)), "."),
    Description("As a special case", IsMeromorphic(f(z), For(z, ConstI*Infinity)), " represents the predicate that",
        f(z), "is a periodic function on the upper half plane that is meromorphic at infinity (in the sense of modular function theory)"))

make_entry(ID("231a99"),
    SymbolDefinition(ComplexZeroMultiplicity, ComplexZeroMultiplicity(f(z), For(z, c)), "Multiplicity (order) of complex zero"),
    Description(SourceForm(ComplexZeroMultiplicity(f(z), For(z, c))), ", rendered", ComplexZeroMultiplicity(f(z), For(z, c)),
        ", gives the root multiplicity (order of vanishing) of", f(z), "at the point", Equal(z, c), "."),
    Description("If", f, "is holomorphic at", c, "and", NotEqual(f(c), 0), ", the multiplicity is zero."),
    Description("If", Equal(z, c), "is a pole of", f(z), ", returns", -n, "where", n, "is the order of the pole."),
    Description("In other words, this operator returns the order of the first nonzero term in the Laurent series of", f(z), "at", Equal(z, c), "."),
    Description("In the special case where", Equal(f(z), 0), "in a neighborhood of", c, ", the order is", Infinity, "."),
    Description("The result is undefined if", f(z), "is not meromorphic at", c, "."),
    Description("The special expression", SourceForm(For(z, c)), "declares", SourceForm(z), "as a locally bound variable within the scope of the arguments to this operator."),
)

make_entry(ID("c54261"),
    SymbolDefinition(Residue, Residue(f(z), For(z, c)), "Complex residue"),
    Description(SourceForm(Residue(f(z), For(z, c))), ", rendered", Residue(f(z), For(z, c)),
        ", gives the complex residue of", f(z), "at the point", Equal(z, c), "."))

make_entry(ID("4d0e14"),
    SymbolDefinition(Path, Path(a, b, c), "Line path"),
    Description("This object represents the path formed by connecting the given points or paths by line segments. ",
        "A path is a formal object, semantically different from a set of points: for a path object, the direction is significant, ",
        "and it is undefined whether a path segment corresponds to an open interval or a closed interval between the points.",
        "The typical application is to represent a path of integration."),
    CodeExample(Path(1, -1), "Represents the path going left from", 1, "to", -1, "."),
    CodeExample(Path(a, Path(b, c)), "Equivalent to", SourceForm(Path(a, b, c)), "."),
    CodeExample(Path(1, ConstI, -1, -ConstI, 1),
        "Represents a diamond-shaped loop around the origin in the counterclockwise direction."),
    CodeExample(Path(-(ConstI*Infinity), ConstI*Infinity),
        "Represents the imaginary axis traversed upwards."),
    CodeExample(Path(1, Exp(Pi*ConstI/4)*Infinity),
        "Represents the ray from", 1, "to infinity along a 45 degree angle."),
    CodeExample(Path(Tuple(2, 1), Tuple(0, 0)),
        "Represents the line segment from", Tuple(2, 1), "to the origin in", Pow(RR, 2), ".")
        )

make_entry(ID("457aaa"),
    SymbolDefinition(AnalyticContinuation, AnalyticContinuation(f(z), For(z, a, b)), "Analytic continuation"),
    Description("Represents the value (or limiting value)", g(b), "where", g(z), "is the unique analytic continuation along the path from", a, "to", b,
        "for the function initially represented by", f(z), ". ",
        "It is assumed that the expression", f(z), "represents a holomorphic function of", z, "in a neighborhood of the initial point", a, ". ",
        "More generally, ", a, "is allowed to be a pole, branch point or even an essential singularity as long as", f(z), "is holomorphic locally in a cone around",
        "the path radiating from", a, ". ",
        "Infinite endpoints are allowed, with the obvious interpretation. ",
        "Analytic continuation paths are allowed to pass through (isolated) poles of the analytically continued function. ",
        "The path is not allowed to pass through intermediate branch points, but may end at a branch point."),
    CodeExample(AnalyticContinuation(f(z), For(z, a, b)), "Represents the analytic continuation of", f(z), "along the straight-line path from", a, "to", b, "."),
    CodeExample(AnalyticContinuation(f(z), For(z, P)), "Represents the analytic continuation of", f(z), "along the path object", P, "."),
    CodeExample(AnalyticContinuation(f(z), For(z, Path(a, b, c))), "Represents the analytic continuation of", f(z), "along the straight-line path", Path(a, b, c), "."),
    CodeExample(AnalyticContinuation(f(z), For(z, CurvePath(Exp(ConstI*t), For(t, 0, theta)))),
        "Represents the analytic continuation of", f(z), "along the circular path starting at", Equal(z, 1), "and rotating ",
        "counterclockwise by the phase", theta, "."))

def_Topic(
    Title("Partition function"),
    Entries(
        "f5e153",
        "8eed2c",     ),
    Section("Specific values"),
    Entries(
        "856db2",
        "cebe1b",
        "e84642",
        "b2583f",
        "7ef291",
        "6018a4",
        "cd3013",
        "9933df",
    ),
    Section("Generating functions"),
    Entries(
        "599417",
    ),
    Section("Sums and recurrence relations"),
    Entries(
        "acdce8",
        "4d2e45",
    ),
    Section("Congruences"),
    Entries(
        "d8e37d",
        "89260d",
        "dacd74",
    ),
    Section("Inequalities"),
    Entries(
        "f7407a",
        "df3c07",
        "d72123",
        "e1f15b",
    ),
    Section("Asymptotic expansions"),
    Entries(
        "7697af",
    ),
    Section("Hardy-Ramanujan-Rademacher formula"),
    Entries(
        "fb7a63",
        "3eae25",
        "5adbc3",
        "afd27a",
    ),
)

make_entry(ID("f5e153"),
    SymbolDefinition(PartitionsP, PartitionsP(n), "Integer partition function"),
    Description(PartitionsP(n), "denotes the number of ways the integer", n, "can be written as a sum of positive integers."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(Element(n, ZZ), Element(PartitionsP(n), ZZGreaterEqual(0))),
        Tuple(Element(n, ZZGreaterEqual(0)), Element(PartitionsP(n), ZZGreaterEqual(1))),
      )),
    )

make_entry(ID("3eae25"),
    SymbolDefinition(HardyRamanujanA, HardyRamanujanA(n,k), "Exponential sum in the Hardy-Ramanujan-Rademacher formula"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(And(Element(n, ZZGreaterEqual(0)), Element(k, ZZGreaterEqual(1))), Element(HardyRamanujanA(n,k), RR)),
      )),
    )

make_entry(ID("856db2"),
    Description("Table of", PartitionsP(n), "for", LessEqual(0, n, 200)),
    Table(
      Var(n),
      TableValueHeadings(n, PartitionsP(n)),
      TableSplit(4),
      List(
Tuple(0, 1), Tuple(1, 1), Tuple(2, 2), Tuple(3, 3), Tuple(4, 5),
Tuple(5, 7), Tuple(6, 11), Tuple(7, 15), Tuple(8, 22), Tuple(9, 30),
Tuple(10, 42), Tuple(11, 56), Tuple(12, 77), Tuple(13, 101), Tuple(14, 135),
Tuple(15, 176), Tuple(16, 231), Tuple(17, 297), Tuple(18, 385), Tuple(19, 490),
Tuple(20, 627), Tuple(21, 792), Tuple(22, 1002), Tuple(23, 1255), Tuple(24, 1575),
Tuple(25, 1958), Tuple(26, 2436), Tuple(27, 3010), Tuple(28, 3718), Tuple(29, 4565),
Tuple(30, 5604), Tuple(31, 6842), Tuple(32, 8349), Tuple(33, 10143), Tuple(34, 12310),
Tuple(35, 14883), Tuple(36, 17977), Tuple(37, 21637), Tuple(38, 26015), Tuple(39, 31185),
Tuple(40, 37338), Tuple(41, 44583), Tuple(42, 53174), Tuple(43, 63261), Tuple(44, 75175),
Tuple(45, 89134), Tuple(46, 105558), Tuple(47, 124754), Tuple(48, 147273), Tuple(49, 173525),
Tuple(50, 204226), Tuple(51, 239943), Tuple(52, 281589), Tuple(53, 329931), Tuple(54, 386155),
Tuple(55, 451276), Tuple(56, 526823), Tuple(57, 614154), Tuple(58, 715220), Tuple(59, 831820),
Tuple(60, 966467), Tuple(61, 1121505), Tuple(62, 1300156), Tuple(63, 1505499), Tuple(64, 1741630),
Tuple(65, 2012558), Tuple(66, 2323520), Tuple(67, 2679689), Tuple(68, 3087735), Tuple(69, 3554345),
Tuple(70, 4087968), Tuple(71, 4697205), Tuple(72, 5392783), Tuple(73, 6185689), Tuple(74, 7089500),
Tuple(75, 8118264), Tuple(76, 9289091), Tuple(77, 10619863), Tuple(78, 12132164), Tuple(79, 13848650),
Tuple(80, 15796476), Tuple(81, 18004327), Tuple(82, 20506255), Tuple(83, 23338469), Tuple(84, 26543660),
Tuple(85, 30167357), Tuple(86, 34262962), Tuple(87, 38887673), Tuple(88, 44108109), Tuple(89, 49995925),
Tuple(90, 56634173), Tuple(91, 64112359), Tuple(92, 72533807), Tuple(93, 82010177), Tuple(94, 92669720),
Tuple(95, 104651419), Tuple(96, 118114304), Tuple(97, 133230930), Tuple(98, 150198136), Tuple(99, 169229875),
Tuple(100, 190569292), Tuple(101, 214481126), Tuple(102, 241265379), Tuple(103, 271248950), Tuple(104, 304801365),
Tuple(105, 342325709), Tuple(106, 384276336), Tuple(107, 431149389), Tuple(108, 483502844), Tuple(109, 541946240),
Tuple(110, 607163746), Tuple(111, 679903203), Tuple(112, 761002156), Tuple(113, 851376628), Tuple(114, 952050665),
Tuple(115, 1064144451), Tuple(116, 1188908248), Tuple(117, 1327710076), Tuple(118, 1482074143), Tuple(119, 1653668665),
Tuple(120, 1844349560), Tuple(121, 2056148051), Tuple(122, 2291320912), Tuple(123, 2552338241), Tuple(124, 2841940500),
Tuple(125, 3163127352), Tuple(126, 3519222692), Tuple(127, 3913864295), Tuple(128, 4351078600), Tuple(129, 4835271870),
Tuple(130, 5371315400), Tuple(131, 5964539504), Tuple(132, 6620830889), Tuple(133, 7346629512), Tuple(134, 8149040695),
Tuple(135, 9035836076), Tuple(136, 10015581680), Tuple(137, 11097645016), Tuple(138, 12292341831), Tuple(139, 13610949895),
Tuple(140, 15065878135), Tuple(141, 16670689208), Tuple(142, 18440293320), Tuple(143, 20390982757), Tuple(144, 22540654445),
Tuple(145, 24908858009), Tuple(146, 27517052599), Tuple(147, 30388671978), Tuple(148, 33549419497), Tuple(149, 37027355200),
Tuple(150, 40853235313), Tuple(151, 45060624582), Tuple(152, 49686288421), Tuple(153, 54770336324), Tuple(154, 60356673280),
Tuple(155, 66493182097), Tuple(156, 73232243759), Tuple(157, 80630964769), Tuple(158, 88751778802), Tuple(159, 97662728555),
Tuple(160, 107438159466), Tuple(161, 118159068427), Tuple(162, 129913904637), Tuple(163, 142798995930), Tuple(164, 156919475295),
Tuple(165, 172389800255), Tuple(166, 189334822579), Tuple(167, 207890420102), Tuple(168, 228204732751), Tuple(169, 250438925115),
Tuple(170, 274768617130), Tuple(171, 301384802048), Tuple(172, 330495499613), Tuple(173, 362326859895), Tuple(174, 397125074750),
Tuple(175, 435157697830), Tuple(176, 476715857290), Tuple(177, 522115831195), Tuple(178, 571701605655), Tuple(179, 625846753120),
Tuple(180, 684957390936), Tuple(181, 749474411781), Tuple(182, 819876908323), Tuple(183, 896684817527), Tuple(184, 980462880430),
Tuple(185, 1071823774337), Tuple(186, 1171432692373), Tuple(187, 1280011042268), Tuple(188, 1398341745571), Tuple(189, 1527273599625),
Tuple(190, 1667727404093), Tuple(191, 1820701100652), Tuple(192, 1987276856363), Tuple(193, 2168627105469), Tuple(194, 2366022741845),
Tuple(195, 2580840212973), Tuple(196, 2814570987591), Tuple(197, 3068829878530), Tuple(198, 3345365983698), Tuple(199, 3646072432125),
Tuple(200, 3972999029388),
    )))

make_entry(ID("9933df"),
    Description("Table of", PartitionsP(10**n), "to 50 digits for", LessEqual(0, n, 30)),
    Table(
      Var(n),
      TableValueHeadings(n, NearestDecimal(PartitionsP(10**n), 50)),
      TableSplit(1),
      List(
        Tuple(0, Decimal("1")),
        Tuple(1, Decimal("42")),
        Tuple(2, Decimal("190569292")),
        Tuple(3, Decimal("24061467864032622473692149727991")),
        Tuple(4, Decimal("3.6167251325636293988820471890953695495016030339316e+106")),
        Tuple(5, Decimal("2.7493510569775696512677516320986352688173429315980e+346")),
        Tuple(6, Decimal("1.4716849863582233986310047606098959434840304844391e+1107")),
        Tuple(7, Decimal("9.2027175502604546685596278166825605430729405281024e+3514")),
        Tuple(8, Decimal("1.7605170459462491413603738946791352040098537975109e+11131")),
        Tuple(9, Decimal("1.6045350842809668832728039026391874671468439447108e+35218")),
        Tuple(10, Decimal("1.0523943461106485297281294178237273482933553642403e+111390")),
        Tuple(11, Decimal("4.1604280503811938572793734321866528100080985902856e+352268")),
        Tuple(12, Decimal("6.1290009628366844179973253747618396500221302871150e+1113995")),
        Tuple(13, Decimal("5.7144146870758614917950406422638086360770375255550e+3522790")),
        Tuple(14, Decimal("2.7509605970815655120620992887934278296645559629575e+11140071")),
        Tuple(15, Decimal("1.3655377298964220782966300424326842827176530525453e+35228030")),
        Tuple(16, Decimal("9.1291313906814503700935608040674225211147823841734e+111400845")),
        Tuple(17, Decimal("8.2913007910135095775713801190603101231989771169282e+352280441")),
        Tuple(18, Decimal("1.4787003107715742179708592460012268624667759844895e+1114008609")),
        Tuple(19, Decimal("5.6469284039962075996762611156427010823552403269436e+3522804577")),
        Tuple(20, Decimal("1.8381765083448826436460575151963949703661288601871e+11140086259")),
        Tuple(21, Decimal("1.2125743672403400786494500161173864623062685147724e+35228045954")),
        Tuple(22, Decimal("1.6197861609669294695161189248758019106925992523025e+111400862778")),
        Tuple(23, Decimal("2.5273733524499047268270064364643395566828146205663e+352280459735")),
        Tuple(24, Decimal("4.5725915523567534123265286016382336070839930153380e+1114008627985")),
        Tuple(25, Decimal("3.9109259209775087194782941921388925892278301362731e+3522804597566")),
        Tuple(26, Decimal("1.4696356043302577340385578467919062215335762286639e+11140086280078")),
        Tuple(27, Decimal("3.0787999182688279161294058462619983591578972390067e+35228045975896")),
        Tuple(28, Decimal("1.7285510783890260357320054674456196730673005602418e+111400862801021")),
        Tuple(29, Decimal("2.8144933818546523144681227969465158737560857425620e+352280459759213")),
        Tuple(30, Decimal("8.7580564911459301179252748158578897130776558175089e+1114008628010469")))))

make_entry(ID("cebe1b"),
    Formula(Equal(PartitionsP(0), Cardinality(Set(List())), 1)))

make_entry(ID("e84642"),
    Formula(Equal(PartitionsP(1), Cardinality(Set(List(1))), 1)))

make_entry(ID("b2583f"),
    Formula(Equal(PartitionsP(2), Cardinality(Set(List(2), List(1,1))), 2)))

make_entry(ID("7ef291"),
    Formula(Equal(PartitionsP(3), Cardinality(Set(List(3), List(2,1), List(1,1,1))), 3)))

make_entry(ID("6018a4"),
    Formula(Equal(PartitionsP(4), Cardinality(Set(List(4), List(3,1), List(2,2), List(2,1,1), List(1,1,1,1))), 5)))

make_entry(ID("cd3013"),
    Formula(Equal(PartitionsP(-n), 0)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("599417"),
    Formula(Equal(Sum(PartitionsP(n) * q**n, For(n, 0, Infinity)),
        1/EulerQSeries(q))),
    Variables(q),
    Assumptions(And(Element(q, CC), Less(Abs(q), 1))))

make_entry(ID("acdce8"),
    Formula(Equal(PartitionsP(n), Sum((-1)**(k+1) * (PartitionsP(n - k*(3*k-1)/2) + PartitionsP(n - k*(3*k+1)/2)), For(k, 1, n+1)))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("4d2e45"),
    Formula(Equal(PartitionsP(n), Div(1,n) * Sum(DivisorSigma(1, n-k) * PartitionsP(k), For(k, 0, n-1)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("d8e37d"),
    Formula(CongruentMod(PartitionsP(5*n+4), 0, 5)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("89260d"),
    Formula(CongruentMod(PartitionsP(7*n+5), 0, 7)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("dacd74"),
    Formula(CongruentMod(PartitionsP(11*n+6), 0, 11)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("f7407a"),
    Formula(LessEqual(PartitionsP(n), PartitionsP(n+1))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("df3c07"),
    Formula(Less(PartitionsP(n), PartitionsP(n+1))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("d72123"),
    Formula(GreaterEqual(PartitionsP(n), n)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("e1f15b"),
    Formula(LessEqual(PartitionsP(n), 2**n)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("7697af"),
    Formula(AsymptoticTo(PartitionsP(n), Exp(Pi*Sqrt(2*n/3)) / (4 * n * Sqrt(3)), n, Infinity)),
    Variables(n),
    Assumptions(Element(n, ZZ)))

hrr_term = Div(HardyRamanujanA(n,k), k) * BesselI(Div(3,2), (Pi/k) * Sqrt(Div(2,3) * (n - Div(1,24))))

make_entry(ID("fb7a63"),
    Formula(Equal(PartitionsP(n), ((2*Pi) / Pow(24*n-1, Div(3,4))) * Sum(hrr_term, For(k, 1, Infinity)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("5adbc3"),
    Formula(Equal(HardyRamanujanA(n,k), Sum(KroneckerDelta(GCD(r,k), 1) * Exp(Pi*ConstI*(DedekindSum(r,k) - 2*n*r/k)), For(r, 0, k-1)))),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(1)), Element(k, ZZGreaterEqual(1)))))

make_entry(ID("afd27a"),
    Formula(LessEqual(Abs(PartitionsP(n) - ((2*Pi) / Pow(24*n-1, Div(3,4))) * Sum(hrr_term, For(k, 1, N))),
        (44*Pi**2/(225*Sqrt(3*N))) + (Pi * Sqrt(2) / 75) * Sqrt(N / (n - 1)) * Sinh((Pi/N) * Sqrt(2*n/3)))),
    Variables(n, N),
    Assumptions(And(Element(n, ZZGreaterEqual(2)), Element(N, ZZGreaterEqual(1)))))

def_Topic(
    Title("Pi"),
    Section("Definitions"),
    Entries(
        "b5d706",
    ),
    Section("Numerical value"),
    Entries(
        "6505a9",
        "47acde",
        "0c838a",
        "155575",
        "483547",     ),
    Section("Euler's identity"),
    Entries(
        "271314",
    ),
    Section("Elementary function representations"),
    Entries(
        "0c9939",
        "3ff35f",
        "722241",
        "b89166",
        "590136",
        "030560",
    ),
    Subsection("Machin-type formulas"),
    Entries(
        "f8d280",
        "cbf396",
        "b1357b",
        "0644b6",
        "5278da",
        "7ce79e",
        "8332d8",
    ),
    Section("Integral representations"),
    Entries(
        "464961",
        "fc8149",
        "04cd99",
        "dae4a7",
        "81f500",
        "bd3faa",
        "9a3503",
        "8107d6",
        "5033c7",
        "6ed553",
        "859856",
        "d8cb3e",
        "e00d9e",
    ),
    Section("Series representations"),
    Entries(
        "f617c0",
        "93831d",
        "419b45",
        "fddfe6",
        "6b9f81",
        "57fcaf",
        "0479f5",
        "338055",
        "fbc53d",
        "11302a",
        "9bf21b",
        "8dff72",
        "31eecc",
        "bad5d9",
        "54c80d",
        "f78fa0",
        "dbdf08",
        "a2e6f9",
    ),
    Section("Product representations"),
    Entries(
        "69fe63",
        "490cf4",
        "a91200",
        "6fce07",
    ),
    Section("Limit representations"),
    Entries(
        "dea83d",
        "e1e106",
        "420007",
        "220e8d",
        "6d9ceb",        ),
    Section("Special function representations"),
    Entries(
        "8fab22",
        "2371b9",
        "63ba30",
        "67bb53",
        "591d64",
        "033c51",
        "dabb47",
        "ce5423",
        "07e35f",
        "9206a3",
        "1448e3",
        "a7095f",
        "c6c108",
        "2a0316",
        "f55b36",
        "769f6e",
        "488a30",
        "826257",
        "3d276b",
        "2806fd",
        "68b73d",
        "42d727",
        "8ee7c9",
        "f56273",
    ),
    Section("Approximations"),
    Entries(
        "2516c2",
        "1e3a25",
        "fdc3a3",
        "4c0698",
        "13c539",      ),
)

make_entry(ID("b5d706"),
    SymbolDefinition(Pi, Pi, "The constant pi (3.14...)"),
    Description("The real number giving the ratio of a circle's circumference to its diameter."))

make_entry(ID("6505a9"),
    Formula(Element(Pi,
        RealBall(Decimal("3.1415926535897932384626433832795028841971693993751"), Decimal("5.83e-51")))))

make_entry(ID("47acde"),
    Description("Table of simple expressions involving", Pi, "to 50 digits"),
    Table(
      Var(x),
      TableValueHeadings(x, NearestDecimal(x, 50)),
      TableSplit(1),
      List(
    Tuple(Pi, Decimal("3.1415926535897932384626433832795028841971693993751")),
    Tuple(2*Pi, Decimal("6.2831853071795864769252867665590057683943387987502")),
    Tuple(3*Pi, Decimal("9.4247779607693797153879301498385086525915081981253")),
    Tuple(4*Pi, Decimal("12.566370614359172953850573533118011536788677597500")),
    Tuple(Pi/2, Decimal("1.5707963267948966192313216916397514420985846996876")),
    Tuple(3*Pi/2, Decimal("4.7123889803846898576939650749192543262957540990627")),
    Tuple(Pi/3, Decimal("1.0471975511965977461542144610931676280657231331250")),
    Tuple(2*Pi/3, Decimal("2.0943951023931954923084289221863352561314462662501")),
    Tuple(Pi/4, Decimal("0.78539816339744830961566084581987572104929234984378")),
    Tuple(3*Pi/4, Decimal("2.3561944901923449288469825374596271631478770495313")),
    Tuple(Pi/5, Decimal("0.62831853071795864769252867665590057683943387987502")),
    Tuple(2*Pi/5, Decimal("1.2566370614359172953850573533118011536788677597500")),
    Tuple(3*Pi/5, Decimal("1.8849555921538759430775860299677017305183016396251")),
    Tuple(4*Pi/5, Decimal("2.5132741228718345907701147066236023073577355195001")),
    Tuple(Pi/6, Decimal("0.52359877559829887307710723054658381403286156656252")),
    Tuple(5*Pi/6, Decimal("2.6179938779914943653855361527329190701643078328126")),
    Tuple(1/Pi, Decimal("0.31830988618379067153776752674502872406891929148091")),
    Tuple(2/Pi, Decimal("0.63661977236758134307553505349005744813783858296183")),
    Tuple(1/(2*Pi), Decimal("0.15915494309189533576888376337251436203445964574046")),
    Tuple(Pi**2, Decimal("9.8696044010893586188344909998761511353136994072408")),
    Tuple((2*Pi)**2, Decimal("39.478417604357434475337963999504604541254797628963")),
    Tuple(Pi**2/2, Decimal("4.9348022005446793094172454999380755676568497036204")),
    Tuple(Pi**2/4, Decimal("2.4674011002723396547086227499690377838284248518102")),
    Tuple(Pi**2/6, Decimal("1.6449340668482264364724151666460251892189499012068")),
    Tuple(1/Pi**2, Decimal("0.10132118364233777144387946320972763890435877467225")),
    Tuple(1/(2*Pi)**2, Decimal("0.025330295910584442860969865802431909726089693668062")),
    Tuple(Pi**3, Decimal("31.006276680299820175476315067101395202225288565885")),
    Tuple(Pi**4, Decimal("97.409091034002437236440332688705111249727585672685")),
    Tuple(Sqrt(Pi), Decimal("1.7724538509055160272981674833411451827975494561224")),
    Tuple(Sqrt(2*Pi), Decimal("2.5066282746310005024157652848110452530069867406099")),
    Tuple(1/Sqrt(Pi), Decimal("0.56418958354775628694807945156077258584405062932900")),
    Tuple(1/Sqrt(2*Pi), Decimal("0.39894228040143267793994605993438186847585863116493")),
    Tuple(Log(Pi), Decimal("1.1447298858494001741434273513530587116472948129153")),
    Tuple(Log(2*Pi), Decimal("1.8378770664093454835606594728112352797227949472756")),
    Tuple(Div(1,2)*Log(2*Pi), Decimal("0.91893853320467274178032973640561763986139747363778")),
    Tuple(Exp(Pi), Decimal("23.140692632779269005729086367948547380266106242600")),
    Tuple(Exp(Pi/2), Decimal("4.8104773809653516554730356667038331263901708746645")),
    Tuple(Exp(2*Pi), Decimal("535.49165552476473650304932958904718147780579760329")),
    Tuple(Exp(-Pi), Decimal("0.043213918263772249774417737171728011275728109810633")),
    Tuple(Exp(-(Pi/2)), Decimal("0.20787957635076190854695561983497877003387784163177")),
    Tuple(Exp(-(2*Pi)), Decimal("0.0018674427317079888144302129348270303934228050024753")),
    Tuple(Exp(Pi) - Pi, Decimal("19.999099979189475767266442984669044496068936843225")),
)))

make_entry(ID("0c838a"),
    Formula(NotElement(Pi, QQ)))

make_entry(ID("155575"),
    Formula(NotElement(Pi, AlgebraicNumbers)))

make_entry(ID("271314"),
    Formula(Equal(Exp(Pi*ConstI) + 1, 0)))

make_entry(ID("0c9939"),
    Formula(Equal(Pi, 4*Atan(1))))

make_entry(ID("3ff35f"),
    Formula(Equal(Pi, 2*Acos(0))))

make_entry(ID("722241"),
    Formula(Equal(Pi, 2*Asin(1))))

make_entry(ID("b89166"),
    Formula(Equal(Pi, UniqueZero(Sin(x), ForElement(x, ClosedInterval(3, 4))))))

make_entry(ID("590136"),
    Formula(Equal(Pi, -(ConstI * Log(-1)))))

make_entry(ID("030560"),
    Formula(Equal(Pi, 10*Asin(1/(2*GoldenRatio)))))

make_entry(ID("f8d280"),
    Formula(Equal(Pi, 16*Atan(Div(1,5)) - 4*Atan(Div(1,239)))))

make_entry(ID("cbf396"),
    Formula(Equal(Pi, 4*Atan(Div(1,2)) + 4*Atan(Div(1,3)))))

make_entry(ID("b1357b"),
    Formula(Equal(Pi, 8*Atan(Div(1,2)) - 4*Atan(Div(1,7)))))

make_entry(ID("0644b6"),
    Formula(Equal(Pi, 8*Atan(Div(1,3)) + 4*Atan(Div(1,7)))))

make_entry(ID("5278da"),
    Formula(Equal(Pi, 4*Atan(Div(1,2)) + 4*Atan(Div(1,5)) + 4*Atan(Div(1,8)))))

make_entry(ID("7ce79e"),
    Formula(Equal(Pi, 4*Atan(Div(1,3)) + 4*Atan(Div(1,4)) + 4*Atan(Div(1,7)) + 4*Atan(Div(1,13)))))

make_entry(ID("8332d8"),
    Formula(Equal(Pi, 48*Atan(Div(1,49))+128*Atan(Div(1,57))-20*Atan(Div(1,239))+48*Atan(Div(1,110443)))))

make_entry(ID("464961"),
    Formula(Equal(Pi, 2 * Integral(Sqrt(1-x**2), For(x, -1, 1)))))

make_entry(ID("fc8149"),
    Formula(Equal(Pi, Integral(1/Sqrt(1-x**2), For(x, -1, 1)))))

make_entry(ID("04cd99"),
    Formula(Equal(Pi, Integral(1/(x**2+1), For(x, -Infinity, Infinity)))))

make_entry(ID("dae4a7"),
    Formula(Equal(Pi, Integral(Exp(-x**2), For(x, -Infinity, Infinity))**2)))

make_entry(ID("81f500"),
    Formula(Equal(Pi, Div(22,7) - Integral(x**4*(1-x)**4/(1+x**2), For(x, 0, 1)))))

make_entry(ID("bd3faa"),
    Formula(Equal(Pi, Div(355,113) - Div(1,3164) * Integral(x**8*(1-x)**8*(25+816*x**2)/(1+x**2), For(x, 0, 1)))),
    References("https://mathworld.wolfram.com/PiFormulas.html"))

make_entry(ID("9a3503"),
    Formula(Equal(Pi, Integral(Sinc(x), For(x, -Infinity, Infinity)))))

make_entry(ID("8107d6"),
    Formula(Equal(Pi, Integral(Sinc(x)**2, For(x, -Infinity, Infinity)))))

make_entry(ID("5033c7"),
    Formula(Equal(Pi, 2 * ConstE * Integral(Cos(x) / (x**2+1), For(x, 0, Infinity)))))

make_entry(ID("6ed553"),
    Formula(Equal(Pi, 8 * Integral(Sin(x**2), For(x, 0, Infinity))**2)))

make_entry(ID("859856"),
    Formula(Equal(Pi, 8 * Integral(Cos(x**2), For(x, 0, Infinity))**2)))

make_entry(ID("d8cb3e"),
    Formula(Equal(Pi, Integral(JacobiTheta(2,0,ConstI*t), For(t, 0, Infinity)))))

make_entry(ID("e00d9e"),
    Formula(Equal(Pi, 3 * Integral(Parentheses(JacobiTheta(3,0,ConstI*t)-1), For(t, 0, Infinity)))))

make_entry(ID("f617c0"),
    Formula(Equal(Pi, 4*Sum((-1)**n / (2*n+1), For(n, 0, Infinity)))))

make_entry(ID("93831d"),
    Formula(Equal(Pi, Sum((2**(n+1) * Factorial(n)**2) / Factorial(2*n+1), For(n, 0, Infinity)))))

make_entry(ID("419b45"),
    Formula(Equal(Pi, Sum(Factorial(n) / DoubleFactorial(2*n+1), For(n, 0, Infinity)))))

make_entry(ID("fddfe6"),
    Formula(Equal(Pi, Sum((1 / 16**n) * (4/(8*n+1)-2/(8*n+4)-1/(8*n+5)-1/(8*n+6)), For(n, 0, Infinity)))),
    References("D. H. Bailey and P. B. Borwein and S. Plouffe (1997). On the rapid computation of various polylogarithmic constants. Mathematics of Computation. vol 66, no 218, p. 903–913. DOI:10.1090/S0025-5718-97-00856-9"))

make_entry(ID("6b9f81"),
    Formula(Equal(1/Pi,
        (2*Sqrt(2))/9801 * Sum((Factorial(4*n) * (1103+26390*n))/(Factorial(n)**4 * 396**(4*n)), For(n, 0, Infinity)))))

make_entry(ID("57fcaf"),
    Formula(Equal(1/Pi,
        12*Sum((-1)**n*Factorial(6*n)*(13591409+545140134*n)/(Factorial(3*n)*Factorial(n)**3*640320**(3*n+Div(3,2))),
            For(n, 0, Infinity)))))

make_entry(ID("0479f5"),
    Formula(Equal(Pi, 72*Sum(1/(n*(Exp(Pi*n)-1)), For(n, 1, Infinity)) - 96*Sum(1/(n*(Exp(2*Pi*n)-1)), For(n, 1, Infinity)) + 24*Sum(1/(n*(Exp(4*Pi*n)-1)), For(n, 1, Infinity)))),
    References("http://www.lacim.uqam.ca/~plouffe/inspired2.pdf"))

make_entry(ID("338055"),
    Formula(Equal(Pi, 8 * Sum(1/((4*n+1)*(4*n+3)), For(n, 0, Infinity)))))

make_entry(ID("fbc53d"),
    Formula(Equal(Pi**2 / 6, Sum(1/n**2, For(n, 1, Infinity)))))

make_entry(ID("11302a"),
    Formula(Equal(Pi**2 / 12, Sum((-1)**(n+1)/n**2, For(n, 1, Infinity)))))

make_entry(ID("9bf21b"),
    Formula(Equal(Pi**4 / 90, Sum(1/n**4, For(n, 1, Infinity)))))

make_entry(ID("8dff72"),
    Formula(Equal(Pi, 2 * Sum(Atan(1/(n**2+n+1)), For(n, 0, Infinity)))))

make_entry(ID("31eecc"),
    Formula(Equal(Pi, 2 * Sum(Atan(1/Fibonacci(2*n+1)), For(n, 0, Infinity)))))

make_entry(ID("bad5d9"),
    Formula(Equal(Pi, Sqrt(3) * (3 * Sum((-1)**n / (3*n+1), For(n, 0, Infinity)) - Log(2)))))

make_entry(ID("54c80d"),
    Formula(Equal(Pi, 4*Sqrt(2) * Sum((-1)**n / (4*n+1), For(n, 0, Infinity)) - 2*Log(1+Sqrt(2)))))

make_entry(ID("f78fa0"),
    Formula(Equal(Pi, Sqrt(3) * (Div(9,2) * Sum(1/Binomial(2*n,n), For(n, 0, Infinity)) - 6))))

make_entry(ID("dbdf08"),
    Formula(Equal(Pi, Sqrt(3) * (Div(9,2) * Sum(n/Binomial(2*n,n), For(n, 1, Infinity)) - 3))))

make_entry(ID("a2e6f9"),
    Formula(Equal(Pi, Sum((3**n-1)*RiemannZeta(n+1) / 4**n, For(n, 1, Infinity)))))

make_entry(ID("69fe63"),
    Formula(Equal(Pi, 2*Product((4*n**2)/(4*n**2-1), For(n, 1, Infinity)))))

make_entry(ID("490cf4"),
    Formula(Equal(Pi, 2*Product(Sec(Pi/2**n), For(n, 2, Infinity)))))

make_entry(ID("a91200"),
    Formula(Equal(Pi**2/6, PrimeProduct((1-1/p**2)**(-1), For(p)))))

make_entry(ID("6fce07"),
    Formula(Equal(2 / Pi, Where(Product(a_(n) / 2, For(n, 1, Infinity)), Def(a_(1), Sqrt(2)), Def(a_(n), Sqrt(2 + a_(n-1)))))))

make_entry(ID("dea83d"),
    Formula(Equal(Pi, SequenceLimit((4/n**2) * Sum(Sqrt(n**2-k**2), For(k, 0, n)), For(n, Infinity)))))

make_entry(ID("e1e106"),
    Formula(Equal(Pi, SequenceLimit(16**n/(n*Binomial(2*n,n)**2), For(n, Infinity)))))

make_entry(ID("420007"),
    Formula(Equal(Pi, SequenceLimit(Div(1,2) * ((-1)**(n+1) * (Factorial(2*n) / BernoulliB(2*n)))**(1/Parentheses(2*n)), For(n, Infinity)))))

make_entry(ID("220e8d"),
    Formula(Equal(3/Pi**2, SequenceLimit(Mul(Div(1, Pow(N, 2)), Sum(Totient(n), For(n, 1, N))), For(N, Infinity)))))

make_entry(ID("8fab22"),
    Formula(Equal(Pi, Gamma(Div(1, 2))**2)))

make_entry(ID("2371b9"),
    Formula(Equal(Pi, (Sqrt(3) / 2) * (Gamma(Div(1,3)) * Gamma(Div(2,3))))))

make_entry(ID("63ba30"),
    Formula(Equal(Pi, (1 / Sqrt(2)) * (Gamma(Div(1,4)) * Gamma(Div(3,4))))))

make_entry(ID("67bb53"),
    Formula(Equal(Pi, Sqrt(6 * RiemannZeta(2)))))

make_entry(ID("591d64"),
    Formula(Equal(Pi, BetaFunction(Div(1,2), Div(1,2)))))

make_entry(ID("033c51"),
    Formula(Equal(Pi, EisensteinG(2, ConstI))))

make_entry(ID("dabb47"),
    Formula(Equal(Pi, Div(1,2) * Gamma(Div(1,4))**Div(4,3) * AGM(1, Sqrt(2))**Div(2,3))))

make_entry(ID("ce5423"),
    Formula(Equal(Pi, 2 * EllipticK(0))))

make_entry(ID("07e35f"),
    Formula(Equal(Pi, 2 * EllipticE(0))))

make_entry(ID("9206a3"),
    Formula(Equal(Pi, Sqrt(6 * PolyLog(2, 1)))))

make_entry(ID("1448e3"),
    Formula(Equal(Pi, 2 * Hypergeometric2F1(Div(1,2), Div(1,2), Div(3,2), 1))))

make_entry(ID("a7095f"),
    Formula(Equal(1 / Pi, Div(1,2) * Hypergeometric2F1(Div(1,2),-Div(1,2),1,1))))

make_entry(ID("c6c108"),
    Formula(Equal(1 / Pi, Div(1,4) * Hypergeometric2F1(-Div(1,2),-Div(1,2),1,1))))

make_entry(ID("2a0316"),
    Formula(Equal(Pi, 2 * Hypergeometric2F1(-Div(1,2),-Div(1,2),Div(1,2),1))))

make_entry(ID("f55b36"),
    Formula(Equal(Pi, 4 * (Hypergeometric2F1(-Div(1,2),1,Div(1,2),-1)-1))))

make_entry(ID("769f6e"),
    Formula(Equal(Pi, 2 * Hypergeometric2F1(1,1,Div(1,2),Div(1,2))-4)))

make_entry(ID("488a30"),
    Formula(Equal(Pi, 4*(Sqrt(2)*Hypergeometric2F1(-Div(1,2),-Div(1,2),Div(1,2),Div(1,2))-1))))

make_entry(ID("826257"),
    Formula(Equal(Pi, Sqrt(3)*(Div(9,2) * Hypergeometric2F1(1,1,Div(1,2),Div(1,4)) - 6))))

make_entry(ID("3d276b"),
    Formula(Equal(Pi, 12 * Hypergeometric2F1(-Div(1,2),-Div(1,2),Div(1,2),Div(1,4)) - 6*Sqrt(3))))

make_entry(ID("2806fd"),
    Formula(Equal(Pi, (9/(2*Sqrt(3)) *Hypergeometric2F1(1, 1, Div(3,2), 1/4)))))

make_entry(ID("68b73d"),
    Formula(Equal(1/Pi, (2*Sqrt(3))/9 * Hypergeometric2F1(-Div(1,3),Div(1,3),1,1))))

make_entry(ID("42d727"),
    Formula(Equal(Pi, (5 * Sqrt(GoldenRatio + 2)) / (2 * GoldenRatio) * Hypergeometric2F1(1, 1, Div(3,2), 1/(2*GoldenRatio)**2))))

make_entry(ID("8ee7c9"),
    Formula(Equal(Pi, Sqrt(DigammaFunction(Div(1,4), 1) - 8*ConstCatalan))))

make_entry(ID("f56273"),
    Formula(Equal(Pi, (4 * DirichletL(1, DirichletCharacter(4,3))))))

make_entry(ID("2516c2"),
    Formula(Less(Abs(Pi - Div(22,7)), Decimal("0.00127"))))

make_entry(ID("1e3a25"),
    Formula(Less(Abs(Pi - Div(355,113)), Decimal("2.67e-7"))))

make_entry(ID("fdc3a3"),
    Formula(Less(Abs(Pi - Log(Pow(640320,3)+744)/Sqrt(163)), Decimal("2.24e-31"))))

make_entry(ID("4c0698"),
    Formula(Less(Abs(1/Pi -
        Parentheses(12*Sum((-1)**n*Factorial(6*n)*(13591409+545140134*n)/(Factorial(3*n)*Factorial(n)**3*640320**(3*n+Div(3,2))),
            For(n, 0, N-1)))), Div(1,151931373056000**N))),
    Variables(N),
    Assumptions(Element(N, ZZGreaterEqual(0))))

def_Topic(
    Title("Powers"),
    Entries(
        "ef9f8a",
    ),
    Section("Integer exponents"),
    Entries(
        "d316bc",
        "310f36",
        "a249f6",
        "6c2b31",
        "c53d94",
    ),
    Section("Elementary functions"),
    Entries(
        "4d6416",
        "634687",
        "2e0d99",
    ),
    Section("Complex parts"),
    Entries(
        "0aac97",
        "bc4d0a",
        "caf8cf",
        "18873d",
    ),
    Section("Expansion"),
    Entries(
        "2090c3",
    ),
)

make_entry(ID("ef9f8a"),
    SymbolDefinition(Pow, Pow(a,b), "Power"),
    Description(""),
    Description("The following table lists conditions such that", SourceForm(Pow(a, b)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(And(Element(a, SetMinus(CC, 0)), Element(b, CC)), Element(Pow(a, b), CC)),
        Tuple(And(Element(a, CC), Element(b, Set(0))), Element(Pow(a, b), Set(1))),
        TableSection("Infinities"),
        Tuple(And(Element(a, Set(Infinity,-Infinity,UnsignedInfinity)), Element(b, ZZLessEqual(-1))), Element(Pow(a, b), Set(0))),
        TableSection("General domains"),
        Tuple(And(Element(a, R), Element(R, Rings), Element(b, ZZGreaterEqual(0))), Element(Pow(a, b), R)),
        Tuple(And(Element(a, SetMinus(K, Set(0))), Element(K, Fields), SubsetEqual(QQ, K), Element(b, ZZ)), Element(Pow(a, b), R)),
      )))

make_entry(ID("d316bc"),
    Formula(Equal(Pow(0, 0), 1)))

make_entry(ID("310f36"),
    Formula(Equal(Pow(z, 0), 1)),
    Variables(z),
    Assumptions(Element(z, CC)),
        And(Element(z, R), Element(R, Rings), SubsetEqual(ZZ, R)))

make_entry(ID("a249f6"),
    Formula(Equal(Pow(z, 1), z)),
    Variables(z),
    Assumptions(Element(z, CC)),
        And(Element(z, R), Element(R, Rings)))

make_entry(ID("6c2b31"),
    Formula(Equal(Pow(z, n + 1), Pow(z, n)) * z),
    Variables(z, n),
    Assumptions(And(Element(z, CC), Element(n, ZZGreaterEqual(0))),
        And(Element(z, R), Element(R, Rings), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("c53d94"),
    Formula(Equal(Pow(z, -1), 1/z)),
    Variables(z),
    Assumptions(Element(z, CC),
        And(Element(z, SetMinus(K, Set(0))), Element(K, Fields), SubsetEqual(QQ, K))))

make_entry(ID("4d6416"),
    Formula(Equal(Pow(a, b), Exp(b*Log(a)))),
    Variables(a, b),
    Assumptions(And(Element(a, SetMinus(CC, Set(0))), Element(b, CC))))

make_entry(ID("634687"),
    Formula(Equal(Pow(z, Div(1,2)), Sqrt(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("2e0d99"),
    Formula(Equal(Pow(z, -Div(1,2)), 1/Sqrt(z))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("0aac97"),
    Formula(Equal(Pow(a+b*ConstI, c+d*ConstI),
        Where(M**c * Exp(-(d*theta)) * (Cos(c*theta + d*Log(M)) + ConstI * Sin(c*theta + d*Log(M))), Equal(M, Abs(a+b*ConstI)), Equal(theta, Arg(a+b*ConstI))))),
    Variables(a, b, c, d),
    Assumptions(And(Element(a, RR), Element(b, RR), Element(c, RR), Element(d, RR), NotEqual(a+b*ConstI, 0))))

make_entry(ID("bc4d0a"),
    Formula(Equal(Abs(Pow(a+b*ConstI, c+d*ConstI)),
        Where(M**c * Exp(-(d*theta)), Equal(M, Abs(a+b*ConstI)), Equal(theta, Arg(a+b*ConstI))))),
    Variables(a, b, c, d),
    Assumptions(And(Element(a, RR), Element(b, RR), Element(c, RR), Element(d, RR), NotEqual(a+b*ConstI, 0))))

make_entry(ID("caf8cf"),
    Formula(Equal(Re(Pow(a+b*ConstI, c+d*ConstI)),
        Where(M**c * Exp(-(d*theta)) * Cos(c*theta + d*Log(M)), Equal(M, Abs(a+b*ConstI)), Equal(theta, Arg(a+b*ConstI))))),
    Variables(a, b, c, d),
    Assumptions(And(Element(a, RR), Element(b, RR), Element(c, RR), Element(d, RR), NotEqual(a+b*ConstI, 0))))

make_entry(ID("18873d"),
    Formula(Equal(Im(Pow(a+b*ConstI, c+d*ConstI)),
        Where(M**c * Exp(-(d*theta)) * Sin(c*theta + d*Log(M)), Equal(M, Abs(a+b*ConstI)), Equal(theta, Arg(a+b*ConstI))))),
    Variables(a, b, c, d),
    Assumptions(And(Element(a, RR), Element(b, RR), Element(c, RR), Element(d, RR), NotEqual(a+b*ConstI, 0))))

make_entry(ID("2090c3"),
    Formula(Equal(
        (x*y)**a,
        x**a * y**a * Exp(2*Pi*ConstI*a * Floor((Pi - Arg(x) - Arg(y)) / (2*Pi))
        )
    )),
    Variables(x, y, a),
    Assumptions(And(
        Element(x, SetMinus(CC, Set(0))),
        Element(y, SetMinus(CC, Set(0))),
        Element(a, CC)
    ))
)

def_Topic(
    Title("Prime numbers"),
    Section("Definitions"),
    Entries(
        "38f111",
        "0b643d",
        "6c22c8",
        "c03de4",      ),
    Section("Connection formulas"),
    Entries(
        "3fc797",
        "04427b",
        "9d0839",          "4fa169",      ),
    Section("Tables"),
    Entries(
        "a3035f",
        "1e142c",
        "5404ce",
    ),
    Section("Bounds and inequalities"),
    Subsection("Bertrand's postulate"),
    Entries(
        "d1ec2d",
        "69fd4b",
    ),
    Subsection("Bounds for prime numbers"),
    Entries(
        "6f3cf7",
        "8c52de",
        "bfa464",
        "1e3388",
    ),
    Subsection("Bounds for the prime counting function"),
    Entries(
        "5258c0",
        "375afe",
        "d898b9",
    ),
)

make_entry(ID("38f111"),
    SymbolDefinition(PP, PP, "Prime numbers"),
    Description("The set of prime numbers."))

make_entry(ID("0b643d"),
    SymbolDefinition(PrimeNumber, PrimeNumber(n), "nth prime number"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(Element(n, ZZGreaterEqual(1)), Element(PrimeNumber(n), PP)),
      )))

make_entry(ID("6c22c8"),
    SymbolDefinition(PrimePi, PrimePi(x), "Prime counting function"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(Element(x, RR), Element(PrimePi(x), ZZGreaterEqual(0))),
        Tuple(Element(x, Set(Infinity)), Element(PrimePi(x), Set(Infinity))))
      ))

make_entry(ID("3fc797"),
    Formula(Equal(PP, Set(PrimeNumber(n), ForElement(n, ZZGreaterEqual(1))))))

make_entry(ID("04427b"),
    Formula(Equal(PrimePi(x), Cardinality(Set(p, ForElement(p, PP), LessEqual(p, x))))),
    Variables(x),
    Assumptions(Element(x, RR)))

make_entry(ID("d1ec2d"),
    Formula(Less(PrimeNumber(n+1), 2*PrimeNumber(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("69fd4b"),
    Formula(GreaterEqual(PrimePi(2*x) - PrimePi(x), 1)),
    Variables(x),
    Assumptions(And(Element(x, RR), GreaterEqual(x, 1))))

make_entry(ID("375afe"),
    Formula(Less(Abs(PrimePi(x)-LogIntegral(x)), Sqrt(x)*Log(x)/(8*Pi))),
    Variables(x),
    Assumptions(And(Element(x, RR), GreaterEqual(x, 2657), RiemannHypothesis)),
    References("L. Schoenfeld (1976). Sharper bounds for the Chebyshev functions θ(x) and ψ(x). II. Mathematics of Computation. 30 (134): 337-360. DOI: 10.2307/2005976"))

make_entry(ID("d898b9"),
    Formula(Greater(PrimePi(x), x/Log(x))),
    Variables(x),
    Assumptions(And(Element(x, RR), GreaterEqual(x, 17))))

make_entry(ID("5258c0"),
    Formula(Less(PrimePi(x), Decimal("1.25506") * x/Log(x))),
    Variables(x),
    Assumptions(And(Element(x, RR), Greater(x, 1))))

make_entry(ID("8c52de"),
    Formula(Greater(PrimeNumber(n), n*(Log(n*Log(n))-1))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(2))))

make_entry(ID("6f3cf7"),
    Formula(Less(PrimeNumber(n), n*Log(n*Log(n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(6))))

make_entry(ID("bfa464"),
    Formula(Less(PrimeNumber(n), n*(Log(n) + Log(Log(n)) - 1 + (Log(Log(n))-2)/Log(n) - (Log(Log(n))**2 - 6*Log(Log(n)) + Decimal("10.667"))/(2*Log(n)**2)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(46254381))),
    References("https://arxiv.org/abs/1706.03651"))

make_entry(ID("1e3388"),
    Formula(Greater(PrimeNumber(n), n*(Log(n) + Log(Log(n)) - 1 + (Log(Log(n))-2)/Log(n) - (Log(Log(n))**2 - 6*Log(Log(n)) + Decimal("11.508"))/(2*Log(n)**2)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(2))),
    References("https://arxiv.org/abs/1706.03651"))

make_entry(ID("a3035f"),
    Description("Table of", PrimeNumber(n), "for", LessEqual(1, n, 200)),
    Table(
      Var(n),
      TableValueHeadings(n, PrimeNumber(n)),
      TableSplit(4),
      List(
Tuple(1, 2), Tuple(2, 3), Tuple(3, 5), Tuple(4, 7), Tuple(5, 11),
Tuple(6, 13), Tuple(7, 17), Tuple(8, 19), Tuple(9, 23), Tuple(10, 29),
Tuple(11, 31), Tuple(12, 37), Tuple(13, 41), Tuple(14, 43), Tuple(15, 47),
Tuple(16, 53), Tuple(17, 59), Tuple(18, 61), Tuple(19, 67), Tuple(20, 71),
Tuple(21, 73), Tuple(22, 79), Tuple(23, 83), Tuple(24, 89), Tuple(25, 97),
Tuple(26, 101), Tuple(27, 103), Tuple(28, 107), Tuple(29, 109), Tuple(30, 113),
Tuple(31, 127), Tuple(32, 131), Tuple(33, 137), Tuple(34, 139), Tuple(35, 149),
Tuple(36, 151), Tuple(37, 157), Tuple(38, 163), Tuple(39, 167), Tuple(40, 173),
Tuple(41, 179), Tuple(42, 181), Tuple(43, 191), Tuple(44, 193), Tuple(45, 197),
Tuple(46, 199), Tuple(47, 211), Tuple(48, 223), Tuple(49, 227), Tuple(50, 229),
Tuple(51, 233), Tuple(52, 239), Tuple(53, 241), Tuple(54, 251), Tuple(55, 257),
Tuple(56, 263), Tuple(57, 269), Tuple(58, 271), Tuple(59, 277), Tuple(60, 281),
Tuple(61, 283), Tuple(62, 293), Tuple(63, 307), Tuple(64, 311), Tuple(65, 313),
Tuple(66, 317), Tuple(67, 331), Tuple(68, 337), Tuple(69, 347), Tuple(70, 349),
Tuple(71, 353), Tuple(72, 359), Tuple(73, 367), Tuple(74, 373), Tuple(75, 379),
Tuple(76, 383), Tuple(77, 389), Tuple(78, 397), Tuple(79, 401), Tuple(80, 409),
Tuple(81, 419), Tuple(82, 421), Tuple(83, 431), Tuple(84, 433), Tuple(85, 439),
Tuple(86, 443), Tuple(87, 449), Tuple(88, 457), Tuple(89, 461), Tuple(90, 463),
Tuple(91, 467), Tuple(92, 479), Tuple(93, 487), Tuple(94, 491), Tuple(95, 499),
Tuple(96, 503), Tuple(97, 509), Tuple(98, 521), Tuple(99, 523), Tuple(100, 541),
Tuple(101, 547), Tuple(102, 557), Tuple(103, 563), Tuple(104, 569), Tuple(105, 571),
Tuple(106, 577), Tuple(107, 587), Tuple(108, 593), Tuple(109, 599), Tuple(110, 601),
Tuple(111, 607), Tuple(112, 613), Tuple(113, 617), Tuple(114, 619), Tuple(115, 631),
Tuple(116, 641), Tuple(117, 643), Tuple(118, 647), Tuple(119, 653), Tuple(120, 659),
Tuple(121, 661), Tuple(122, 673), Tuple(123, 677), Tuple(124, 683), Tuple(125, 691),
Tuple(126, 701), Tuple(127, 709), Tuple(128, 719), Tuple(129, 727), Tuple(130, 733),
Tuple(131, 739), Tuple(132, 743), Tuple(133, 751), Tuple(134, 757), Tuple(135, 761),
Tuple(136, 769), Tuple(137, 773), Tuple(138, 787), Tuple(139, 797), Tuple(140, 809),
Tuple(141, 811), Tuple(142, 821), Tuple(143, 823), Tuple(144, 827), Tuple(145, 829),
Tuple(146, 839), Tuple(147, 853), Tuple(148, 857), Tuple(149, 859), Tuple(150, 863),
Tuple(151, 877), Tuple(152, 881), Tuple(153, 883), Tuple(154, 887), Tuple(155, 907),
Tuple(156, 911), Tuple(157, 919), Tuple(158, 929), Tuple(159, 937), Tuple(160, 941),
Tuple(161, 947), Tuple(162, 953), Tuple(163, 967), Tuple(164, 971), Tuple(165, 977),
Tuple(166, 983), Tuple(167, 991), Tuple(168, 997), Tuple(169, 1009), Tuple(170, 1013),
Tuple(171, 1019), Tuple(172, 1021), Tuple(173, 1031), Tuple(174, 1033), Tuple(175, 1039),
Tuple(176, 1049), Tuple(177, 1051), Tuple(178, 1061), Tuple(179, 1063), Tuple(180, 1069),
Tuple(181, 1087), Tuple(182, 1091), Tuple(183, 1093), Tuple(184, 1097), Tuple(185, 1103),
Tuple(186, 1109), Tuple(187, 1117), Tuple(188, 1123), Tuple(189, 1129), Tuple(190, 1151),
Tuple(191, 1153), Tuple(192, 1163), Tuple(193, 1171), Tuple(194, 1181), Tuple(195, 1187),
Tuple(196, 1193), Tuple(197, 1201), Tuple(198, 1213), Tuple(199, 1217), Tuple(200, 1223),
    )))

make_entry(ID("1e142c"),
    Description("Table of", PrimeNumber(10**n), "for", LessEqual(0, n, 24)),
    Table(
      Var(n),
      TableValueHeadings(n, PrimeNumber(10**n)),
      TableSplit(2),
      List(
    Tuple(0, 2),
    Tuple(1, 29),
    Tuple(2, 541),
    Tuple(3, 7919),
    Tuple(4, 104729),
    Tuple(5, 1299709),
    Tuple(6, 15485863),
    Tuple(7, 179424673),
    Tuple(8, 2038074743),
    Tuple(9, 22801763489),
    Tuple(10, 252097800623),
    Tuple(11, 2760727302517),
    Tuple(12, 29996224275833),
    Tuple(13, 323780508946331),
    Tuple(14, 3475385758524527),
    Tuple(15, 37124508045065437),
    Tuple(16, 394906913903735329),
    Tuple(17, 4185296581467695669),
    Tuple(18, 44211790234832169331),
    Tuple(19, 465675465116607065549),
    Tuple(20, 4892055594575155744537),
    Tuple(21, 51271091498016403471853),
    Tuple(22, 536193870744162118627429),
    Tuple(23, 5596564467986980643073683),
    Tuple(24, 58310039994836584070534263))))

make_entry(ID("5404ce"),
    Description("Table of", PrimePi(10**n), "for", LessEqual(0, n, 27)),
    Table(
      Var(n),
      TableValueHeadings(n, PrimePi(10**n)),
      TableSplit(2),
      List(
    Tuple(0, 0),
    Tuple(1, 4),
    Tuple(2, 25),
    Tuple(3, 168),
    Tuple(4, 1229),
    Tuple(5, 9592),
    Tuple(6, 78498),
    Tuple(7, 664579),
    Tuple(8, 5761455),
    Tuple(9, 50847534),
    Tuple(10, 455052511),
    Tuple(11, 4118054813),
    Tuple(12, 37607912018),
    Tuple(13, 346065536839),
    Tuple(14, 3204941750802),
    Tuple(15, 29844570422669),
    Tuple(16, 279238341033925),
    Tuple(17, 2623557157654233),
    Tuple(18, 24739954287740860),
    Tuple(19, 234057667276344607),
    Tuple(20, 2220819602560918840),
    Tuple(21, 21127269486018731928),
    Tuple(22, 201467286689315906290),
    Tuple(23, 1925320391606803968923),
    Tuple(24, 18435599767349200867866),
    Tuple(25, 176846309399143769411680),
    Tuple(26, 1699246750872437141327603),
    Tuple(27, 16352460426841680446427399))))

def_Topic(
    Title("Riemann zeta function"),
    Section("Definitions"),
    Entries(
        "e0a6a2",
    ),
    Section("Illustrations"),
    Entries(
        "3131df",
    ),
    Section("Dirichlet series"),
    Entries(
        "da2fdb",           "1d46d4",
    ),
    Section("Euler product"),
    Entries(
        "8f5e66",      ),
    Section("Laurent series"),
    Description("Related topic:", TopicReference("Stieltjes constants")),
    Entries(
        "b1a2e1",
    ),
    Section("Special values"),
    Entries(
        "a01b6e",          "e84983",          "72ccda",          "51fd98",          "7cb17f",          "e50a56",          "e93ca8",      ),
    Section("Analytic properties"),
    Entries(
        "8b5ddb",          "52c4ab",          "fdb94b",          "36a095",          "9a258f",      ),
    Section("Zeros"),
    SeeTopics("Zeros of the Riemann zeta function"),
    Entries(
        "669509",          "c03de4",          "49704a",          "2e1ff3",          "a78abc",          "692e42",          "cbbf16",          "e6ff64",          "60c2ec",          "71d9d9",      ),
    Section("Complex parts"),
    Entries(
        "69348a",      ),
    Section("Functional equation"),
    Entries(
        "9ee8bc",          "1a63af",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "809bc0",          "3a5eb6",      ),
    Section("Euler-Maclaurin formula"),
    Entries(
        "792f7b",      ),
    Section("Approximations"),
    Entries(
        "d31b04",          "e37535",      ),
        )

def_Topic(
    Title("Zeros of the Riemann zeta function"),
    Entries(
        "e0a6a2",
        "669509",
        "c03de4",
    ),
    Section("Main properties"),
    Description("See also: ", TopicReference("Riemann hypothesis")),
    Entries(
        "9fa2a1",          "49704a",          "2e1ff3",          "a78abc",          "692e42",          "cbbf16",          "e6ff64",          "60c2ec",      ),
    Section("Numerical values"),
    Entries(
        "945fa5",          "c0ae99",          "71d9d9",          "dc558b",          "2e1cc7"       ),
    Section("Related topics"),
    SeeTopics("Riemann zeta function"),
)

make_entry(ID("e0a6a2"),
    SymbolDefinition(RiemannZeta, RiemannZeta(s), "Riemann zeta function"),
    Description("The Riemann zeta function", RiemannZeta(s), "is a function of one complex variable", s,
        ". It is a meromorphic function with a pole at", Equal(s, 1), ".",
        "The following table lists all conditions such that", SourceForm(RiemannZeta(s)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(Element(s, OpenInterval(1, Infinity)), Element(RiemannZeta(s), OpenInterval(1, Infinity))),
        Tuple(Element(s, SetMinus(RR, Set(1))), Element(RiemannZeta(s), RR)),
        Tuple(Element(s, SetMinus(CC, Set(1))), Element(RiemannZeta(s), CC)),
        TableSection("Infinities"),
        Tuple(Element(s, Set(1)), Element(RiemannZeta(s), Set(UnsignedInfinity))),
        Tuple(Element(s, Set(Infinity)), Element(RiemannZeta(s), Set(1))),
        TableSection("Formal power series"),
        Tuple(And(Element(s, PowerSeries(RR, x)), NotEqual(SeriesCoefficient(s, x, 0), 1)),
            Element(RiemannZeta(s), PowerSeries(RR, x))),
        Tuple(And(Element(s, PowerSeries(CC, x)), NotEqual(SeriesCoefficient(s, x, 0), 1)),
            Element(RiemannZeta(s), PowerSeries(CC, x))),
        Tuple(And(Element(s, PowerSeries(RR, x)), NotEqual(s, 1)),
            Element(RiemannZeta(s), LaurentSeries(RR, x))),
        Tuple(And(Element(s, PowerSeries(CC, x)), NotEqual(s, 1)),
            Element(RiemannZeta(s), LaurentSeries(CC, x))),
      )),
    )

make_entry(ID("669509"),
    SymbolDefinition(RiemannZetaZero, RiemannZetaZero(n), "Nontrivial zero of the Riemann zeta function"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(Element(n, SetMinus(ZZ, Set(0))), Element(RiemannZetaZero(n), CC))
    )))

make_entry(ID("3131df"),
    Image(Description("X-ray of", RiemannZeta(s), "on", Element(s, ClosedInterval(-22,22) + ClosedInterval(-27,27)*ConstI), "with the critical strip highlighted"),
        ImageSource("xray_zeta")),
    description_xray,
    )

make_entry(ID("da2fdb"),
    Formula(Equal(RiemannZeta(s), Sum(1/k**s, For(k, 1, Infinity)))),
    Variables(s),
    Assumptions(And(Element(s, CC), Greater(Re(s), 1))))

make_entry(ID("1d46d4"),
    Formula(Equal(1/RiemannZeta(s), Sum(MoebiusMu(k)/k**s, For(k, 1, Infinity)))),
    Variables(s),
    Assumptions(And(Element(s, CC), Greater(Re(s), 1))))

make_entry(ID("8f5e66"),
    Formula(Equal(RiemannZeta(s), PrimeProduct(1/(1-1/p**s), For(p)))),
    Variables(s),
    Assumptions(And(Element(s, CC), Greater(Re(s), 1))))

make_entry(ID("a01b6e"),
    Formula(Equal(RiemannZeta(2), Pi**2 / 6)))

make_entry(ID("e84983"),
    Formula(NotElement(RiemannZeta(3), QQ)),
    References("R. Apéry (1979), Irrationalité de ζ(2) et ζ(3), Astérisque, 61: 11-13."))

make_entry(ID("72ccda"),
    Formula(Equal(RiemannZeta(2*n), (-1)**(n+1) * BernoulliB(2*n) * (2*Pi)**(2*n) / (2 * Factorial(2*n)))),
    Variables(n),
    Assumptions(And(Element(n, ZZ), GreaterEqual(n, 1))))

make_entry(ID("51fd98"),
    Formula(Equal(RiemannZeta(-n), (-1)**n * BernoulliB(n+1) / (n+1))),
    Variables(n),
    Assumptions(And(Element(n, ZZ), GreaterEqual(n, 0))))

make_entry(ID("9ee8bc"),
    Formula(Equal(RiemannZeta(s), 2 * (2*Pi)**(s-1) * Sin(Pi*s/2) * Gamma(1-s) * RiemannZeta(1-s))),
    Variables(s),
    Assumptions(
        And(Element(s, CC), NotElement(s, ZZGreaterEqual(0))),
        And(Element(s, PowerSeries(CC, SerX)), NotElement(s, ZZGreaterEqual(0))),
    ))

make_entry(ID("1a63af"),
    Formula(Equal(RiemannZeta(1-s), (2 * Cos(Div(1,2)*Pi*s)) / (2*Pi)**(s) * Gamma(s) * RiemannZeta(s))),
    Variables(s),
    Assumptions(
        And(Element(s, CC), NotElement(s, ZZLessEqual(1))),
        And(Element(s, PowerSeries(CC, SerX)), NotElement(s, ZZLessEqual(1))),
    ))

make_entry(ID("7cb17f"),
    Description("Table of", RiemannZeta(2*n), "for", LessEqual(1, n, 20)),
    Table(
      Var(n),
            TableValueHeadings(n, RiemannZeta(n)),
      TableSplit(2),
      List(
    Tuple(2, Div(1, 6) * Pi**2),
    Tuple(4, Div(1, 90) * Pi**4),
    Tuple(6, Div(1, 945) * Pi**6),
    Tuple(8, Div(1, 9450) * Pi**8),
    Tuple(10, Div(1, 93555) * Pi**10),
    Tuple(12, Div(691, 638512875) * Pi**12),
    Tuple(14, Div(2, 18243225) * Pi**14),
    Tuple(16, Div(3617, 325641566250) * Pi**16),
    Tuple(18, Div(43867, 38979295480125) * Pi**18),
    Tuple(20, Div(174611, 1531329465290625) * Pi**20),
    Tuple(22, Div(155366, 13447856940643125) * Pi**22),
    Tuple(24, Div(236364091, 201919571963756521875) * Pi**24),
    Tuple(26, Div(1315862, 11094481976030578125) * Pi**26),
    Tuple(28, Div(6785560294, 564653660170076273671875) * Pi**28),
    Tuple(30, Div(6892673020804, 5660878804669082674070015625) * Pi**30),
    Tuple(32, Div(7709321041217, 62490220571022341207266406250) * Pi**32),
    Tuple(34, Div(151628697551, 12130454581433748587292890625) * Pi**34),
    Tuple(36, Div(26315271553053477373, 20777977561866588586487628662044921875) * Pi**36),
    Tuple(38, Div(308420411983322, 2403467618492375776343276883984375) * Pi**38),
    Tuple(40, Div(261082718496449122051, 20080431172289638826798401128390556640625) * Pi**40))))

make_entry(ID("e50a56"),
    Description("Table of", RiemannZeta(-n), "for", LessEqual(0, n, 30)),
    Table(
      Var(n),
            TableValueHeadings(n, RiemannZeta(n)),
      TableSplit(3),
      List(
    Tuple(0, -Div(1, 2)),
    Tuple(-1, -Div(1, 12)),
    Tuple(-2, 0),
    Tuple(-3, Div(1, 120)),
    Tuple(-4, 0),
    Tuple(-5, -Div(1, 252)),
    Tuple(-6, 0),
    Tuple(-7, Div(1, 240)),
    Tuple(-8, 0),
    Tuple(-9, -Div(1, 132)),
    Tuple(-10, 0),
    Tuple(-11, Div(691, 32760)),
    Tuple(-12, 0),
    Tuple(-13, -Div(1, 12)),
    Tuple(-14, 0),
    Tuple(-15, Div(3617, 8160)),
    Tuple(-16, 0),
    Tuple(-17, -Div(43867, 14364)),
    Tuple(-18, 0),
    Tuple(-19, Div(174611, 6600)),
    Tuple(-20, 0),
    Tuple(-21, -Div(77683, 276)),
    Tuple(-22, 0),
    Tuple(-23, Div(236364091, 65520)),
    Tuple(-24, 0),
    Tuple(-25, -Div(657931, 12)),
    Tuple(-26, 0),
    Tuple(-27, Div(3392780147, 3480)),
    Tuple(-28, 0),
    Tuple(-29, -Div(1723168255201, 85932)),
    Tuple(-30, 0))))

make_entry(ID("e93ca8"),
    Description("Table of", RiemannZeta(n), "to 50 digits for", LessEqual(2, n, 50)),
    Table(
      Var(n),
            TableValueHeadings(n, NearestDecimal(RiemannZeta(n), 50)),
      TableSplit(1),
      List(
    Tuple(2, Decimal("1.6449340668482264364724151666460251892189499012068")),
    Tuple(3, Decimal("1.2020569031595942853997381615114499907649862923405")),
    Tuple(4, Decimal("1.0823232337111381915160036965411679027747509519187")),
    Tuple(5, Decimal("1.0369277551433699263313654864570341680570809195019")),
    Tuple(6, Decimal("1.0173430619844491397145179297909205279018174900329")),
    Tuple(7, Decimal("1.0083492773819228268397975498497967595998635605652")),
    Tuple(8, Decimal("1.0040773561979443393786852385086524652589607906499")),
    Tuple(9, Decimal("1.0020083928260822144178527692324120604856058513949")),
    Tuple(10, Decimal("1.0009945751278180853371459589003190170060195315645")),
    Tuple(11, Decimal("1.0004941886041194645587022825264699364686064357582")),
    Tuple(12, Decimal("1.0002460865533080482986379980477396709604160884580")),
    Tuple(13, Decimal("1.0001227133475784891467518365263573957142751058955")),
    Tuple(14, Decimal("1.0000612481350587048292585451051353337474816961692")),
    Tuple(15, Decimal("1.0000305882363070204935517285106450625876279487069")),
    Tuple(16, Decimal("1.0000152822594086518717325714876367220232373889905")),
    Tuple(17, Decimal("1.0000076371976378997622736002935630292130882490903")),
    Tuple(18, Decimal("1.0000038172932649998398564616446219397304546972190")),
    Tuple(19, Decimal("1.0000019082127165539389256569577951013532585711448")),
    Tuple(20, Decimal("1.0000009539620338727961131520386834493459437941874")),
    Tuple(21, Decimal("1.0000004769329867878064631167196043730459664466948")),
    Tuple(22, Decimal("1.0000002384505027277329900036481867529949350418218")),
    Tuple(23, Decimal("1.0000001192199259653110730677887188823263872549978")),
    Tuple(24, Decimal("1.0000000596081890512594796124402079358012275039188")),
    Tuple(25, Decimal("1.0000000298035035146522801860637050693660118447309")),
    Tuple(26, Decimal("1.0000000149015548283650412346585066306986288647882")),
    Tuple(27, Decimal("1.0000000074507117898354294919810041706041194547190")),
    Tuple(28, Decimal("1.0000000037253340247884570548192040184024232328931")),
    Tuple(29, Decimal("1.0000000018626597235130490064039099454169480616653")),
    Tuple(30, Decimal("1.0000000009313274324196681828717647350212198135680")),
    Tuple(31, Decimal("1.0000000004656629065033784072989233251220071062692")),
    Tuple(32, Decimal("1.0000000002328311833676505492001455975940495024830")),
    Tuple(33, Decimal("1.0000000001164155017270051977592973835456309516522")),
    Tuple(34, Decimal("1.0000000000582077208790270088924368598910630541731")),
    Tuple(35, Decimal("1.0000000000291038504449709968692942522788404641070")),
    Tuple(36, Decimal("1.0000000000145519218910419842359296322453184209838")),
    Tuple(37, Decimal("1.0000000000072759598350574810145208690123380592649")),
    Tuple(38, Decimal("1.0000000000036379795473786511902372363558732735126")),
    Tuple(39, Decimal("1.0000000000018189896503070659475848321007300850306")),
    Tuple(40, Decimal("1.0000000000009094947840263889282533118386949087539")),
    Tuple(41, Decimal("1.0000000000004547473783042154026799112029488570339")),
    Tuple(42, Decimal("1.0000000000002273736845824652515226821577978691214")),
    Tuple(43, Decimal("1.0000000000001136868407680227849349104838025906437")),
    Tuple(44, Decimal("1.0000000000000568434198762758560927718296752406855")),
    Tuple(45, Decimal("1.0000000000000284217097688930185545507370494266207")),
    Tuple(46, Decimal("1.0000000000000142108548280316067698343071417395377")),
    Tuple(47, Decimal("1.0000000000000071054273952108527128773544799568000")),
    Tuple(48, Decimal("1.0000000000000035527136913371136732984695340593430")),
    Tuple(49, Decimal("1.0000000000000017763568435791203274733490144002796")),
    Tuple(50, Decimal("1.0000000000000008881784210930815903096091386391386")))))

make_entry(ID("809bc0"),
    Formula(LessEqual(Abs(RiemannZeta(s)), RiemannZeta(Re(s)))),
    Variables(s),
    Assumptions(And(Element(s, CC), Greater(Re(s), 1))))

make_entry(ID("3a5eb6"),
    Formula(Less(Abs(RiemannZeta(s)), 3 * Abs((1+s)/(1-s)) * Abs((1+s)/(2*Pi))**((1+eta-Re(s))/2) * RiemannZeta(1+eta))),
    Variables(s, eta),
    Assumptions(
        And(Element(s, CC), Element(eta, RR), NotEqual(s, 1), Element(eta, OpenClosedInterval(0, Div(1,2))), LessEqual(-eta, Re(s), 1 + eta))),
    References("H. Rademacher, Topics in analytic number theory, Springer, 1973. Equation 43.3."))

make_entry(ID("792f7b"),
    Formula(Equal(RiemannZeta(s),
        Sum(1/k**s, For(k, 1, N-1)) + N**(1-s)/(s-1) + 1/N**s * (Div(1,2) +
            Sum((BernoulliB(2*k) / Factorial(2*k)) * (RisingFactorial(s, 2*k-1) / N**(2*k-1)), For(k, 1, M))) -
                Integral((BernoulliPolynomial(2*M, t - Floor(t)) / Factorial(2 * M)) * (RisingFactorial(s, 2*M) / t**(s+2*M)), For(t, N, Infinity)))),
    Assumptions(And(Element(s, CC), NotEqual(s, 1), Element(N, ZZ), Element(M, ZZ), Greater(Re(s+2*M-1), 0), GreaterEqual(N, 1), GreaterEqual(M, 1))),
    Variables(s, N, M),
    References("F. Johansson (2015), Rigorous high-precision computation of the Hurwitz zeta function and its derivatives, Numerical Algorithms 69:253, DOI: 10.1007/s11075-014-9893-1",
        "F. W. J. Olver, Asymptotics and Special Functions, AK Peters, 1997. Chapter 8."))

make_entry(ID("d31b04"),
    Formula(LessEqual(Abs(RiemannZeta(s) -
        Parentheses(Sum(1/k**s, For(k, 1, N-1)) + N**(1-s)/(s-1) + 1/N**s * (Div(1,2) +
            Sum((BernoulliB(2*k) / Factorial(2*k)) * (RisingFactorial(s, 2*k-1) / N**(2*k-1)), For(k, 1, M))))),
        (4 * Abs(RisingFactorial(s, 2*M)) / (2*Pi)**(2*M)) * (N**(-Parentheses(Re(s)+2*M-1)) / (Re(s)+2*M-1)))),
    Assumptions(And(Element(s, CC), NotEqual(s, 1), Element(N, ZZ), Element(M, ZZ), Greater(Re(s+2*M-1), 0), GreaterEqual(N, 1), GreaterEqual(M, 1))),
    Variables(s, N, M),
    References("F. Johansson (2015), Rigorous high-precision computation of the Hurwitz zeta function and its derivatives, Numerical Algorithms 69:253, DOI: 10.1007/s11075-014-9893-1",
        "F. W. J. Olver, Asymptotics and Special Functions, AK Peters, 1997. Chapter 8."))

make_entry(ID("e37535"),
    Formula(Where(
        LessEqual(Abs((1-2**(1-s))*RiemannZeta(s) - Div(1,d(n)) * Sum(((-1)**k*(d(n)-d(k)))/(k+1)**s, For(k, 0, n-1))),
            (3*(1 + 2*Abs(Im(s)))/(3+Sqrt(8))**n) * Exp(Abs(Im(s))*Pi/2)),
            Equal(d(k), n*Sum(Factorial(n+i-1)*4**i/(Factorial(n-i)*Factorial(2*i)), For(i, 0, k))))),
    Variables(s, n),
    Assumptions(And(Element(s, CC), GreaterEqual(Re(s), Div(1,2)), NotEqual(s, 1), Element(n, ZZGreaterEqual(1)))),
    References("P. Borwein. An efficient algorithm for the Riemann zeta function. Canadian Mathematical Society Conference Proceedings, vol. 27, pp. 29-34. 2000.")
    )

make_entry(ID("69348a"),
    Formula(Equal(RiemannZeta(Conjugate(s)), Conjugate(RiemannZeta(s)))),
    Variables(s),
    Assumptions(And(Element(s, CC), NotEqual(s, 1))))

make_entry(ID("8b5ddb"),
    Formula(IsHolomorphic(RiemannZeta(s), ForElement(s, SetMinus(CC, Set(1))))))

make_entry(ID("52c4ab"),
    Formula(Equal(Poles(RiemannZeta(s), ForElement(s, Union(CC, Set(UnsignedInfinity)))), Set(1))))

make_entry(ID("fdb94b"),
    Formula(Equal(EssentialSingularities(RiemannZeta(s), s, Union(CC, Set(UnsignedInfinity))), Set(UnsignedInfinity))))

make_entry(ID("36a095"),
    Formula(Equal(BranchPoints(RiemannZeta(s), s, Union(CC, Set(UnsignedInfinity))), Set())))

make_entry(ID("9a258f"),
    Formula(Equal(BranchCuts(RiemannZeta(s), s, Union(CC)), Set())))

make_entry(ID("2e1ff3"),
    Formula(Equal(Zeros(RiemannZeta(s), ForElement(s, RR)), Set(-(2*n), ForElement(n, ZZGreaterEqual(1))))))

make_entry(ID("a78abc"),
    Formula(Equal(Zeros(RiemannZeta(s), ForElement(s, CC), LessEqual(0, Re(s), 1)), Set(RiemannZetaZero(n), For(n), And(Element(n, ZZ), NotEqual(n, 0))))))

make_entry(ID("692e42"),
    Formula(Equal(Zeros(RiemannZeta(s), ForElement(s, CC)), Union(Set(-(2*n), ForElement(n, ZZGreaterEqual(1))),
        Set(RiemannZetaZero(n), For(n), And(Element(n, ZZ), NotEqual(n, 0)))))))

make_entry(ID("cbbf16"),
    Formula(Less(0, Re(RiemannZetaZero(n)), 1)),
    Variables(n),
    Assumptions(And(Element(n, ZZ), NotEqual(n, 0))))

make_entry(ID("60c2ec"),
    Formula(Equal(RiemannZetaZero(-n), Conjugate(RiemannZetaZero(n)))),
    Variables(n),
    Assumptions(And(Element(n, ZZ), NotEqual(n, 0))))

make_entry(ID("e6ff64"),
    Formula(Equal(Re(RiemannZetaZero(n)), Div(1,2))),
    Variables(n),
    Assumptions(And(Element(n, ZZ), NotEqual(n, 0), Or(Less(Abs(n), 103800788359), RiemannHypothesis))),
    References("D. J. Platt (2016), Isolating some non-trivial zeros of zeta, Mathematics of Computation 86(307):1, DOI: 10.1090/mcom/3198"))

make_entry(ID("945fa5"),
    Formula(Element(RiemannZetaZero(1),
        Div(1,2) + RealBall(Decimal("14.134725141734693790457251983562470270784257115699"), Decimal("2.44e-49")) * ConstI)))

make_entry(ID("c0ae99"),
    Formula(Element(RiemannZetaZero(2),
        Div(1,2) + RealBall(Decimal("21.022039638771554992628479593896902777334340524903"), Decimal("2.19e-49")) * ConstI)))

make_entry(ID("dc558b"),
    Description("Table of", Im(RiemannZetaZero(n)), "to 10 digits for", LessEqual(1, n, 500)),
    Table(TableRelation(Tuple(n, y), And(Equal(Re(RiemannZetaZero(n)), Div(1,2)), Equal(NearestDecimal(Im(RiemannZetaZero(n)), 10), y))),
      TableHeadings(n, Im(RiemannZetaZero(n))), TableSplit(5),
      List(
    Tuple(1, Decimal("14.13472514")),
    Tuple(2, Decimal("21.02203964")),
    Tuple(3, Decimal("25.01085758")),
    Tuple(4, Decimal("30.42487613")),
    Tuple(5, Decimal("32.93506159")),
    Tuple(6, Decimal("37.58617816")),
    Tuple(7, Decimal("40.91871901")),
    Tuple(8, Decimal("43.32707328")),
    Tuple(9, Decimal("48.00515088")),
    Tuple(10, Decimal("49.77383248")),
    Tuple(11, Decimal("52.97032148")),
    Tuple(12, Decimal("56.44624770")),
    Tuple(13, Decimal("59.34704400")),
    Tuple(14, Decimal("60.83177852")),
    Tuple(15, Decimal("65.11254405")),
    Tuple(16, Decimal("67.07981053")),
    Tuple(17, Decimal("69.54640171")),
    Tuple(18, Decimal("72.06715767")),
    Tuple(19, Decimal("75.70469070")),
    Tuple(20, Decimal("77.14484007")),
    Tuple(21, Decimal("79.33737502")),
    Tuple(22, Decimal("82.91038085")),
    Tuple(23, Decimal("84.73549298")),
    Tuple(24, Decimal("87.42527461")),
    Tuple(25, Decimal("88.80911121")),
    Tuple(26, Decimal("92.49189927")),
    Tuple(27, Decimal("94.65134404")),
    Tuple(28, Decimal("95.87063423")),
    Tuple(29, Decimal("98.83119422")),
    Tuple(30, Decimal("101.3178510")),
    Tuple(31, Decimal("103.7255380")),
    Tuple(32, Decimal("105.4466231")),
    Tuple(33, Decimal("107.1686112")),
    Tuple(34, Decimal("111.0295355")),
    Tuple(35, Decimal("111.8746592")),
    Tuple(36, Decimal("114.3202209")),
    Tuple(37, Decimal("116.2266803")),
    Tuple(38, Decimal("118.7907829")),
    Tuple(39, Decimal("121.3701250")),
    Tuple(40, Decimal("122.9468293")),
    Tuple(41, Decimal("124.2568186")),
    Tuple(42, Decimal("127.5166839")),
    Tuple(43, Decimal("129.5787042")),
    Tuple(44, Decimal("131.0876885")),
    Tuple(45, Decimal("133.4977372")),
    Tuple(46, Decimal("134.7565098")),
    Tuple(47, Decimal("138.1160421")),
    Tuple(48, Decimal("139.7362090")),
    Tuple(49, Decimal("141.1237074")),
    Tuple(50, Decimal("143.1118458")),
    Tuple(51, Decimal("146.0009825")),
    Tuple(52, Decimal("147.4227653")),
    Tuple(53, Decimal("150.0535204")),
    Tuple(54, Decimal("150.9252576")),
    Tuple(55, Decimal("153.0246938")),
    Tuple(56, Decimal("156.1129093")),
    Tuple(57, Decimal("157.5975918")),
    Tuple(58, Decimal("158.8499882")),
    Tuple(59, Decimal("161.1889641")),
    Tuple(60, Decimal("163.0307097")),
    Tuple(61, Decimal("165.5370692")),
    Tuple(62, Decimal("167.1844400")),
    Tuple(63, Decimal("169.0945154")),
    Tuple(64, Decimal("169.9119765")),
    Tuple(65, Decimal("173.4115365")),
    Tuple(66, Decimal("174.7541915")),
    Tuple(67, Decimal("176.4414343")),
    Tuple(68, Decimal("178.3774078")),
    Tuple(69, Decimal("179.9164840")),
    Tuple(70, Decimal("182.2070785")),
    Tuple(71, Decimal("184.8744678")),
    Tuple(72, Decimal("185.5987837")),
    Tuple(73, Decimal("187.2289226")),
    Tuple(74, Decimal("189.4161587")),
    Tuple(75, Decimal("192.0266564")),
    Tuple(76, Decimal("193.0797266")),
    Tuple(77, Decimal("195.2653967")),
    Tuple(78, Decimal("196.8764818")),
    Tuple(79, Decimal("198.0153097")),
    Tuple(80, Decimal("201.2647519")),
    Tuple(81, Decimal("202.4935945")),
    Tuple(82, Decimal("204.1896718")),
    Tuple(83, Decimal("205.3946972")),
    Tuple(84, Decimal("207.9062589")),
    Tuple(85, Decimal("209.5765097")),
    Tuple(86, Decimal("211.6908626")),
    Tuple(87, Decimal("213.3479194")),
    Tuple(88, Decimal("214.5470448")),
    Tuple(89, Decimal("216.1695385")),
    Tuple(90, Decimal("219.0675963")),
    Tuple(91, Decimal("220.7149188")),
    Tuple(92, Decimal("221.4307056")),
    Tuple(93, Decimal("224.0070003")),
    Tuple(94, Decimal("224.9833247")),
    Tuple(95, Decimal("227.4214443")),
    Tuple(96, Decimal("229.3374133")),
    Tuple(97, Decimal("231.2501887")),
    Tuple(98, Decimal("231.9872353")),
    Tuple(99, Decimal("233.6934042")),
    Tuple(100, Decimal("236.5242297")),
    Tuple(101, Decimal("237.7698205")),
    Tuple(102, Decimal("239.5554776")),
    Tuple(103, Decimal("241.0491578")),
    Tuple(104, Decimal("242.8232719")),
    Tuple(105, Decimal("244.0708985")),
    Tuple(106, Decimal("247.1369901")),
    Tuple(107, Decimal("248.1019901")),
    Tuple(108, Decimal("249.5736896")),
    Tuple(109, Decimal("251.0149478")),
    Tuple(110, Decimal("253.0699867")),
    Tuple(111, Decimal("255.3062565")),
    Tuple(112, Decimal("256.3807137")),
    Tuple(113, Decimal("258.6104395")),
    Tuple(114, Decimal("259.8744070")),
    Tuple(115, Decimal("260.8050845")),
    Tuple(116, Decimal("263.5738939")),
    Tuple(117, Decimal("265.5578518")),
    Tuple(118, Decimal("266.6149738")),
    Tuple(119, Decimal("267.9219151")),
    Tuple(120, Decimal("269.9704490")),
    Tuple(121, Decimal("271.4940556")),
    Tuple(122, Decimal("273.4596092")),
    Tuple(123, Decimal("275.5874926")),
    Tuple(124, Decimal("276.4520495")),
    Tuple(125, Decimal("278.2507435")),
    Tuple(126, Decimal("279.2292509")),
    Tuple(127, Decimal("282.4651148")),
    Tuple(128, Decimal("283.2111857")),
    Tuple(129, Decimal("284.8359640")),
    Tuple(130, Decimal("286.6674454")),
    Tuple(131, Decimal("287.9119205")),
    Tuple(132, Decimal("289.5798549")),
    Tuple(133, Decimal("291.8462913")),
    Tuple(134, Decimal("293.5584341")),
    Tuple(135, Decimal("294.9653696")),
    Tuple(136, Decimal("295.5732549")),
    Tuple(137, Decimal("297.9792771")),
    Tuple(138, Decimal("299.8403261")),
    Tuple(139, Decimal("301.6493255")),
    Tuple(140, Decimal("302.6967496")),
    Tuple(141, Decimal("304.8643713")),
    Tuple(142, Decimal("305.7289126")),
    Tuple(143, Decimal("307.2194961")),
    Tuple(144, Decimal("310.1094631")),
    Tuple(145, Decimal("311.1651415")),
    Tuple(146, Decimal("312.4278012")),
    Tuple(147, Decimal("313.9852857")),
    Tuple(148, Decimal("315.4756161")),
    Tuple(149, Decimal("317.7348059")),
    Tuple(150, Decimal("318.8531043")),
    Tuple(151, Decimal("321.1601343")),
    Tuple(152, Decimal("322.1445587")),
    Tuple(153, Decimal("323.4669696")),
    Tuple(154, Decimal("324.8628661")),
    Tuple(155, Decimal("327.4439013")),
    Tuple(156, Decimal("329.0330717")),
    Tuple(157, Decimal("329.9532397")),
    Tuple(158, Decimal("331.4744676")),
    Tuple(159, Decimal("333.6453785")),
    Tuple(160, Decimal("334.2113548")),
    Tuple(161, Decimal("336.8418504")),
    Tuple(162, Decimal("338.3399929")),
    Tuple(163, Decimal("339.8582167")),
    Tuple(164, Decimal("341.0422611")),
    Tuple(165, Decimal("342.0548775")),
    Tuple(166, Decimal("344.6617029")),
    Tuple(167, Decimal("346.3478706")),
    Tuple(168, Decimal("347.2726776")),
    Tuple(169, Decimal("349.3162609")),
    Tuple(170, Decimal("350.4084193")),
    Tuple(171, Decimal("351.8786490")),
    Tuple(172, Decimal("353.4889005")),
    Tuple(173, Decimal("356.0175750")),
    Tuple(174, Decimal("357.1513023")),
    Tuple(175, Decimal("357.9526851")),
    Tuple(176, Decimal("359.7437550")),
    Tuple(177, Decimal("361.2893617")),
    Tuple(178, Decimal("363.3313306")),
    Tuple(179, Decimal("364.7360241")),
    Tuple(180, Decimal("366.2127103")),
    Tuple(181, Decimal("367.9935755")),
    Tuple(182, Decimal("368.9684381")),
    Tuple(183, Decimal("370.0509192")),
    Tuple(184, Decimal("373.0619284")),
    Tuple(185, Decimal("373.8648739")),
    Tuple(186, Decimal("375.8259128")),
    Tuple(187, Decimal("376.3240922")),
    Tuple(188, Decimal("378.4366802")),
    Tuple(189, Decimal("379.8729753")),
    Tuple(190, Decimal("381.4844686")),
    Tuple(191, Decimal("383.4435294")),
    Tuple(192, Decimal("384.9561168")),
    Tuple(193, Decimal("385.8613008")),
    Tuple(194, Decimal("387.2228902")),
    Tuple(195, Decimal("388.8461284")),
    Tuple(196, Decimal("391.4560836")),
    Tuple(197, Decimal("392.2450833")),
    Tuple(198, Decimal("393.4277438")),
    Tuple(199, Decimal("395.5828700")),
    Tuple(200, Decimal("396.3818542")),
    Tuple(201, Decimal("397.9187362")),
    Tuple(202, Decimal("399.9851199")),
    Tuple(203, Decimal("401.8392286")),
    Tuple(204, Decimal("402.8619178")),
    Tuple(205, Decimal("404.2364418")),
    Tuple(206, Decimal("405.1343875")),
    Tuple(207, Decimal("407.5814604")),
    Tuple(208, Decimal("408.9472455")),
    Tuple(209, Decimal("410.5138692")),
    Tuple(210, Decimal("411.9722678")),
    Tuple(211, Decimal("413.2627361")),
    Tuple(212, Decimal("415.0188098")),
    Tuple(213, Decimal("415.4552150")),
    Tuple(214, Decimal("418.3877058")),
    Tuple(215, Decimal("419.8613648")),
    Tuple(216, Decimal("420.6438276")),
    Tuple(217, Decimal("422.0767101")),
    Tuple(218, Decimal("423.7165796")),
    Tuple(219, Decimal("425.0698825")),
    Tuple(220, Decimal("427.2088251")),
    Tuple(221, Decimal("428.1279141")),
    Tuple(222, Decimal("430.3287454")),
    Tuple(223, Decimal("431.3013069")),
    Tuple(224, Decimal("432.1386417")),
    Tuple(225, Decimal("433.8892185")),
    Tuple(226, Decimal("436.1610064")),
    Tuple(227, Decimal("437.5816982")),
    Tuple(228, Decimal("438.6217387")),
    Tuple(229, Decimal("439.9184422")),
    Tuple(230, Decimal("441.6831992")),
    Tuple(231, Decimal("442.9045463")),
    Tuple(232, Decimal("444.3193363")),
    Tuple(233, Decimal("446.8606227")),
    Tuple(234, Decimal("447.4417042")),
    Tuple(235, Decimal("449.1485457")),
    Tuple(236, Decimal("450.1269458")),
    Tuple(237, Decimal("451.4033084")),
    Tuple(238, Decimal("453.9867378")),
    Tuple(239, Decimal("454.9746838")),
    Tuple(240, Decimal("456.3284267")),
    Tuple(241, Decimal("457.9038931")),
    Tuple(242, Decimal("459.5134153")),
    Tuple(243, Decimal("460.0879444")),
    Tuple(244, Decimal("462.0653673")),
    Tuple(245, Decimal("464.0572869")),
    Tuple(246, Decimal("465.6715392")),
    Tuple(247, Decimal("466.5702869")),
    Tuple(248, Decimal("467.4390462")),
    Tuple(249, Decimal("469.5360046")),
    Tuple(250, Decimal("470.7736555")),
    Tuple(251, Decimal("472.7991747")),
    Tuple(252, Decimal("473.8352323")),
    Tuple(253, Decimal("475.6003394")),
    Tuple(254, Decimal("476.7690152")),
    Tuple(255, Decimal("478.0752638")),
    Tuple(256, Decimal("478.9421815")),
    Tuple(257, Decimal("481.8303394")),
    Tuple(258, Decimal("482.8347828")),
    Tuple(259, Decimal("483.8514272")),
    Tuple(260, Decimal("485.5391481")),
    Tuple(261, Decimal("486.5287183")),
    Tuple(262, Decimal("488.3805671")),
    Tuple(263, Decimal("489.6617616")),
    Tuple(264, Decimal("491.3988216")),
    Tuple(265, Decimal("493.3144416")),
    Tuple(266, Decimal("493.9579978")),
    Tuple(267, Decimal("495.3588288")),
    Tuple(268, Decimal("496.4296962")),
    Tuple(269, Decimal("498.5807824")),
    Tuple(270, Decimal("500.3090849")),
    Tuple(271, Decimal("501.6044470")),
    Tuple(272, Decimal("502.2762703")),
    Tuple(273, Decimal("504.4997733")),
    Tuple(274, Decimal("505.4152317")),
    Tuple(275, Decimal("506.4641527")),
    Tuple(276, Decimal("508.8007003")),
    Tuple(277, Decimal("510.2642279")),
    Tuple(278, Decimal("511.5622897")),
    Tuple(279, Decimal("512.6231445")),
    Tuple(280, Decimal("513.6689856")),
    Tuple(281, Decimal("515.4350572")),
    Tuple(282, Decimal("517.5896686")),
    Tuple(283, Decimal("518.2342231")),
    Tuple(284, Decimal("520.1063104")),
    Tuple(285, Decimal("521.5251934")),
    Tuple(286, Decimal("522.4566962")),
    Tuple(287, Decimal("523.9605309")),
    Tuple(288, Decimal("525.0773857")),
    Tuple(289, Decimal("527.9036416")),
    Tuple(290, Decimal("528.4062139")),
    Tuple(291, Decimal("529.8062263")),
    Tuple(292, Decimal("530.8669179")),
    Tuple(293, Decimal("532.6881830")),
    Tuple(294, Decimal("533.7796308")),
    Tuple(295, Decimal("535.6643141")),
    Tuple(296, Decimal("537.0697591")),
    Tuple(297, Decimal("538.4285262")),
    Tuple(298, Decimal("540.2131664")),
    Tuple(299, Decimal("540.6313902")),
    Tuple(300, Decimal("541.8474371")),
    Tuple(301, Decimal("544.3238901")),
    Tuple(302, Decimal("545.6368332")),
    Tuple(303, Decimal("547.0109121")),
    Tuple(304, Decimal("547.9316134")),
    Tuple(305, Decimal("549.4975676")),
    Tuple(306, Decimal("550.9700100")),
    Tuple(307, Decimal("552.0495722")),
    Tuple(308, Decimal("553.7649721")),
    Tuple(309, Decimal("555.7920206")),
    Tuple(310, Decimal("556.8994764")),
    Tuple(311, Decimal("557.5646592")),
    Tuple(312, Decimal("559.3162370")),
    Tuple(313, Decimal("560.2408075")),
    Tuple(314, Decimal("562.5592076")),
    Tuple(315, Decimal("564.1608791")),
    Tuple(316, Decimal("564.5060559")),
    Tuple(317, Decimal("566.6987877")),
    Tuple(318, Decimal("567.7317579")),
    Tuple(319, Decimal("568.9239552")),
    Tuple(320, Decimal("570.0511148")),
    Tuple(321, Decimal("572.4199841")),
    Tuple(322, Decimal("573.6146105")),
    Tuple(323, Decimal("575.0938860")),
    Tuple(324, Decimal("575.8072471")),
    Tuple(325, Decimal("577.0390035")),
    Tuple(326, Decimal("579.0988347")),
    Tuple(327, Decimal("580.1369594")),
    Tuple(328, Decimal("581.9465763")),
    Tuple(329, Decimal("583.2360882")),
    Tuple(330, Decimal("584.5617059")),
    Tuple(331, Decimal("585.9845632")),
    Tuple(332, Decimal("586.7427719")),
    Tuple(333, Decimal("588.1396633")),
    Tuple(334, Decimal("590.6603975")),
    Tuple(335, Decimal("591.7258581")),
    Tuple(336, Decimal("592.5713583")),
    Tuple(337, Decimal("593.9747147")),
    Tuple(338, Decimal("595.7281537")),
    Tuple(339, Decimal("596.3627683")),
    Tuple(340, Decimal("598.4930773")),
    Tuple(341, Decimal("599.5456404")),
    Tuple(342, Decimal("601.6021367")),
    Tuple(343, Decimal("602.5791679")),
    Tuple(344, Decimal("603.6256189")),
    Tuple(345, Decimal("604.6162185")),
    Tuple(346, Decimal("606.3834604")),
    Tuple(347, Decimal("608.4132173")),
    Tuple(348, Decimal("609.3895752")),
    Tuple(349, Decimal("610.8391629")),
    Tuple(350, Decimal("611.7742096")),
    Tuple(351, Decimal("613.5997787")),
    Tuple(352, Decimal("614.6462379")),
    Tuple(353, Decimal("615.5385634")),
    Tuple(354, Decimal("618.1128314")),
    Tuple(355, Decimal("619.1844826")),
    Tuple(356, Decimal("620.2728937")),
    Tuple(357, Decimal("621.7092945")),
    Tuple(358, Decimal("622.3750027")),
    Tuple(359, Decimal("624.2699000")),
    Tuple(360, Decimal("626.0192834")),
    Tuple(361, Decimal("627.2683969")),
    Tuple(362, Decimal("628.3258624")),
    Tuple(363, Decimal("630.4738874")),
    Tuple(364, Decimal("630.8057809")),
    Tuple(365, Decimal("632.2251412")),
    Tuple(366, Decimal("633.5468583")),
    Tuple(367, Decimal("635.5238003")),
    Tuple(368, Decimal("637.3971932")),
    Tuple(369, Decimal("637.9255140")),
    Tuple(370, Decimal("638.9279383")),
    Tuple(371, Decimal("640.6947947")),
    Tuple(372, Decimal("641.9454997")),
    Tuple(373, Decimal("643.2788838")),
    Tuple(374, Decimal("644.9905782")),
    Tuple(375, Decimal("646.3481916")),
    Tuple(376, Decimal("647.7617530")),
    Tuple(377, Decimal("648.7864009")),
    Tuple(378, Decimal("650.1975193")),
    Tuple(379, Decimal("650.6686839")),
    Tuple(380, Decimal("653.6495716")),
    Tuple(381, Decimal("654.3019206")),
    Tuple(382, Decimal("655.7094630")),
    Tuple(383, Decimal("656.9640846")),
    Tuple(384, Decimal("658.1756144")),
    Tuple(385, Decimal("659.6638460")),
    Tuple(386, Decimal("660.7167326")),
    Tuple(387, Decimal("662.2965864")),
    Tuple(388, Decimal("664.2446047")),
    Tuple(389, Decimal("665.3427631")),
    Tuple(390, Decimal("666.5151477")),
    Tuple(391, Decimal("667.1484949")),
    Tuple(392, Decimal("668.9758488")),
    Tuple(393, Decimal("670.3235852")),
    Tuple(394, Decimal("672.4581836")),
    Tuple(395, Decimal("673.0435783")),
    Tuple(396, Decimal("674.3558978")),
    Tuple(397, Decimal("676.1396744")),
    Tuple(398, Decimal("677.2301807")),
    Tuple(399, Decimal("677.8004447")),
    Tuple(400, Decimal("679.7421979")),
    Tuple(401, Decimal("681.8949915")),
    Tuple(402, Decimal("682.6027350")),
    Tuple(403, Decimal("684.0135498")),
    Tuple(404, Decimal("684.9726299")),
    Tuple(405, Decimal("686.1632236")),
    Tuple(406, Decimal("687.9615432")),
    Tuple(407, Decimal("689.3689414")),
    Tuple(408, Decimal("690.4747350")),
    Tuple(409, Decimal("692.4516844")),
    Tuple(410, Decimal("693.1769701")),
    Tuple(411, Decimal("694.5339087")),
    Tuple(412, Decimal("695.7263359")),
    Tuple(413, Decimal("696.6260699")),
    Tuple(414, Decimal("699.1320955")),
    Tuple(415, Decimal("700.2967391")),
    Tuple(416, Decimal("701.3017430")),
    Tuple(417, Decimal("702.2273431")),
    Tuple(418, Decimal("704.0338393")),
    Tuple(419, Decimal("705.1258140")),
    Tuple(420, Decimal("706.1846548")),
    Tuple(421, Decimal("708.2690709")),
    Tuple(422, Decimal("709.2295886")),
    Tuple(423, Decimal("711.1302742")),
    Tuple(424, Decimal("711.9002899")),
    Tuple(425, Decimal("712.7493835")),
    Tuple(426, Decimal("714.0827718")),
    Tuple(427, Decimal("716.1123965")),
    Tuple(428, Decimal("717.4825697")),
    Tuple(429, Decimal("718.7427865")),
    Tuple(430, Decimal("719.6971010")),
    Tuple(431, Decimal("721.3511622")),
    Tuple(432, Decimal("722.2775050")),
    Tuple(433, Decimal("723.8458210")),
    Tuple(434, Decimal("724.5626139")),
    Tuple(435, Decimal("727.0564032")),
    Tuple(436, Decimal("728.4054816")),
    Tuple(437, Decimal("728.7587498")),
    Tuple(438, Decimal("730.4164821")),
    Tuple(439, Decimal("731.4173549")),
    Tuple(440, Decimal("732.8180527")),
    Tuple(441, Decimal("734.7896433")),
    Tuple(442, Decimal("735.7654592")),
    Tuple(443, Decimal("737.0529289")),
    Tuple(444, Decimal("738.5804212")),
    Tuple(445, Decimal("739.9095237")),
    Tuple(446, Decimal("740.5738074")),
    Tuple(447, Decimal("741.7573356")),
    Tuple(448, Decimal("743.8950131")),
    Tuple(449, Decimal("745.3449896")),
    Tuple(450, Decimal("746.4993059")),
    Tuple(451, Decimal("747.6745636")),
    Tuple(452, Decimal("748.2427545")),
    Tuple(453, Decimal("750.6559504")),
    Tuple(454, Decimal("750.9663811")),
    Tuple(455, Decimal("752.8876216")),
    Tuple(456, Decimal("754.3223705")),
    Tuple(457, Decimal("755.8393090")),
    Tuple(458, Decimal("756.7682484")),
    Tuple(459, Decimal("758.1017292")),
    Tuple(460, Decimal("758.9002382")),
    Tuple(461, Decimal("760.2823670")),
    Tuple(462, Decimal("762.7000332")),
    Tuple(463, Decimal("763.5930662")),
    Tuple(464, Decimal("764.3075227")),
    Tuple(465, Decimal("766.0875401")),
    Tuple(466, Decimal("767.2184722")),
    Tuple(467, Decimal("768.2814618")),
    Tuple(468, Decimal("769.6934073")),
    Tuple(469, Decimal("771.0708393")),
    Tuple(470, Decimal("772.9616176")),
    Tuple(471, Decimal("774.1177446")),
    Tuple(472, Decimal("775.0478471")),
    Tuple(473, Decimal("775.9997120")),
    Tuple(474, Decimal("777.2997485")),
    Tuple(475, Decimal("779.1570769")),
    Tuple(476, Decimal("780.3489250")),
    Tuple(477, Decimal("782.1376644")),
    Tuple(478, Decimal("782.5979439")),
    Tuple(479, Decimal("784.2888226")),
    Tuple(480, Decimal("785.7390897")),
    Tuple(481, Decimal("786.4611475")),
    Tuple(482, Decimal("787.4684638")),
    Tuple(483, Decimal("790.0590924")),
    Tuple(484, Decimal("790.8316205")),
    Tuple(485, Decimal("792.4277076")),
    Tuple(486, Decimal("792.8886526")),
    Tuple(487, Decimal("794.4837919")),
    Tuple(488, Decimal("795.6065962")),
    Tuple(489, Decimal("797.2634700")),
    Tuple(490, Decimal("798.7075702")),
    Tuple(491, Decimal("799.6543362")),
    Tuple(492, Decimal("801.6042465")),
    Tuple(493, Decimal("802.5419849")),
    Tuple(494, Decimal("803.2430962")),
    Tuple(495, Decimal("804.7622391")),
    Tuple(496, Decimal("805.8616357")),
    Tuple(497, Decimal("808.1518149")),
    Tuple(498, Decimal("809.1977834")),
    Tuple(499, Decimal("810.0818049")),
    Tuple(500, Decimal("811.1843588")))))

make_entry(ID("2e1cc7"),
    Description("Table of", Im(RiemannZetaZero(10**n)), "to 50 digits for", LessEqual(0, n, 16)),
    Table(
      Var(n),
      TableValueHeadings(n, NearestDecimal(Im(RiemannZetaZero(10**n)), 50)),
      TableSplit(1),
      List(
      Tuple(0, Decimal("14.134725141734693790457251983562470270784257115699")),
      Tuple(1, Decimal("49.773832477672302181916784678563724057723178299677")),
      Tuple(2, Decimal("236.52422966581620580247550795566297868952949521219")),
      Tuple(3, Decimal("1419.4224809459956864659890380799168192321006010642")),
      Tuple(4, Decimal("9877.7826540055011427740990706901235776224680517811")),
      Tuple(5, Decimal("74920.827498994186793849200946918346620223555216802")),
      Tuple(6, Decimal("600269.67701244495552123391427049074396819125790619")),
      Tuple(7, Decimal("4992381.0140031786660182508391600932712387635814368")),
      Tuple(8, Decimal("42653549.760951553903050309232819667982595130452178")),
      Tuple(9, Decimal("371870203.83702805273405479598662519100082698522485")),
      Tuple(10, Decimal("3293531632.3971367042089917031338769677069644102625")),
      Tuple(11, Decimal("29538618431.613072810689561192671546108506486777642")),
      Tuple(12, Decimal("267653395648.62594824214264940920070899588029633790")),
      Tuple(13, Decimal("2445999556030.2468813938032396773514175248139258741")),
      Tuple(14, Decimal("22514484222485.729124253904444090280880182979014905")),
      Tuple(15, Decimal("208514052006405.46942460229754774510609948399247941")),
      Tuple(16, Decimal("1941393531395154.7112809113883108073327538053720311")))))

make_entry(ID("71d9d9"),
    Description("Table of", Im(RiemannZetaZero(n)), "to 50 digits for", LessEqual(1, n, 50)),
    Table(
      Var(n),
      TableValueHeadings(n, NearestDecimal(Im(RiemannZetaZero(n)), 50)),
      TableSplit(1),
      List(
    Tuple(1, Decimal("14.134725141734693790457251983562470270784257115699")),
    Tuple(2, Decimal("21.022039638771554992628479593896902777334340524903")),
    Tuple(3, Decimal("25.010857580145688763213790992562821818659549672558")),
    Tuple(4, Decimal("30.424876125859513210311897530584091320181560023715")),
    Tuple(5, Decimal("32.935061587739189690662368964074903488812715603517")),
    Tuple(6, Decimal("37.586178158825671257217763480705332821405597350831")),
    Tuple(7, Decimal("40.918719012147495187398126914633254395726165962777")),
    Tuple(8, Decimal("43.327073280914999519496122165406805782645668371837")),
    Tuple(9, Decimal("48.005150881167159727942472749427516041686844001144")),
    Tuple(10, Decimal("49.773832477672302181916784678563724057723178299677")),
    Tuple(11, Decimal("52.970321477714460644147296608880990063825017888821")),
    Tuple(12, Decimal("56.446247697063394804367759476706127552782264471717")),
    Tuple(13, Decimal("59.347044002602353079653648674992219031098772806467")),
    Tuple(14, Decimal("60.831778524609809844259901824524003802910090451219")),
    Tuple(15, Decimal("65.112544048081606660875054253183705029348149295167")),
    Tuple(16, Decimal("67.079810529494173714478828896522216770107144951746")),
    Tuple(17, Decimal("69.546401711173979252926857526554738443012474209603")),
    Tuple(18, Decimal("72.067157674481907582522107969826168390480906621457")),
    Tuple(19, Decimal("75.704690699083933168326916762030345922811903530697")),
    Tuple(20, Decimal("77.144840068874805372682664856304637015796032449234")),
    Tuple(21, Decimal("79.337375020249367922763592877116228190613246743120")),
    Tuple(22, Decimal("82.910380854086030183164837494770609497508880593782")),
    Tuple(23, Decimal("84.735492980517050105735311206827741417106627934241")),
    Tuple(24, Decimal("87.425274613125229406531667850919213252171886401269")),
    Tuple(25, Decimal("88.809111207634465423682348079509378395444893409819")),
    Tuple(26, Decimal("92.491899270558484296259725241810684878721794027731")),
    Tuple(27, Decimal("94.651344040519886966597925815208153937728027015655")),
    Tuple(28, Decimal("95.870634228245309758741029219246781695256461224988")),
    Tuple(29, Decimal("98.831194218193692233324420138622327820658039063428")),
    Tuple(30, Decimal("101.31785100573139122878544794029230890633286638430")),
    Tuple(31, Decimal("103.72553804047833941639840810869528083448117306950")),
    Tuple(32, Decimal("105.44662305232609449367083241411180899728275392854")),
    Tuple(33, Decimal("107.16861118427640751512335196308619121347670788140")),
    Tuple(34, Decimal("111.02953554316967452465645030994435041534596839007")),
    Tuple(35, Decimal("111.87465917699263708561207871677059496031174987339")),
    Tuple(36, Decimal("114.32022091545271276589093727619107980991765772383")),
    Tuple(37, Decimal("116.22668032085755438216080431206475512732985123238")),
    Tuple(38, Decimal("118.79078286597621732297913970269982434730621059281")),
    Tuple(39, Decimal("121.37012500242064591894553297049992272300131063173")),
    Tuple(40, Decimal("122.94682929355258820081746033077001649621438987386")),
    Tuple(41, Decimal("124.25681855434576718473200796612992444157353877469")),
    Tuple(42, Decimal("127.51668387959649512427932376690607626808830988155")),
    Tuple(43, Decimal("129.57870419995605098576803390617997360864095326466")),
    Tuple(44, Decimal("131.08768853093265672356637246150134905920354750298")),
    Tuple(45, Decimal("133.49773720299758645013049204264060766497417494390")),
    Tuple(46, Decimal("134.75650975337387133132606415716973617839606861365")),
    Tuple(47, Decimal("138.11604205453344320019155519028244785983527462415")),
    Tuple(48, Decimal("139.73620895212138895045004652338246084679005256538")),
    Tuple(49, Decimal("141.12370740402112376194035381847535509030066087975")),
    Tuple(50, Decimal("143.11184580762063273940512386891392996623310243035")))))

def_Topic(
    Title("Riemann hypothesis"),
    Section("Definitions"),
    Entries(
        "c03de4",
    ),
    Section("Formal statement"),
    Description("Related topics:",
        TopicReference("Riemann zeta function"), ",",
        TopicReference("Zeros of the Riemann zeta function"),
    ),
    Entries(
        "9fa2a1",
        "49704a",
    ),
    Section("Statements equivalent to the Riemann hypothesis"),
    Subsection("Prime counting function"),
    Description("Related topic:",
        TopicReference("Prime numbers"),
    ),
    Entries(
        "bfaeb5",
    ),
    Subsection("Robin's criterion"),
    Entries(
        "3142ec",
        "e4287f",
    ),
    Subsection("Li's criterion"),
    Description("Related topic:", TopicReference("Keiper-Li coefficients")),
    Entries(
        "e68f82",
        "a5d65f",
    ),
    Subsection("Landau's function"),
    Description("Related topic:", TopicReference("Landau's function")),
    Entries(
        "65fa9f",      ),
    Subsection("Definite integrals"),
    Entries(
        "7783f9",
        "cf70ce",
    ),
    Subsection("De Bruijn-Newman constant"),
    Entries(
        "22ab47",
        "a71ddd",
    ),
    Section("Formulas conditional on the Riemann hypothesis"),
    Entries(
        "e6ff64",
        "375afe",
    ),
    Section("Generalizations"),
    Description("Related topic:",
        TopicReference("Dirichlet L-functions"),
    ),
    Entries(
        "dc593e",
        "e2a734",
    ),
)

make_entry(ID("c03de4"),
    SymbolDefinition(RiemannHypothesis, RiemannHypothesis, "Riemann hypothesis"),
    Description("Represents the truth value of the Riemann hypothesis, defined in ", EntryReference("49704a"), "."),
    Description("Semantically, ", Element(RiemannHypothesis, Set(True_, False_)), "."),
    Description("This symbol can be used in an assumption to express that a formula is valid conditionally on the truth of the Riemann hypothesis."))

make_entry(ID("9fa2a1"),
    Formula(Equivalent(RiemannHypothesis, All(Equal(Re(s), Div(1,2)), ForElement(s, CC), And(LessEqual(0, Re(s), 1), Equal(RiemannZeta(s), 0))))))

make_entry(ID("49704a"),
    Formula(Equivalent(RiemannHypothesis, All(Equal(Re(RiemannZetaZero(n)), Div(1,2)), ForElement(n, ZZGreaterEqual(1))))))

make_entry(ID("bfaeb5"),
    Formula(Equivalent(RiemannHypothesis, All(Less(Abs(PrimePi(x) - LogIntegral(x)), Sqrt(x) * Log(x)), ForElement(x, ClosedOpenInterval(2, Infinity))))),
    References("https://mathoverflow.net/q/338066"))

make_entry(ID("3142ec"),
    Formula(Equivalent(RiemannHypothesis, All(Less(DivisorSigma(1,n), Exp(ConstGamma) * n*Log(Log(n))), ForElement(n, ZZGreaterEqual(5041))))))

make_entry(ID("e4287f"),
    Formula(Equivalent(RiemannHypothesis, All(Less(DivisorSigma(1,n), HarmonicNumber(n) + Exp(HarmonicNumber(n)) * Log(HarmonicNumber(n))), ForElement(n, ZZGreaterEqual(2))))),
    References("https://doi.org/10.2307/2695443"))

make_entry(ID("22ab47"),
    SymbolDefinition(DeBruijnNewmanLambda, DeBruijnNewmanLambda, "De Bruijn-Newman constant"))

make_entry(ID("a71ddd"),
    Formula(Equivalent(RiemannHypothesis, Equal(DeBruijnNewmanLambda, 0))),
    References("https://arxiv.org/abs/1801.05914"))

make_entry(ID("7783f9"),
    Formula(Equivalent(RiemannHypothesis, Equal(
        (1/Pi) * Integral(Log(Abs(RiemannZeta(Div(1,2)+ConstI*t)/RiemannZeta(Div(1,2)))) * Div(1,t**2), For(t, 0, Infinity)),
        Pi/8 + ConstGamma/4 + Log(8*Pi)/4 - 2))),
    References("https://mathoverflow.net/q/279936"))

make_entry(ID("cf70ce"),
    Formula(Equivalent(RiemannHypothesis, Equal(
        Integral((1-12*t**2)/(1+4*t**2)**3 * Integral(Log(Abs(RiemannZeta(sigma + ConstI*t))), For(sigma, Div(1,2), Infinity)), For(t, 0, Infinity)),
        Pi * (3-ConstGamma) / 32))),
    References("https://doi.org/10.1007/BF01056314"))

def_Topic(
    Title("Keiper-Li coefficients"),
    Section("Definitions"),
    Entries(
        "432bee",
    ),
    Section("Representations"),
    Entries(
        "fcab61",
        "cce75b",
    ),
    Section("Specific values"),
    Entries(
        "081205",
        "d8d820",
        "faf448",
        "706f66",
    ),
    Section("Asymptotics"),
    Entries(
        "64bd32",
    ),
    Section("Riemann hypothesis (Li's criterion)"),
    Entries
    (
        "e68f82",
        "a5d65f",
        "8f8fb7",
    ),
)

make_entry(ID("432bee"),
    SymbolDefinition(KeiperLiLambda, KeiperLiLambda(n), "Keiper-Li coefficient"),
    Description(SourceForm(KeiperLiLambda(n)), ", rendered as", KeiperLiLambda(n),
        ", denotes a power series coefficient associated with the Riemann zeta function. "),
    Description("The definition", EntryReference("fcab61"), "follows Keiper (1992). Li (1997) defines the coefficients with a different scaling factor, equivalent to", n*KeiperLiLambda(n), "in Keiper's (and Fungrim's) notation."),
    References("https://doi.org/10.2307/2153215", "https://doi.org/10.1006/jnth.1997.2137", "https://doi.org/10.7169/facm/1317045228"))

make_entry(ID("fcab61"),
    Formula(Equal(KeiperLiLambda(n), (1/Factorial(n)) * ComplexDerivative(Log(2 * RiemannXi(s/(s-1))), For(s, 0, n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("cce75b"),
    Formula(Equal(KeiperLiLambda(n), (1/n) * Sum(Parentheses(1 - (RiemannZetaZero(k) / (RiemannZetaZero(k) - 1))**n), ForElement(k, ZZ), NotEqual(k, 0)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("081205"),
    Formula(Equal(KeiperLiLambda(0), 0)))

make_entry(ID("d8d820"),
    Formula(Equal(KeiperLiLambda(1), (ConstGamma/2 + 1) - Log(4*Pi)/2)))

make_entry(ID("faf448"),
    Description("Table of", KeiperLiLambda(n), "to 50 digits for", LessEqual(0, n, 30)),
    Table(
      Var(n),
      TableValueHeadings(n, NearestDecimal(KeiperLiLambda(n), 50)),
      TableSplit(1),
      List(
    Tuple(0, Decimal("0")),
    Tuple(1, Decimal("0.023095708966121033814310247906495291621932127152051")),
    Tuple(2, Decimal("0.046172867614023335192864243096033943387066108314123")),
    Tuple(3, Decimal("0.069212973518108267930497348872601068994212026393200")),
    Tuple(4, Decimal("0.092197619873060409647627872409439018065541673490213")),
    Tuple(5, Decimal("0.11510854289223549048622128109857276671349132303596")),
    Tuple(6, Decimal("0.13792766871372988290416713700341666356138966078654")),
    Tuple(7, Decimal("0.16063715965299421294040287257385366292282442046163")),
    Tuple(8, Decimal("0.18321945964338257908193931774721859848998098273432")),
    Tuple(9, Decimal("0.20565733870917046170289387421343304741236553410044")),
    Tuple(10, Decimal("0.22793393631931577436930340573684453380748385942738")),
    Tuple(11, Decimal("0.25003280347456327821404973571398176484638012641151")),
    Tuple(12, Decimal("0.27193794338538498733992383249265390667786600994911")),
    Tuple(13, Decimal("0.29363385060368815285418215009889439246684857721098")),
    Tuple(14, Decimal("0.31510554847718560800576009263276843951188505373007")),
    Tuple(15, Decimal("0.33633862480178623056900742916909716316435743073656")),
    Tuple(16, Decimal("0.35731926555429953996369166686545971896237127626351")),
    Tuple(17, Decimal("0.37803428659512958242032593887899541131751543174423")),
    Tuple(18, Decimal("0.39847116323842905329183170701797400318996274958010")),
    Tuple(19, Decimal("0.41861805759536317393727500409965507879749928476235")),
    Tuple(20, Decimal("0.43846384360466075647997306767236011141956127351910")),
    Tuple(21, Decimal("0.45799812967347233249339981618322155418048244629837")),
    Tuple(22, Decimal("0.47721127886067612259488922142809435229670372335579")),
    Tuple(23, Decimal("0.49609442654413481917007764284527175942412402470703")),
    Tuple(24, Decimal("0.51463949552297154237641907033478550942000739520745")),
    Tuple(25, Decimal("0.53283920851566303199773431527093937195060386800653")),
    Tuple(26, Decimal("0.55068709802460266427322142354105110711472096137358")),
    Tuple(27, Decimal("0.56817751354772529773768642819955547787404863111699")),
    Tuple(28, Decimal("0.58530562612777004271739082427374534543603950676386")),
    Tuple(29, Decimal("0.60206743023974549532618306036749838157067445931420")),
    Tuple(30, Decimal("0.61845974302711452077115586049317787034309975741269")),
    )))

make_entry(ID("706f66"),
    Description("Table of", KeiperLiLambda(10**n), "to 50 digits for", LessEqual(0, n, 5)),
    Table(
      Var(n),
      TableValueHeadings(n, NearestDecimal(KeiperLiLambda(10**n), 50)),
      TableSplit(1),
      List(
    Tuple(0, Decimal("0.023095708966121033814310247906495291621932127152051")),
    Tuple(1, Decimal("0.22793393631931577436930340573684453380748385942738")),
    Tuple(2, Decimal("1.1860377537679132992736469839793792693298702359323")),
    Tuple(3, Decimal("2.3260531616864664574065046940832238158044982041693")),
    Tuple(4, Decimal("3.4736579732241613740180609478145593215167373519711")),
    Tuple(5, Decimal("4.6258078240690223140941603808334320467617286152507")),
    )))

make_entry(ID("64bd32"),
    Formula(Implies(RiemannHypothesis, AsymptoticTo(KeiperLiLambda(n), Log(n)/2 - (Log(2*Pi) + 1 - ConstGamma)/2, n, Infinity))),
    References("https://doi.org/10.7169/facm/1317045228"))

make_entry(ID("e68f82"),
    Formula(Equivalent(RiemannHypothesis, All(Greater(KeiperLiLambda(n), 0), ForElement(n, ZZGreaterEqual(1))))),
    References("https://doi.org/10.1006/jnth.1997.2137"))

make_entry(ID("a5d65f"),
    Formula(Equivalent(RiemannHypothesis, Where(Less(Sum(Abs(KeiperLiLambda(n) - a(n))**2, For(n, 1, Infinity)), Infinity),
        Equal(a(n), Log(n)/2 - (Log(2*Pi) + 1 - ConstGamma)/2)))),
    References("https://doi.org/10.7169/facm/1317045228"))

make_entry(ID("8f8fb7"),
    Formula(Implies(
            All(Equal(Re(RiemannZetaZero(n)), Div(1,2)), ForElement(n, ZZGreaterEqual(1)), Less(Im(RiemannZetaZero(n)), T)),
            All(GreaterEqual(KeiperLiLambda(n), 0), ForElement(n, ZZGreaterEqual(0)), LessEqual(n, T**2)))),
    Variables(T),
    Assumptions(Element(T, ClosedOpenInterval(0, Infinity))),
    References("https://arxiv.org/abs/1703.02844"))

def_Topic(
    Title("Stieltjes constants"),
    Section("Definitions"),
    Entries(
        "d10029",
    ),
    Section("Generating functions"),
    Entries(
        "b1a2e1",
        "60c6da",
    ),
    Section("Limit representations"),
    Entries(
        "411f3b",
    ),
    Section("Specific values"),
    Entries(
        "51206a",
        "8ae153",
        "b6808d",
        "70a705",
        "e5bd3c",
        "569d5c",
    ),
    Section("Recurrence relations"),
    Entries(
        "687b4d",
    ),
    Section("Integral representations"),
    Entries(
        "a41c92",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "1dec0d",
    )
)

make_entry(ID("d10029"),
    SymbolDefinition(StieltjesGamma, StieltjesGamma(n, a), "Stieltjes constant"),
    Description(SourceForm(StieltjesGamma(n)), ", rendered as", StieltjesGamma(n), ", represents the Stieltjes constant of index", n, "."),
    Description(SourceForm(StieltjesGamma(n, a)), ", rendered as", StieltjesGamma(n, a), ", represents the generalized Stieltjes constant of index", n, " with parameter", a, "."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(Element(n, ZZGreaterEqual(0)), Element(StieltjesGamma(n), RR)),
        Tuple(And(Element(n, ZZGreaterEqual(0)), Element(a, CC), NotElement(a, ZZLessEqual(0))), Element(StieltjesGamma(n, a), CC)),
    ))
)

make_entry(ID("b1a2e1"),
    Formula(Equal(RiemannZeta(s), 1/(s-1) + Sum((-1)**n/Factorial(n) * StieltjesGamma(n) * (s-1)**n, For(n, 0, Infinity)))),
    Variables(s),
    Assumptions(Element(s, CC)))

make_entry(ID("60c6da"),
    Formula(Equal(HurwitzZeta(s, a), 1/(s-1) + Sum((-1)**n/Factorial(n) * StieltjesGamma(n, a) * (s-1)**n, For(n, 0, Infinity)))),
    Variables(s, a),
    Assumptions(And(Element(s, CC), Element(a, CC), NotElement(a, ZZLessEqual(0)))))

make_entry(ID("411f3b"),
    Formula(Equal(StieltjesGamma(n, a), SequenceLimit(Brackets(Parentheses(Sum(Log(k+a)**n / (k+a), For(k, 0, N))) - Log(N+a)**(n+1)/(n+1)), For(N, Infinity)))),
    Variables(n, a),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(a, CC), NotElement(a, ZZLessEqual(0)))))

make_entry(ID("51206a"),
    Formula(Equal(StieltjesGamma(n, 1), StieltjesGamma(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("8ae153"),
    Formula(Equal(StieltjesGamma(0, 1), StieltjesGamma(0), ConstGamma)))

make_entry(ID("b6808d"),
    Formula(Equal(StieltjesGamma(0, a), -DigammaFunction(a))),
    Variables(a),
    Assumptions(And(Element(a, CC), NotElement(a, ZZLessEqual(0)))))

make_entry(ID("70a705"),
    Formula(Equal(StieltjesGamma(1, Div(1,2)), StieltjesGamma(1) - 2*ConstGamma*Log(2) - Log(2)**2)))

make_entry(ID("e5bd3c"),
    Description("Table of", StieltjesGamma(n), "to 50 digits for", LessEqual(0, n, 30)),
    Table(
      Var(n),
      TableValueHeadings(n, NearestDecimal(StieltjesGamma(n), 50)),
      TableSplit(1),
      List(
    Tuple(0, Decimal("0.57721566490153286060651209008240243104215933593992")),
    Tuple(1, Decimal("-0.072815845483676724860586375874901319137736338334338")),
    Tuple(2, Decimal("-0.0096903631928723184845303860352125293590658061013407")),
    Tuple(3, Decimal("0.0020538344203033458661600465427533842857158044454106")),
    Tuple(4, Decimal("0.0023253700654673000574681701775260680009044694137849")),
    Tuple(5, Decimal("0.00079332381730106270175333487744444483073153940458489")),
    Tuple(6, Decimal("-0.00023876934543019960987242184190800427778371515635808")),
    Tuple(7, Decimal("-0.00052728956705775104607409750547885828199625347296990")),
    Tuple(8, Decimal("-0.00035212335380303950960205216500120874172918053379235")),
    Tuple(9, Decimal("-3.4394774418088048177914623798227390620789538594442e-5")),
    Tuple(10, Decimal("0.00020533281490906479468372228923706530295985377416676")),
    Tuple(11, Decimal("0.00027018443954390352667290208206795567382784205868840")),
    Tuple(12, Decimal("0.00016727291210514019335350154334118344660780663280557")),
    Tuple(13, Decimal("-2.7463806603760158860007603693355181526785337670396e-5")),
    Tuple(14, Decimal("-0.00020920926205929994583713969734458495783154421150607")),
    Tuple(15, Decimal("-0.00028346865532024144664293447499712697706870298071768")),
    Tuple(16, Decimal("-0.00019969685830896977470778456320324039191576497403406")),
    Tuple(17, Decimal("2.6277037109918336699466597630510122816078692929114e-5")),
    Tuple(18, Decimal("0.00030736840814925282659275475194862564552381129073146")),
    Tuple(19, Decimal("0.00050360545304735562905559643771716003532126980764950")),
    Tuple(20, Decimal("0.00046634356151155944940059482443355052511314347392569")),
    Tuple(21, Decimal("0.00010443776975600011581079567436772049104442825070555")),
    Tuple(22, Decimal("-0.00054159958220399770165519617317410558454386092870075")),
    Tuple(23, Decimal("-0.0012439620904082457792997415995371658091470281139646")),
    Tuple(24, Decimal("-0.0015885112789035615619061966115211158573187228221441")),
    Tuple(25, Decimal("-0.0010745919527384888247242919873531730892739793314532")),
    Tuple(26, Decimal("0.00065680351863715443150477300335621524888606506047754")),
    Tuple(27, Decimal("0.0034778369136185382090073595742588115476629156638859")),
    Tuple(28, Decimal("0.0064000685317006294581072282219458636666371981445885")),
    Tuple(29, Decimal("0.0073711517704722391344124024235594021578413274885128")),
    Tuple(30, Decimal("0.0035577288555731609479135377489084026108096506495221")),
    )))

make_entry(ID("569d5c"),
    Description("Table of", StieltjesGamma(10**n), "to 50 digits for", LessEqual(0, n, 20)),
    Table(
      Var(n),
      TableValueHeadings(n, NearestDecimal(StieltjesGamma(10**n), 50)),
      TableSplit(1),
      List(
    Tuple(0, Decimal("-0.072815845483676724860586375874901319137736338334338")),
    Tuple(1, Decimal("0.00020533281490906479468372228923706530295985377416676")),
    Tuple(2, Decimal("-425340157170802696.23144385197278358247028931053473")),
    Tuple(3, Decimal("-1.5709538442047449345494023425120825242380299554570e+486")),
    Tuple(4, Decimal("-2.2104970567221060862971082857536501900234397174729e+6883")),
    Tuple(5, Decimal("1.9919273063125410956582272431568589205211659777533e+83432")),
    Tuple(6, Decimal("-4.4209504730980210273285480902514758066667150603243e+947352")),
    Tuple(7, Decimal("-2.7882974834697458134414289662704891120456603986498e+10390401")),
    Tuple(8, Decimal("2.7324629454457814909592178706122081982218137653871e+111591574")),
    Tuple(9, Decimal("2.1048416655418517821363600001419516191053973500980e+1181965380")),
    Tuple(10, Decimal("7.5883621237131051948224033799125486921750410324510e+12397849705")),
    Tuple(11, Decimal("3.4076163168007069203916546697422088077748515862016e+129115149508")),
    Tuple(12, Decimal("-1.1713923594956898094830946178584108308869819425684e+1337330792656")),
    Tuple(13, Decimal("5.1442844004429501778205029347495102582243127602569e+13792544216233")),
    Tuple(14, Decimal("-5.8565687699062182176274937548885177768345135170181e+141762672271719")),
    Tuple(15, Decimal("1.8441017255847322907032695598351364885675746553316e+1452992510427658")),
    Tuple(16, Decimal("1.0887949866822670316936532894122644696901837098117e+14857814744168222")),
    Tuple(17, Decimal("-9.0932573236841531922129808939176217547651121139948e+151633823511792145")),
    Tuple(18, Decimal("2.6314370018873515830151010192294307578971415626833e+1544943249673388947")),
    Tuple(19, Decimal("4.8807917914447513336887536981308809263719031557975e+15718277029330950920")),
    Tuple(20, Decimal("2.3945266166432844875810628102042011083015231233149e+159718433793014252763")),
    )))

make_entry(ID("687b4d"),
    Formula(Equal(StieltjesGamma(n, a+1), StieltjesGamma(n, a) - Log(a)**n / a)),
    Variables(n, a),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(a, CC), NotElement(a, ZZLessEqual(0)))))

make_entry(ID("a41c92"),
    Formula(Equal(StieltjesGamma(n, a), -((Pi/(2*(n+1))) * Integral((Log(a-Div(1,2)+ConstI*x)**(n+1) + Log(a-Div(1,2)-ConstI*x)**(n+1))/Cosh(Pi*x)**2, For(x, 0, Infinity))))),
    Variables(n, a),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(a, CC), Greater(Re(a), Div(1,2)))))

make_entry(ID("1dec0d"),
    Formula(Less(Abs(StieltjesGamma(n)), Pow(10,-4) * Exp(n*Log(Log(n))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(5))))

def_Topic(
    Title("Sinc function"),
    Section("Definitions"),
    Entries(
        "4cbfd4",
    ),
    Section("Illustrations"),
    Entries(
        "639d7b",
        "baf960",
    ),
    Section("Domain"),
    Entries(
        "a527c4",
        "89be58",
        "2379e6",
        "41998e",
    ),
    Section("Primary formula"),
    Entries(
        "fa9283",
        "b18020",
        "01422b",
    ),
    Section("Zeros"),
    Entries(
        "af4516",
        "1349b5",
    ),
    Section("Specific values"),
    Entries(
        "593e63",
        "fdc94c",
        "340936",
        "c9ead2",
        "45740a",
    ),
    Section("Functional equations"),
    Subsection("Even symmetry"),
    Entries(
        "f19e0a",
    ),
    Subsection("Conjugate symmetry"),
    Entries(
        "3a428f",
    ),
    Subsection("Multiplication formulas"),
    Entries(
        "b41d08",
        "d5000a",
    ),
    Section("Derivatives and differential equations"),
    Subsection("First derivatives"),
    Entries(
        "768c77",
        "90c66a",
    ),
    Subsection("Linear ordinary differential equations"),
    Entries
    (
        "c6e6b2",
        "aa15f0",
    ),
    Subsection("Higher derivatives"),
    Entries
    (
        "1c3766",
        "ff5e82",
    ),
    Section("Series and product representations"),
    Entries(
        "4f9844",
        "f64eef",
        "24c17b",
    ),
    Section("Representation by special functions"),
    Entries(
        "d16cb4",
        "e2878f",
        "50f72f",
        "19d7d9",
    ),
    Section("Integral representations"),
    Entries(
        "6e4f58",
        "e2c10d",
        "729c78",
        "08583a",
        "b1d132",
        "99ad29",
        "45f05f",
    ),
    Section("Integrals"),
    Subsection("Sine integral"),
    Entries(
        "122e3d",
        "d6c29e",
        "8ef3d7",
        "2b7b1d",
        "f0f0a6",
    ),
    Subsection("Gibbs constant"),
    Entries(
        "81f531",
    ),
    Subsection("Integrals on the real line"),
    Entries(
        "a0b0b3",
        "cb152f",
        "1a7e22",
        "be0f54",
        "1596d2",
        "af8328",
        "3fe2b0",
        "108daa",
        "f5887b",
    ),
    Subsection("Integral transforms"),
    Entries(
        "2a69ce",
        "38dc04",
        "78fca3",
    ),
    Subsection("Other definite integrals"),
    Entries(
        "c2976e",
        "4a5b9a",
        "dad27b",
        "5c9675",
    ),
    Section("Summation"),
    Subsection("Infinite series"),
    Entries(
        "2a8ec9",
        "005478",
        "4d5410",
        "1f9beb",
        "8814ad",
        "49514d",
        "0c847f",
        "b894a3",
        "4a1b00",
    ),
    Section("Extreme points and limits"),
    Subsection("Extreme points"),
    Entries(
        "632d1c",
        "b1a260",
        "1e6344",
        "da7fb1",
        "95c04c",
        "2ac5eb",
    ),
    Subsection("Limits at infinity"),
    Entries(
        "5e0c58",
        "a2f5a9",
        "2f09ad",
        "6c28fa",
        "aa404c",
        "088fdb",
        "f4fd7d",
    ),
    Section("Bounds and inequalities"),
    Subsection("Real variable"),
    Entries(
        "20f069",
        "4d3f04",
        "f0325d",
        "d8d286",
        "a934d1",
        "351d87",
        "5d16e5",
    ),
    Subsection("Complex variable"),
    Entries(
        "c7c483",
        "51f9b4",
    ),
)

make_entry(ID("4cbfd4"),
    SymbolDefinition(Sinc, Sinc(z), "Sinc function"),
    CodeExample(Sinc(z), "represents the sinc function of argument", z, "."))

make_entry(ID("639d7b"),
    Image(Description("Plot of", Sinc(x), "and", Sinc(Pi*x), "on", Element(x, ClosedInterval(-(3*Pi), 3*Pi))),
        ImageSource("plot_sinc")),
    )

make_entry(ID("baf960"),
    Image(Description("X-ray of", Sinc(z), "on", Element(z, ClosedInterval(-8,8) + ClosedInterval(-8,8)*ConstI)),
        ImageSource("xray_sinc")),
    description_xray,
    )

make_entry(ID("a527c4"),
    Formula(IsHolomorphic(Sinc(z), ForElement(z, CC))))

make_entry(ID("89be58"),
    Formula(Implies(Element(x, RR), Element(Sinc(x), RR))),
    Variables(x))

make_entry(ID("2379e6"),
    Formula(Implies(Element(z, CC), Element(Sinc(z), CC))),
    Variables(z))

make_entry(ID("41998e"),
    Formula(Implies(Element(x, RR), Element(Sinc(x), OpenClosedInterval(Decimal("-0.217234"), 1)))),
    Variables(x))

make_entry(ID("fa9283"),
    Formula(Equal(Sinc(z), Sin(z) / z)),
    Variables(z),
    Assumptions(And(Element(z, CC), NotEqual(z, 0))))

make_entry(ID("b18020"),
    Formula(Equal(Sinc(0), 1)))

make_entry(ID("01422b"),
    Formula(Equal(Sinc(z), Cases(Tuple(Sin(z)/z, NotEqual(z, 0)), Tuple(1, Equal(z, 0))))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("af4516"),
    Formula(Equal(Zeros(Sinc(z), ForElement(z, CC)), Set(Pi*n, ForElement(n, ZZ), NotEqual(n, 0)))))

make_entry(ID("1349b5"),
    Formula(Equal(Zeros(Sinc(Pi*z), ForElement(z, CC)), Set(n, ForElement(n, ZZ), NotEqual(n, 0)))))

make_entry(ID("593e63"),
    Formula(Equal(Sinc(Pi*n), Cases(Tuple(1, Equal(n, 0)), Tuple(0, NotEqual(n, 0))))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("fdc94c"),
    Formula(Equal(Sinc(Pi/2), 2/Pi)))

make_entry(ID("340936"),
    Formula(Equal(Sinc(Pi/3), 3*Sqrt(3)/(2*Pi))))

make_entry(ID("c9ead2"),
    Formula(Equal(Sinc(Pi/4), 2*Sqrt(2)/Pi)))

make_entry(ID("45740a"),
    Formula(Equal(Sinc(Pi/6), 3/Pi)))

make_entry(ID("f19e0a"),
    Formula(Equal(Sinc(-z), Sinc(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("3a428f"),
    Formula(Equal(Sinc(Conjugate(z)), Conjugate(Sinc(z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("b41d08"),
    Formula(Equal(Sinc(ConstI*z), Sinh(z)/z)),
    Variables(z),
    Assumptions(And(Element(z, CC), NotEqual(z, 0))))

make_entry(ID("d5000a"),
    Formula(Equal(Sinc(2*z), Sinc(z)*Cos(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("768c77"),
    Formula(Equal(ComplexDerivative(Sinc(z), For(z, z)), Cases(Tuple(Cos(z)/z - Sin(z)/z**2, NotEqual(z, 0)), Tuple(0, Equal(z, 0))))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("90c66a"),
    Formula(Equal(ComplexDerivative(Sinc(z), For(z, z, 2)), Cases(Tuple((2/z**3-1/z)*Sin(z) - 2*Cos(z)/z**2, NotEqual(z, 0)), Tuple(-Div(1,3), Equal(z, 0))))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("c6e6b2"),
    Formula(Equal(z * ComplexDerivative(Sinc(z), For(z, z, 2)) + 2 * ComplexDerivative(Sinc(z), For(z, z)) + z * Sinc(z), 0)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("aa15f0"),
    Formula(Where(Equal(z * ComplexDerivative(f(z), For(z, z, 2)) + 2 * ComplexDerivative(f(z), For(z, z)) + A**2 * z * f(z), 0),
        Equal(f(z), Subscript(C, 1) * Sinc(A*z) + Subscript(C, 2) * (Cos(A*z) / z)))),
    Variables(C, A, z),
    Assumptions(And(Element(z, CC), NotEqual(z, 0), Element(A, CC), Element(Subscript(C, 1), CC), Element(Subscript(C, 2), CC))))

make_entry(ID("1c3766"),
    Formula(Equal(ComplexDerivative(Sinc(z), For(z, 0, n)), Cases(Tuple((-1)**Floor(n/2) * (1/(n+1)), Even(n)), Tuple(0, Odd(n))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("ff5e82"),
    Formula(Where(Equal((z*(n**2 + 5*n + 6))*a_(n+3) + (n**2 + 5*n + 6)*a_(n+2) + z*a_(n+1) + a_(n), 0),
        Equal(a_(n), ComplexDerivative(Sinc(z), For(z, z, n)) / Factorial(n)))),
    Variables(z, n),
    Assumptions(And(Element(z, CC), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("4f9844"),
    Formula(Equal(Sinc(z), Sum((-1)**n * z**(2*n) / Factorial(2*n+1), For(n, 0, Infinity)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("f64eef"),
    Formula(Equal(Sinc(Pi*z), Product(Parentheses(1-z**2/n**2), For(n, 1, Infinity)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("24c17b"),
    Formula(Equal(Sinc(z), Product(Cos(z/2**n), For(n, 1, Infinity)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("e2878f"),
    Formula(Equal(Sinc(z), Hypergeometric0F1(Div(3, 2), -(z**2 / 4)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("50f72f"),
    Formula(Equal(Derivative(Sinc(z), For(z, z)), -((z/3)*Hypergeometric0F1(Div(5, 2), -(z**2 / 4))))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("19d7d9"),
    Formula(Equal(Sinc(z), ((2*z)/Pi)**(-(Div(1,2))) * (BesselJ(Div(1,2), z)))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotEqual(z, 0))))

make_entry(ID("6e4f58"),
    Formula(Equal(Sinc(z), Integral(Cos(z*x), For(x, 0, 1)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("e2c10d"),
    Formula(Equal(Sinc(a*z), (1/a) * Integral(Cos(z*x), For(x, 0, a)))),
    Variables(a, z),
    Assumptions(And(Element(z, CC), Element(a, CC), NotEqual(a, 0))))

make_entry(ID("729c78"),
    Formula(Equal(Sinc(Pi*z), Integral(Cos(Pi*z*x), For(x, 0, 1)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("08583a"),
    Formula(Equal(Sinc(z), Div(1,2) * Integral(Exp(ConstI*z*x), For(x, -1, 1)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("b1d132"),
    Formula(Equal(Sinc(a*z), Div(1,(2*a)) * Integral(Exp(ConstI*z*x), For(x, -a, a)))),
    Variables(a, z),
    Assumptions(And(Element(z, CC), Element(a, CC), NotEqual(a, 0))))

make_entry(ID("99ad29"),
    Formula(Equal(Sinc(Pi*z), Integral(Exp(2*Pi*ConstI*z*x), For(x, -Div(1,2), Div(1,2))))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("45f05f"),
    Formula(Equal(1/Sinc(Pi/z), Integral(1/(x**z+1), For(x, 0, Infinity)))),
    Variables(z),
    Assumptions(And(Element(z, CC), Greater(Re(z), 1))))

make_entry(ID("122e3d"),
    Formula(Equal(Integral(Sinc(x), For(x, 0, z)), SinIntegral(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("d6c29e"),
    Formula(Equal(Integral(Sinc(x), For(x, a, b)), SinIntegral(b) - SinIntegral(a))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("8ef3d7"),
    Formula(Equal(Integral(Sinc(x), For(x, -Infinity, z)), SinIntegral(z) + Pi/2)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("2b7b1d"),
    Formula(Equal(Integral(Sinc(x), For(x, z, Infinity)), Pi/2 - SinIntegral(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("f0f0a6"),
    Formula(Equal(Integral(Sinc(x), For(x, -Infinity, Infinity)), Pi)))

make_entry(ID("81f531"),
    Formula(EqualNearestDecimal(Integral(Sinc(x), For(x, 0, Pi)), 
        Decimal("1.85193705198246617036105337016"), 30)))

make_entry(ID("f5887b"),
    Formula(Equal(Integral(Sinc(x + Pi*n) * Sinc(x + Pi*m), For(x, -Infinity, Infinity)), Cases(Tuple(Pi, Equal(n, m)), Tuple(0, NotEqual(n, m))))),
    Variables(n, m),
    Assumptions(And(Element(n, ZZ), Element(m, ZZ))))

make_entry(ID("108daa"),
    Formula(Equal(Integral(Sinc(a*x) * Sinc(b*x), For(x, -Infinity, Infinity)), (Pi/2) * ((Abs(a+b)-Abs(a-b))/(a*b)))),
    Variables(a, b),
    Assumptions(And(Element(a, RR), Element(b, RR), NotEqual(a, 0), NotEqual(b, 0))))

make_entry(ID("3fe2b0"),
    Formula(Equal(Integral(Sinc(x+a) * Sinc(x+b), For(x, -Infinity, Infinity)), Pi * Sinc(a-b))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("2a69ce"),
    Formula(Equal(Integral(Exp(ConstI*a*x) * Sinc(x), For(x, -Infinity, Infinity)),
            Integral(Cos(a*x) * Sinc(x), For(x, -Infinity, Infinity)),
        Cases(Tuple(Pi, Less(Abs(a), 1)),
            Tuple(Pi/2, Equal(Abs(a), 1)),
            Tuple(0, Greater(Abs(a), 1))))),
    Variables(a),
    Assumptions(Element(a, RR)))

make_entry(ID("38dc04"),
    Formula(Equal(Integral(Exp(-(a*x)) * Sinc(x), For(x, 0, Infinity)), Acot(a))),
    Variables(a),
    Assumptions(And(Element(a, CC), Greater(Re(a), 0))))

make_entry(ID("78fca3"),
    Formula(Equal(Integral(Exp(-(a*x**2)) * Sinc(x), For(x, 0, Infinity)), (Pi/2) * Erf(1/(2*Sqrt(a))))),
    Variables(a),
    Assumptions(And(Element(a, CC), Greater(Re(a), 0))))

make_entry(ID("a0b0b3"),
    Formula(Equal(Integral(Abs(Sinc(x)), For(x, 0, Infinity)), +Infinity)))

make_entry(ID("cb152f"),
    Formula(Equal(Integral(Sinc(x), For(x, 0, Infinity)), Pi/2)))

make_entry(ID("1a7e22"),
    Formula(Equal(Integral(Sinc(x)**2, For(x, 0, Infinity)), Pi/2)))

make_entry(ID("be0f54"),
    Formula(Equal(Integral(Sinc(x)**3, For(x, 0, Infinity)), 3*Pi/8)))

make_entry(ID("1596d2"),
    Formula(Equal(Integral(Sinc(x)**n, For(x, 0, Infinity)), (Pi / (2**n * Factorial(n-1))) * Sum((-1)**k * Binomial(n,k) * (n-2*k)**(n-1), For(k, 0, Floor(n/2))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("af8328"),
    Formula(Equal(Integral(Product(Sinc(x/(2*k+1)), For(k, 0, n)), For(x, 0, Infinity)),
        Cases(Tuple(Pi/2, Element(n, Range(0, 6))), Tuple(
            Div(467807924713440738696537864469,467807924720320453655260875000)*(Pi/2), Equal(n, 7))))),
    Variables(n),
    Assumptions(Element(n, Range(0, 7))))

make_entry(ID("c2976e"),
    Formula(Equal(Integral(1/Sinc(x), For(x, 0, Pi/2)), 2*ConstCatalan)))

make_entry(ID("4a5b9a"),
    Formula(Equal(Integral(x/Sinc(x), For(x, 0, Pi/2)), 2*Pi*ConstCatalan - 7*RiemannZeta(3)/2)))

make_entry(ID("dad27b"),
    Formula(Equal(Integral(1/Sinc(x)**2, For(x, 0, Pi/2)), Pi*Log(2))))

make_entry(ID("5c9675"),
    Formula(Equal(Integral(1/Sinc(x)**2, For(x, 0, Pi/4)), Pi*Log(2)/4 + ConstCatalan - Pi**2/16)))

make_entry(ID("632d1c"),
    Formula(Equal(Maximum(Sinc(x), ForElement(x, RR)), 1)))

make_entry(ID("b1a260"),
    Formula(Equal(ArgMaxUnique(Sinc(x), ForElement(x, RR)), 0)))

make_entry(ID("1e6344"),
    Formula(Equal(ArgMin(Sinc(x), ForElement(x, RR)), Where(Set(-a,a),
        Equal(a, BesselJZero(Div(3,2), 1))))))

make_entry(ID("da7fb1"),
    Formula(Equal(Minimum(Sinc(x), ForElement(x, RR)),
        Sinc(BesselJZero(Div(3,2), 1)))))

make_entry(ID("95c04c"),
    Formula(EqualNearestDecimal(ArgMinUnique(Sinc(x), ForElement(x, OpenClosedInterval(0, Infinity))),
        Decimal("4.49340945790906417530788092728"), 30)))

make_entry(ID("2ac5eb"),
    Formula(EqualNearestDecimal(Minimum(Sinc(x), ForElement(x, RR)),
        Decimal("-0.217233628211221657408279325562"), 30)))

make_entry(ID("5e0c58"),
    Formula(Equal(Sinc(Infinity), RealLimit(Sinc(x), For(x, Infinity)), 0)))

make_entry(ID("a2f5a9"),
    Formula(Equal(Sinc(-Infinity), RealLimit(Sinc(x), For(x, -Infinity)), 0)))

make_entry(ID("2f09ad"),
    Formula(Equal(Sinc(Infinity), RealLimit(Sinc(a*ConstI+x), For(x, Infinity)), 0)),
    Variables(a),
    Assumptions(Element(a, CC)))

make_entry(ID("6c28fa"),
    Formula(Equal(Sinc(-Infinity), RealLimit(Sinc(a*ConstI+x), For(x, -Infinity)), 0)),
    Variables(a),
    Assumptions(Element(a, CC)))

make_entry(ID("aa404c"),
    Formula(Equal(Sinc(ConstI*Infinity), RealLimit(Sinc(ConstI*x), For(x, Infinity)), Infinity)))

make_entry(ID("088fdb"),
    Formula(Equal(Sinc(-(ConstI*Infinity)), RealLimit(Sinc(ConstI*x), For(x, -Infinity)), Infinity)))

make_entry(ID("f4fd7d"),
    Formula(Equal(Abs(Sinc(Exp(ConstI*theta)*Infinity)), RealLimit(Abs(Sinc(Exp(ConstI*theta)*x)), For(x, Infinity)),
        Cases(Tuple(0, Element(Exp(ConstI*theta), Set(-1,1))), Tuple(Infinity, Otherwise)))),
    Variables(theta),
    Assumptions(Element(theta, RR)))

make_entry(ID("20f069"),
    Formula(LessEqual(Abs(Sinc(x)), 1)),
    Variables(x),
    Assumptions(Element(x, RR)))

make_entry(ID("4d3f04"),
    Formula(Greater(Sinc(x), Decimal("-0.217234"))),
    Variables(x),
    Assumptions(Element(x, RR)))

make_entry(ID("f0325d"),
    Formula(LessEqual(Abs(Sinc(x)), 1/Abs(x))),
    Variables(x),
    Assumptions(And(Element(x, RR), NotEqual(x, 0))))

make_entry(ID("d8d286"),
    Formula(LessEqual(Abs(Sinc(x)), (1+Abs(x))/(1+x**2))),
    Variables(x),
    Assumptions(And(Element(x, RR))))

make_entry(ID("a934d1"),
    Formula(Less(Abs(Sinc(x)), Asinh(x)/x)),
    Variables(x),
    Assumptions(And(Element(x, RR), NotEqual(x, 0))))

make_entry(ID("351d87"),
    Formula(Less(Abs(Sinc(x)), (Sqrt(2)/x) * Tanh(x/Sqrt(2)))),
    Variables(x),
    Assumptions(And(Element(x, RR), NotEqual(x, 0))))

make_entry(ID("5d16e5"),
    Formula(LessEqual(Abs(Derivative(Sinc(x), For(x, x, n))), 1)),
    Variables(x, n),
    Assumptions(And(Element(x, RR), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("c7c483"),
    Formula(LessEqual(Abs(Sinc(z)), Exp(Abs(Im(z))))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("51f9b4"),
    Formula(LessEqual(Abs(Sinc(z)), Sinc(ConstI*Abs(z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("2a8ec9"),
    Formula(Implies(
        Cases(
            Tuple(Less(Sum(Subscript(a,k), For(k,0,N)), 2*Pi), Equal(N, 0)),
            Tuple(LessEqual(Sum(Subscript(a,k), For(k,0,N)), 2*Pi), GreaterEqual(N, 1)),
        ),
        Equal(Sum(Product(Sinc(Subscript(a,k)*n), For(k, 0, N)), For(n, -Infinity, Infinity)),
        Integral(Product(Sinc(Subscript(a,k)*x), For(k, 0, N)), For(x, -Infinity, Infinity))))),
    Variables(N, a),
    Assumptions(And(Element(N, ZZGreaterEqual(0)), Element(Subscript(a, k), OpenInterval(0, Infinity)))),
    References("https://www.carma.newcastle.edu.au/resources/jon/sinc-sums.pdf"))

make_entry(ID("005478"),
    Formula(Implies(
        Cases(
            Tuple(Less(Sum(Subscript(a,k), For(k,0,N)), 2*Pi), Equal(N, 0)),
            Tuple(LessEqual(Sum(Subscript(a,k), For(k,0,N)), 2*Pi), GreaterEqual(N, 1)),
        ),
        Equal(Sum(Product(Sinc(Subscript(a,k)*n), For(k, 0, N)), For(n, 1, Infinity)),
        -Div(1,2) + Integral(Product(Sinc(Subscript(a,k)*x), For(k, 0, N)), For(x, 0, Infinity))))),
    Variables(N, a),
    Assumptions(And(Element(N, ZZGreaterEqual(0)), Element(Subscript(a, k), OpenInterval(0, Infinity)))),
    References("https://www.carma.newcastle.edu.au/resources/jon/sinc-sums.pdf"))

make_entry(ID("4d5410"),
    Formula(Equal(Sum(Sinc(n), For(n, -Infinity, Infinity)), Pi)))

make_entry(ID("1f9beb"),
    Formula(Equal(Sum(Sinc(n)**2, For(n, -Infinity, Infinity)), Pi)))

make_entry(ID("8814ad"),
    Formula(Equal(Sum(Sinc(n)**3, For(n, -Infinity, Infinity)), 3*Pi/4)))

make_entry(ID("49514d"),
    Formula(Equal(Sum(Sinc(n)**4, For(n, -Infinity, Infinity)), 2*Pi/3)))

make_entry(ID("0c847f"),
    Formula(Equal(Sum(Sinc(n)**5, For(n, -Infinity, Infinity)), 115*Pi/192)))

make_entry(ID("b894a3"),
    Formula(Equal(Sum(Sinc(n)**6, For(n, -Infinity, Infinity)), 11*Pi/20)))

make_entry(ID("4a1b00"),
    Formula(Equal(Sum(Sinc(n)**7, For(n, -Infinity, Infinity)),
        (129423*Pi-201684*Pi**2+144060*Pi**3-54880*Pi**4+11760*Pi**5-1344*Pi**6+64*Pi**7)/23040)))

def_Topic(
    Title("Sine"),
    Section("Definitions"),
    Entries(
        "b63dce",
    ),
    Section("Illustrations"),
    Entries(
        "31fef8",
    ),
    Section("Differential equations"),
    Entries(
        "21f156",
        "984d9c",
        "f1691f",
    ),
    Section("Specific values"),
    Entries(
        "c52772",
        "e2161b",
        "69c5ef",
        "56667c",
        "3c833f",
        "5fc688",
        "ad6b74",
        "c62afa",
        "506d0c",
        "09cd0b",
        "713501",
        "056c0e",
        "2f6818",
        "c5bdcc",
        "ad04bd",
        "bfe28b",
        "27766c",
    ),
    Section("Analytic properties"),
    Entries(
        "114913",
        "f4cc9e",
        "6aa0bc",
        "96550d",
        "a45c61",
    ),
    Section("Symmetry and periodicity"),
    Entries(
        "a2a30d",
        "82c83f",
        "6a8889",
        "393b62",
        "1c22f1",
        "9cc0f2",
        "bae475",
        "da58f7",
    ),
    Section("Addition and multiplication formulas"),
    Entries(
        "742943",
        "508e2c",
        "3b839c",
        "755655",
        "1b11be",
        "729215",
        "e3f8a4",
    ),
    Section("Sums and products"),
    Entries(
        "d59bd9",
        "e69cf6",
        "ad6c1c",
        "012eba",
        "f183d0",
        "6c3ba9",
        "adbc1a",
        "b8ab9c",
        "906569",
    ),
    Section("Powers"),
    Entries(
        "4948ea",
        "954066",
        "244127",
        "cf6e35",
        "acf63c",
        "2a6702",
        "54f420",
        "71a264",
        "d0505f",
        "2392f5",
        "f6d0c6",
    ),
    Section("Representations through other functions"),
    Subsection("Elementary functions"),
    Entries(
        "925e5b",
        "3fb3ca",
        "18f40c",
        "299209",
        "cfc5c3",
    ),
    Subsection("Higher transcendental functions"),
    Entries(
        "54daa9",
        "0fbd15",
        "d38a03",
    ),
    Section("Complex parts"),
    Entries(
        "729b70",
        "037a6e",
        "abaf91",
    ),
    Section("Derivatives and integrals"),
    Entries(
        "f7ab32",
        "297b3c",
        "612b21",
        "a6667d",
        "d81355",
        "c93b81",
    ),
    Section("Series expansions"),
    Entries(
        "f340cb",
        "6b13be",
        "11687b",
    ),
    Section("Bounds and inequalities"),
    Subsection("Real arguments"),
    Entries(
        "4039ec",
        "c47a86",
        "22c4f6",
        "d38739",
    ),
    Subsection("Complex arguments"),
    Entries(
        "f77752",
        "dd5787",
        "3dd162",
        "092377",
        "1721bf",
        "941a86",
    ),
    Subsection("Perturbations"),
    Entries(
        "f3a901",
        "03f713",
    ),
)

make_entry(ID("b63dce"),
    SymbolDefinition(Sin, Sin(z), "Sine"),
    Description("The sine function", Sin(z),
        "(denoted by", SourceForm(Sin(z)), "in the Fungrim formula language)",
         "is a function of a single variable.",
        "It can be defined for real and complex arguments by the series",
        EntryReference("f340cb"), "or by the differential equation",
        EntryReference("21f156"), "with appropriate initial values.",
        "The following table lists conditions such that", SourceForm(Sin(z)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(Element(z, RR), Element(Sin(z), ClosedInterval(-1, 1))),
        Tuple(Element(z, CC), Element(Sin(z), CC)),
        TableSection("Formal power series"),
        Tuple(Element(z, PowerSeries(RR, x)), Element(Sin(z), PowerSeries(RR, x))),
        Tuple(Element(z, PowerSeries(CC, x)), Element(Sin(z), PowerSeries(CC, x))),
      )))

make_entry(ID("31fef8"),
    Image(Description("X-ray of", Sin(z), "on", Element(z, ClosedInterval(-5,5) + ClosedInterval(-5,5)*ConstI)),
        ImageSource("xray_sin")),
    description_xray,
    )

C_1 = Subscript(c, 1)

C_2 = Subscript(c, 2)

make_entry(ID("21f156"),
    Formula(Equal(ComplexDerivative(Sin(z), For(z, z, 2)) + Sin(z), 0)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("984d9c"),
    Formula(Where(Equal(ComplexDerivative(y(z), For(z, z, 2)) + y(z), 0), Equal(y(z), C_1 * Sin(z) + C_2 * Cos(z)))),
    Variables(z, C_1, C_2),
    Assumptions(And(Element(z, CC), Element(C_1, CC), Element(C_2, CC))))

make_entry(ID("f1691f"),
    Formula(Where(Equal(ComplexDerivative(y(z), For(z, z, 2)) + a**2 * y(z) + b, 0), Equal(y(z), C_1 * Sin(a*z) + C_2 * Cos(a*z) - b/a**2))),
    Variables(z, a, b, C_1, C_2),
    Assumptions(And(Element(z, CC), Element(a, SetMinus(CC, Set(0))), Element(b, CC), Element(C_1, CC), Element(C_2, CC))))

make_entry(ID("c52772"),
    Formula(Equal(Sin(0), 0)))

make_entry(ID("e2161b"),
    Formula(Equal(Sin(Pi), 0)))

make_entry(ID("69c5ef"),
    Formula(Equal(Sin(Pi/2), 1)))

make_entry(ID("56667c"),
    Formula(Equal(Sin(3*Pi/2), -1)))

make_entry(ID("3c833f"),
    Formula(Equal(Sin(Pi/3), Sqrt(3)/2)))

make_entry(ID("5fc688"),
    Formula(Equal(Sin(Pi/4), Sqrt(2)/2)))

make_entry(ID("ad6b74"),
    Formula(Equal(Sin(Pi/6), Div(1,2))))

make_entry(ID("c62afa"),
    Formula(Equal(Sin(Pi*k), 0)),
    Variables(k),
    Assumptions(Element(k, ZZ)))

make_entry(ID("506d0c"),
    Formula(Equal(Sin(Pi/2 + Pi*k), (-1)**k)),
    Variables(k),
    Assumptions(Element(k, ZZ)))

make_entry(ID("09cd0b"),
    Formula(NotElement(Sin(alpha), AlgebraicNumbers)),
    References("Consequence of the Lindemann-Weierstrass theorem."),
    Variables(alpha),
    Assumptions(Element(alpha, SetMinus(AlgebraicNumbers, Set(0)))))

make_entry(ID("713501"),
    Formula(Element(Sin(Pi * x), AlgebraicNumbers)),
    Variables(x),
    Assumptions(Element(x, QQ)))

make_entry(ID("056c0e"),
    Formula(Implies(And(Element(x, QQ), Element(Sin(Pi*x), QQ)), Element(Sin(Pi*x), Set(0, Div(1,2), -Div(1,2), 1, -1)))),
    References("Niven's theorem"))

make_entry(ID("2f6818"),
    Formula(Equal(Zeros(Brackets(Sin(z)), ForElement(z, CC)), Set(Pi * n, ForElement(n, ZZ)))))

make_entry(ID("c5bdcc"),
    Formula(Equal(ArgMax(Brackets(Sin(x)), ForElement(x, RR)), Set(Pi * (2 * n + Div(1,2)), ForElement(n, ZZ)))))

make_entry(ID("ad04bd"),
    Formula(Equal(ArgMin(Brackets(Sin(x)), ForElement(x, RR)), Set(Pi * (2 * n - Div(1,2)), ForElement(n, ZZ)))))

make_entry(ID("bfe28b"),
    Formula(Equal(Maximum(Brackets(Sin(x)), ForElement(x, RR)), 1)))

make_entry(ID("27766c"),
    Formula(Equal(Minimum(Brackets(Sin(x)), ForElement(x, RR)), -1)))

make_entry(ID("114913"),
    Formula(IsHolomorphic(Sin(z), ForElement(z, CC))))

make_entry(ID("f4cc9e"),
    Formula(Equal(Poles(Sin(z), ForElement(z, Union(CC, Set(UnsignedInfinity)))), Set())))

make_entry(ID("6aa0bc"),
    Formula(Equal(EssentialSingularities(Sin(z), z, Union(CC, Set(UnsignedInfinity))), Set(UnsignedInfinity))))

make_entry(ID("96550d"),
    Formula(Equal(BranchPoints(Sin(z), z, Union(CC, Set(UnsignedInfinity))), Set())))

make_entry(ID("a45c61"),
    Formula(Equal(BranchCuts(Sin(z), z, CC), Set())))

make_entry(ID("a2a30d"),
    Formula(Equal(Sin(-z), -Sin(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("82c83f"),
    Formula(Equal(Sin(Conjugate(z)), Conjugate(Sin(z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("6a8889"),
    Formula(Equal(Sin(z + 2*Pi*k), Sin(z))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZ))))

make_entry(ID("393b62"),
    Formula(Equal(Sin(z + Pi*k), (-1)**k * Sin(z))),
    Variables(z, k),
    Assumptions(And(Element(z, CC), Element(k, ZZ))))

make_entry(ID("1c22f1"),
    Formula(Equal(Sin(Pi + z), -Sin(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("9cc0f2"),
    Formula(Equal(Sin(Pi - z), Sin(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("bae475"),
    Formula(Equal(Sin(Pi/2 + z), Cos(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("da58f7"),
    Formula(Equal(Sin(Pi/2 - z), Cos(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("742943"),
    Formula(Equal(Sin(a+b), Sin(a)*Cos(b) + Cos(a)*Sin(b))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("508e2c"),
    Formula(Equal(Sin(a-b), Sin(a)*Cos(b) - Cos(a)*Sin(b))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("3b839c"),
    Formula(Equal(Sin(a+b*ConstI), Sin(a)*Cosh(b) + ConstI*Cos(a)*Sinh(b))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("755655"),
    Formula(Equal(Sin(ConstI*z), ConstI*Sinh(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("1b11be"),
    Formula(Equal(Sin(2*z), 2*Sin(z)*Cos(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("729215"),
    Formula(Equal(Sin(3*z), 3*Sin(z) - 4*Sin(z)**3)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("e3f8a4"),
    Formula(Equal(Sin(n*z), Sum((-1)**k * Binomial(n, 2*k+1) * Cos(z)**(n-2*k-1) * Sin(z)**(2*k+1), For(k, 0, Floor((n-1)/2))))),
    Variables(n, z),
    Assumptions(And(Element(z, CC), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("d59bd9"),
    Formula(Equal(Sin(a) + Sin(b), 2*Sin((a+b)/2)*Cos((a-b)/2))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("e69cf6"),
    Formula(Equal(Sin(a) - Sin(b), 2*Cos((a+b)/2)*Sin((a-b)/2))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("ad6c1c"),
    Formula(Equal(Sin(a)*Sin(b), (Cos(a-b) - Cos(a+b))/2)),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("012eba"),
    Formula(Equal(Sin(a)*Cos(b), (Sin(a+b) + Sin(a-b))/2)),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("f183d0"),
    Formula(Equal(Sin(z) + Cos(z), Sqrt(2) * Sin(z + Pi / 4))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("6c3ba9"),
    Formula(Equal(Sin(z) - Cos(z), Sqrt(2) * Sin(z - Pi / 4))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("adbc1a"),
    Formula(Equal(Cos(z) + ConstI * Sin(z), Exp(ConstI*z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("4948ea"),
    Formula(Equal(Sin(z)**2 + Cos(z)**2, 1)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("954066"),
    Formula(Equal(Sin(z)**2 - Cos(z)**2, -Cos(2*z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("244127"),
    Formula(Equal(Sin(z)**2, 1 - Cos(z)**2)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("cf6e35"),
    Formula(Equal(Sin(z)**2, (1 - Cos(2*z))/2)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("acf63c"),
    Formula(Equal(Sin(z)**2, Tan(z)**2 / (1 + Tan(z)**2))),
    Variables(z),
    Assumptions(And(Element(z, CC),
        NotElement(z, Set((2*n+1)*Pi/2, ForElement(n, ZZ))))))

make_entry(ID("2a6702"),
    Formula(Equal(Sin(z)**3, (3*Sin(z) - Sin(3*z))/4)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("54f420"),
    Formula(Equal(Sin(z)**(2*n), 1/4**n * Binomial(2*n, n) + 2/4**n * Sum((-1)**(n+k) * Binomial(2*n, k) * Cos(2*(n-k)*z), For(k, 0, n-1)))),
    Variables(z, n),
    Assumptions(And(Element(z, CC), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("71a264"),
    Formula(Equal(Sin(z)**(2*n+1), 1/4**n * Sum((-1)**(n+k) * Binomial(2*n+1, k) * Sin((2*n-2*k+1)*z), For(k, 0, n)))),
    Variables(z, n),
    Assumptions(And(Element(z, CC), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("d0505f"),
    Formula(Equal((Cos(z) + ConstI * Sin(z))**n, Cos(n*z) + ConstI*Sin(n*z))),
    Variables(z, n),
    Assumptions(And(Element(z, CC), Element(n, ZZ))))

make_entry(ID("2392f5"),
    Formula(Equal(Sin(a)**2 - Sin(b)**2, Sin(a+b)*Sin(a-b))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("f6d0c6"),
    Formula(Equal(Sin(a)**2 - Cos(b)**2, -Cos(a+b)*Cos(a-b))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("b8ab9c"),
    Formula(Equal(Sum(Sin(2*a*k+b), For(k, 0, n)), Sin(a*(n+1)) * Sin(a*n+b) / Sin(a))),
    Variables(a, b, n),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(a, CC), Element(b, CC), NotElement(a / Pi, ZZ))))

make_entry(ID("906569"),
    Formula(Equal(Product(Sin(k*Pi/n), For(k, 1, n-1)), n/2**(n-1))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("925e5b"),
    Formula(Equal(Sin(z), Cos(Pi/2-z), Cos(z-Pi/2), -Cos(z+Pi/2))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("3fb3ca"),
    Formula(Equal(Sin(z), (2*Tan(z/2))/(Tan(z/2)**2 + 1))),
    Variables(z),
    Assumptions(And(Element(z, CC), NotElement(z, Set((2*n+1)*Pi, ForElement(n, ZZ)))),
        And(Element(z, PowerSeries(CC, SerX)), NotElement(z, Set((2*n+1)*Pi, ForElement(n, ZZ))))))

make_entry(ID("18f40c"),
    Formula(Equal(Sin(z), (Exp(ConstI*z) - Exp(-ConstI*z)) / (2 * ConstI))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("299209"),
    Formula(Equal(Sin(x), Im(Exp(ConstI*x)))),
    Variables(x),
    Assumptions(Element(x, RR)))

make_entry(ID("cfc5c3"),
    Formula(Equal(Sin(z), -ConstI * Sinh(ConstI * z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("54daa9"),
    Formula(Equal(Sin(z), z * Hypergeometric0F1(Div(3,2), -Div(1,4) * z**2))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("0fbd15"),
    Formula(Equal(Sin(z), Sqrt(Pi * z / 2) * BesselJ(Div(1,2), z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("d38a03"),
    Formula(Equal(Sin(Pi * z), Pi / (Gamma(z) * Gamma(1 - z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("729b70"),
    Formula(Equal(Re(Sin(x+ConstI*y)), Sin(x)*Cosh(y))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("037a6e"),
    Formula(Equal(Im(Sin(x+ConstI*y)), Cos(x)*Sinh(y))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("abaf91"),
    Formula(Equal(Abs(Sin(x+ConstI*y)), Sqrt(Sin(x)**2 + Sinh(y)**2))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("f7ab32"),
    Formula(Equal(ComplexDerivative(Sin(z), For(z, z, 1)), Cos(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("297b3c"),
    Formula(Equal(ComplexDerivative(Sin(z), For(z, z, 2)), -Sin(z))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("612b21"),
    Formula(Equal(ComplexDerivative(Sin(z), For(z, z, r)), Sin(z + Pi*r/2))),
    Variables(z, r),
    Assumptions(And(Element(z, CC), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("a6667d"),
    Formula(Equal(ComplexDerivative(Sin(z), For(z, z, r+2)), -ComplexDerivative(Sin(z), For(z, z, r)))),
    Variables(z, r),
    Assumptions(And(Element(z, CC), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("d81355"),
    Formula(Equal(ComplexDerivative(Sin(z), For(z, z, r+4)), ComplexDerivative(Sin(z), For(z, z, r)))),
    Variables(z, r),
    Assumptions(And(Element(z, CC), Element(r, ZZGreaterEqual(0)))))

make_entry(ID("c93b81"),
    Formula(Equal(Integral(Sin(z), For(z, a, b)), Cos(a) - Cos(b))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC))))

make_entry(ID("f340cb"),
    Formula(Equal(Sin(z), Sum((-1)**k * (z**(2*k+1) / Factorial(2*k+1)), For(k, 0, Infinity)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("6b13be"),
    Formula(Equal(Sin(z + x), Sum(Sin(z + Pi * k / 2) * (x**k / Factorial(k)), For(k, 0, Infinity)))),
    Variables(z, x),
    Assumptions(And(Element(z, CC), Element(x, CC))))

make_entry(ID("11687b"),
    Formula(Equal(Sin(z), z * Product(Parentheses(1 - z**2 / (Pi**2 * k**2)), For(k, 1, Infinity)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("4039ec"),
    Formula(LessEqual(Abs(Sin(x)), 1)),
    Variables(x),
    Assumptions(Element(x, RR)))

make_entry(ID("c47a86"),
    Formula(LessEqual(Abs(Sin(x)), Abs(x))),
    Variables(x),
    Assumptions(Element(x, RR)))

make_entry(ID("22c4f6"),
    Formula(LessEqual(Sin(x), (4*x*(Pi-x))/(Pi**2))),
    Variables(x),
    Assumptions(Element(x, ClosedInterval(0, Pi))))

make_entry(ID("d38739"),
    Formula(GreaterEqual(Sin(x), (x*(Pi-x))/(Pi))),
    Variables(x),
    Assumptions(Element(x, ClosedInterval(0, Pi))))

make_entry(ID("f77752"),
    Formula(LessEqual(Abs(Sin(x+y*ConstI)), Cosh(y))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("dd5787"),
    Formula(LessEqual(Abs(Sin(x+y*ConstI)), Exp(Abs(y)))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("3dd162"),
    Formula(GreaterEqual(Abs(Sin(x+y*ConstI)), Sinh(Abs(y)))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("092377"),
    Formula(GreaterEqual(Abs(Sin(x+y*ConstI)), Abs(y))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("1721bf"),
    Formula(LessEqual(Abs(Sin(z)), Sinh(Abs(z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("941a86"),
    Formula(Less(Abs(Sin(z)), Exp(Abs(z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("f3a901"),
    Formula(LessEqual(Abs(Sin(x + y) - Sin(x)), 2)),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

make_entry(ID("03f713"),
    Formula(LessEqual(Abs(Sin(x + y) - Sin(x)), Abs(y))),
    Variables(x, y),
    Assumptions(And(Element(x, RR), Element(y, RR))))

def_Topic(
    Title("Square roots"),
    Section("Definitions"),
    Entries(
        "21d9b8",
    ),
    Section("Illustrations"),
    Entries(
        "af984e",
    ),
    Section("Elementary functions"),
    Entries(
        "627c9c",
        "97b736",
    ),
    Section("Specific values"),
    Entries(
        "9d5b81",
        "61480c",
        "2eb54a",
        "0ad836",
        "31a8ca",
        "9dec73",
        "f9f31d",
    ),
    Section("Quadratic equations"),
    Entries(
        "08d275",
        "e0ac95",
        "fc2582",
    ),
    Section("Functional equations"),
    Entries(
        "0984ef",
        "d8791e",
        "3cc884",
        "57af50",
        "08bd37",
        "616bcb",
        "73b76c",
        "d0a331",
        "0d8e03",
        "1232f7",
        "99c0b3",
        "d40229",
        "6f63dd",
        "185efc",
    ),
    Section("Complex parts"),
    Entries(
        "ac54c7",
        "22e0be",
        "8c1ee5",
        "4ed6a8",
        "e722ca",
        "c58f46",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "ac54c7",
        "02751f",
        "14cbeb",
        "34136c",
    ),
    Section("Derivatives and integrals"),
    Entries(
        "2a11ab",
        "3e71f4",
        "83abff",
        "6ddbf4",
    ),
    Section("Series expansions"),
    Entries(
        "b14da0",
        "3c2557",
        "6202cb",
        "5ff181",
    ),
)

Log_branch_cut = OpenClosedInterval(-Infinity, 0)

Log_holomorphic_domain = SetMinus(CC, Log_branch_cut)

make_entry(ID("21d9b8"),
    SymbolDefinition(Sqrt, Sqrt(z), "Principal square root"),
    Description("The principal square root", Sqrt(z), "is a function of one complex variable", z, ".",),
    Description("It has a branch point singularity at", Equal(z, 0),
        "and a branch cut on", OpenClosedInterval(-Infinity, 0), "where the value on",
            OpenInterval(-Infinity, 0), "is taken to be continuous with the upper half plane."),
    Description("The following table lists all conditions such that", SourceForm(Sqrt(z)), "is defined in Fungrim."),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(Element(z, ClosedOpenInterval(0,Infinity)), Element(Sqrt(z), ClosedOpenInterval(0,Infinity))),
        Tuple(Element(z, CC), Element(Sqrt(z), CC)),
        TableSection("Infinities"),
        Tuple(Element(z, Set(UnsignedInfinity)), Element(Sqrt(z), Set(UnsignedInfinity))),
        Tuple(Element(z, Set(Exp(ConstI*theta)*Infinity, ForElement(theta, OpenClosedInterval(-Pi,Pi)))),
                Element(Sqrt(z), Set(Exp(ConstI*theta)*Infinity, ForElement(theta, OpenClosedInterval(-Pi/2,Pi/2))))),
        TableSection("Formal power series"),
        Tuple(And(Element(z, PowerSeries(RR, x)), Element(SeriesCoefficient(z, x, 0), OpenInterval(0,Infinity))),
            And(Element(Sqrt(z), PowerSeries(RR, x)))),
        Tuple(And(Element(z, PowerSeries(CC, x)), NotEqual(SeriesCoefficient(z, x, 0), 0)),
            And(Element(Sqrt(z), PowerSeries(CC, x)))),
      )))

make_entry(ID("af984e"),
    Image(Description("X-ray of", Sqrt(z), "on", Element(z, ClosedInterval(-3,3) + ClosedInterval(-3,3)*ConstI)),
        ImageSource("xray_sqrt")),
    description_xray,
    )

make_entry(ID("627c9c"),
    Formula(Equal(Sqrt(z), Exp(Div(1,2)*Log(z)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, Set(0)))))

make_entry(ID("97b736"),
    Formula(Equal(Sqrt(z), z**Div(1,2))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("9d5b81"),
    Description("Table of", Sqrt(n), "to 50 digits for", LessEqual(0, n, 50)),
    Table(
      Var(n),
      TableValueHeadings(n, NearestDecimal(Sqrt(n), 50)),
      TableSplit(1),
      List(
    Tuple(0, Decimal("0")),
    Tuple(1, Decimal("1")),
    Tuple(2, Decimal("1.4142135623730950488016887242096980785696718753769")),
    Tuple(3, Decimal("1.7320508075688772935274463415058723669428052538104")),
    Tuple(4, Decimal("2")),
    Tuple(5, Decimal("2.2360679774997896964091736687312762354406183596115")),
    Tuple(6, Decimal("2.4494897427831780981972840747058913919659474806567")),
    Tuple(7, Decimal("2.6457513110645905905016157536392604257102591830825")),
    Tuple(8, Decimal("2.8284271247461900976033774484193961571393437507539")),
    Tuple(9, Decimal("3")),
    Tuple(10, Decimal("3.1622776601683793319988935444327185337195551393252")),
    Tuple(11, Decimal("3.3166247903553998491149327366706866839270885455894")),
    Tuple(12, Decimal("3.4641016151377545870548926830117447338856105076208")),
    Tuple(13, Decimal("3.6055512754639892931192212674704959462512965738452")),
    Tuple(14, Decimal("3.7416573867739413855837487323165493017560198077787")),
    Tuple(15, Decimal("3.8729833462074168851792653997823996108329217052916")),
    Tuple(16, Decimal("4")),
    Tuple(17, Decimal("4.1231056256176605498214098559740770251471992253736")),
    Tuple(18, Decimal("4.2426406871192851464050661726290942357090156261308")),
    Tuple(19, Decimal("4.3588989435406735522369819838596156591370039252324")),
    Tuple(20, Decimal("4.4721359549995793928183473374625524708812367192231")),
    Tuple(21, Decimal("4.5825756949558400065880471937280084889844565767680")),
    Tuple(22, Decimal("4.6904157598234295545656301135444662805882283534117")),
    Tuple(23, Decimal("4.7958315233127195415974380641626939199967070419041")),
    Tuple(24, Decimal("4.8989794855663561963945681494117827839318949613133")),
    Tuple(25, Decimal("5")),
    Tuple(26, Decimal("5.0990195135927848300282241090227819895637709460996")),
    Tuple(27, Decimal("5.1961524227066318805823390245176171008284157614311")),
    Tuple(28, Decimal("5.2915026221291811810032315072785208514205183661649")),
    Tuple(29, Decimal("5.3851648071345040312507104915403295562951201616448")),
    Tuple(30, Decimal("5.4772255750516611345696978280080213395274469499798")),
    Tuple(31, Decimal("5.5677643628300219221194712989185495204763933775704")),
    Tuple(32, Decimal("5.6568542494923801952067548968387923142786875015078")),
    Tuple(33, Decimal("5.7445626465380286598506114682189293182202644579828")),
    Tuple(34, Decimal("5.8309518948453004708741528775455830765213983348860")),
    Tuple(35, Decimal("5.9160797830996160425673282915616170484155012307943")),
    Tuple(36, Decimal("6")),
    Tuple(37, Decimal("6.0827625302982196889996842452020670620849700947864")),
    Tuple(38, Decimal("6.1644140029689764502501923814542442252356240234446")),
    Tuple(39, Decimal("6.2449979983983982058468931209397944610729599779917")),
    Tuple(40, Decimal("6.3245553203367586639977870888654370674391102786504")),
    Tuple(41, Decimal("6.4031242374328486864882176746218132645204201326210")),
    Tuple(42, Decimal("6.4807406984078602309659674360879966577052043070583")),
    Tuple(43, Decimal("6.5574385243020006523441099976360016279269663198838")),
    Tuple(44, Decimal("6.6332495807107996982298654733413733678541770911787")),
    Tuple(45, Decimal("6.7082039324993690892275210061938287063218550788346")),
    Tuple(46, Decimal("6.7823299831252681390645563266259691051957483239233")),
    Tuple(47, Decimal("6.8556546004010441249358714490848489604606434610013")),
    Tuple(48, Decimal("6.9282032302755091741097853660234894677712210152415")),
    Tuple(49, Decimal("7")),
    Tuple(50, Decimal("7.0710678118654752440084436210484903928483593768847")))))

make_entry(ID("61480c"),
    Formula(Where(Element(x, RealBall(Decimal("0.707106781186547524400844362105"), Decimal("1.51e-31"))),
        Def(x, Same(Sqrt(Div(1,2)), 1/Sqrt(2), Sqrt(2)/2)))))

make_entry(ID("2eb54a"),
    Formula(Equal(Sqrt(-1), ConstI)))

make_entry(ID("0ad836"),
    Formula(Equal(Sqrt(ConstI), (1/Sqrt(2)) * (1+ConstI))))

make_entry(ID("31a8ca"),
    Formula(Equal(Sqrt(UnsignedInfinity), UnsignedInfinity)))

make_entry(ID("9dec73"),
    Formula(Equal(Sqrt(Infinity), Infinity)))

make_entry(ID("f9f31d"),
    Formula(Equal(Sqrt(Exp(ConstI*theta) * Infinity), Exp(ConstI*theta/2) * Infinity)),
    Variables(theta),
    Assumptions(Element(theta, OpenClosedInterval(-Pi, Pi))))

make_entry(ID("08d275"),
    Formula(Equal(Zeros(z**2 - c, ForElement(z, CC)), Set(Sqrt(c), -Sqrt(c)))),
    Variables(c),
    Assumptions(Element(c, CC)))

make_entry(ID("e0ac95"),
    Formula(Equal(Zeros(z**2 - c, ForElement(z, CC)), Set(ConstI*Sqrt(-c), -ConstI*Sqrt(-c)))),
    Variables(c),
    Assumptions(Element(c, CC)))

make_entry(ID("fc2582"),
    Formula(Equal(Zeros(a*z**2+b*z+c, ForElement(z, CC)), Set((-b+Sqrt(b**2-4*a*c))/(2*a), (-b-Sqrt(b**2-4*a*c))/(2*a)))),
    Variables(a, b, c),
    Assumptions(And(Element(a, CC), Element(b, CC), Element(c, CC), NotEqual(a, 0))))

make_entry(ID("0984ef"),
    Formula(Equal(Sqrt(z)**2, z)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("d8791e"),
    Formula(Equal(Sqrt(z**2), z)),
    Variables(z),
    Assumptions(And(Element(z, CC), Element(Arg(z), OpenClosedInterval(-Pi/2, Pi/2)))))

make_entry(ID("3cc884"),
    Formula(Equal(Sqrt(x**2), Abs(x))),
    Variables(x),
    Assumptions(Element(x, RR)))

make_entry(ID("57af50"),
    Formula(Equal(Sqrt(-z), ConstI*Sqrt(z))),
    Variables(z),
    Assumptions(Or(Element(z, ClosedOpenInterval(0, Infinity)), And(Element(z, CC), Less(Im(z), 0)))))

make_entry(ID("08bd37"),
    Formula(Equal(Sqrt(-z), -ConstI*Sqrt(z))),
    Variables(z),
    Assumptions(Or(Element(z, OpenClosedInterval(-Infinity, 0)), And(Element(z, CC), Greater(Im(z), 0)))))

make_entry(ID("616bcb"),
    Formula(Equal(Sqrt(z/2), Sqrt(z)/Sqrt(2))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("73b76c"),
    Formula(Equal(Sqrt(a*b), Sqrt(a)*Sqrt(b))),
    Variables(a, b),
    Assumptions(Or(And(Element(a, CC), Element(b, ClosedOpenInterval(0, Infinity))),
                   And(Element(b, CC), Element(a, ClosedOpenInterval(0, Infinity)))),
        And(Element(a, CC), Element(b, CC), Element(Arg(a) + Arg(b), OpenClosedInterval(-Pi, Pi)))))

make_entry(ID("d0a331"),
    Formula(Equal(Sqrt(1/z), 1/Sqrt(z))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0)))))

make_entry(ID("0d8e03"),
    Formula(Equal(Sqrt(a/b), Sqrt(a)/Sqrt(b))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, OpenInterval(0, Infinity))),
        And(Element(a, ClosedOpenInterval(0, Infinity)), Element(b, SetMinus(CC, OpenClosedInterval(-Infinity, 0)))),
        And(Element(a, CC), Element(b, SetMinus(CC, Set(0))), Element(Arg(a) - Arg(b), OpenClosedInterval(-Pi, Pi)))))

make_entry(ID("1232f7"),
    Formula(Equal(Sqrt(r*Exp(ConstI*theta)), Sqrt(r) * Exp(ConstI*theta/2))),
    Variables(r, theta),
    Assumptions(And(Element(r, ClosedOpenInterval(0, Infinity)), Element(theta, OpenClosedInterval(-Pi, Pi)))))

make_entry(ID("99c0b3"),
    Formula(Equal(Sqrt(z-c*z**2), Sqrt(z)*Sqrt(1-c*z))),
    Variables(z, c),
    Assumptions(And(Element(z, CC), Element(c, ClosedOpenInterval(0, Infinity)))))

make_entry(ID("d40229"),
    Formula(Equal(Sqrt(z/(z+c)), Sqrt(z)/Sqrt(z+c))),
    Variables(z, c),
    Assumptions(And(Element(z, CC), Element(c, ClosedOpenInterval(0, Infinity)), NotEqual(z+c, 0))))

make_entry(ID("6f63dd"),
    Formula(Equal(Sqrt(z/(z-c)), Sqrt(-z)/Sqrt(c-z))),
    Variables(z, c),
    Assumptions(And(Element(z, CC), Element(c, ClosedOpenInterval(0, Infinity)), NotEqual(z-c, 0))))

make_entry(ID("185efc"),
    Formula(Equal(Sqrt(z/(c-z)), Sqrt(z)*Sqrt(1/(c-z)))),
    Variables(z, c),
    Assumptions(And(Element(z, RR), Element(c, ClosedOpenInterval(0, Infinity)), NotEqual(c-z, 0))))

make_entry(ID("ac54c7"),
    Formula(Equal(Abs(Sqrt(z)), Sqrt(Abs(z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("22e0be"),
    Formula(Equal(Arg(Sqrt(z)), Arg(z)/2)),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("8c1ee5"),
    Formula(Equal(Sign(Sqrt(z)), Sqrt(Sign(z)))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("4ed6a8"),
    Formula(Equal(Re(Sqrt(z)), Sqrt((Abs(z)+Re(z))/2))),
    Variables(z),
    Assumptions(Element(z, CC)))

make_entry(ID("e722ca"),
    Formula(Equal(Im(Sqrt(z)), Sign(Im(z)) * Sqrt((Abs(z)-Re(z))/2))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, OpenInterval(-Infinity, 0)))))

make_entry(ID("c58f46"),
    Formula(Equal(Sqrt(Conjugate(z)), Conjugate(Sqrt(z)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, OpenInterval(-Infinity, 0)))))

make_entry(ID("02751f"),
    Formula(LessEqual(Abs(Sqrt(x+a) - Sqrt(x)), Sqrt(x) * (1 - Sqrt(1 - Abs(a)/x)))),
    Variables(x, a),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(a, RR), LessEqual(Abs(a), x))))

make_entry(ID("14cbeb"),
    Formula(LessEqual(Abs(Sqrt(x+a) - Sqrt(x)), (Sqrt(x)/2) * (Abs(a)/x + Abs(a)**2/x**2))),
    Variables(x, a),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(a, RR), LessEqual(Abs(a), x))))

make_entry(ID("34136c"),
    Formula(LessEqual(Abs(1/Sqrt(x+a) - 1/Sqrt(x)), Abs(a) / (2 * (x - Abs(a))**Div(3,2)))),
    Variables(x, a),
    Assumptions(And(Element(x, OpenInterval(0, Infinity)), Element(a, RR), Less(Abs(a), x))))

make_entry(ID("2a11ab"),
    Formula(Equal(ComplexDerivative(Sqrt(z), For(z, z, 1)), 1/(2*Sqrt(z)))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0)))))

make_entry(ID("3e71f4"),
    Formula(Equal(ComplexDerivative(Sqrt(z), For(z, z, 2)), -(1/(4*z**Div(3,2))))),
    Variables(z),
    Assumptions(Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0)))))

make_entry(ID("83abff"),
    Formula(Equal(ComplexDerivative(Sqrt(z), For(z, z, r)), (-1)**r * RisingFactorial(-Div(1,2), r) * z**(r-Div(1,2)))),
    Variables(z, r),
    Assumptions(And(Element(z, SetMinus(CC, OpenClosedInterval(-Infinity, 0))), Element(r, ZZGreaterEqual(0)))))

no_crossing = Or(And(GreaterEqual(Re(a), 0), GreaterEqual(Re(b), 0)),
                 And(GreaterEqual(Im(a), 0), GreaterEqual(Im(b), 0)),
                 And(Less(Im(a), 0), Less(Im(b), 0)))

no_crossing2 = Equal(Intersection(OpenInterval(a, b), OpenInterval(-Infinity, 0)), Set())

make_entry(ID("6ddbf4"),
    Formula(Equal(Integral(Sqrt(z), For(z, a, b)), Div(2,3) * (b**Div(3,2) - a**Div(3,2)))),
    Variables(a, b),
    Assumptions(And(Element(a, CC), Element(b, CC), no_crossing),
                And(Element(a, CC), Element(b, CC), no_crossing2)))

make_entry(ID("b14da0"),
    Formula(Equal(Sqrt(z+x), Sqrt(z) * Sum(((-1)**k * RisingFactorial(-Div(1,2),k)) / (z**k * Factorial(k)) * x**k, For(k, 0, Infinity)))),
    Variables(z, x),
    Assumptions(And(Element(z, SetMinus(CC, Set(0))), Element(x, CC), And(Less(Abs(x), Abs(z)), Or(Greater(Re(z), 0), Equal(Sign(Im(x)), Sign(Im(z)))))),
        And(Element(z, SetMinus(CC, Set(0))), FormalGenerator(x, PowerSeries(CC, x)))))

make_entry(ID("3c2557"),
    Formula(Equal(1/Sqrt(z+x), (1/Sqrt(z)) * Sum(((-1)**k * RisingFactorial(Div(1,2),k)) / (z**k * Factorial(k)) * x**k, For(k, 0, Infinity)))),
    Variables(z, x),
    Assumptions(And(Element(z, SetMinus(CC, Set(0))), Element(x, CC), And(Less(Abs(x), Abs(z)), Or(Greater(Re(z), 0), Equal(Sign(Im(x)), Sign(Im(z)))))),
        And(Element(z, SetMinus(CC, Set(0))), FormalGenerator(x, PowerSeries(CC, x)))))

make_entry(ID("6202cb"),
    Formula(Where(Equal(Subscript(c, n), 1/(n * Subscript(a, 0)) * Sum((3*k/2-n) * Subscript(a, k) * Subscript(c, n-k), For(k, 1, n))),
        Equal(Subscript(c, n), SeriesCoefficient(Sqrt(A), x, n)), Equal(Subscript(a, n), SeriesCoefficient(A, x, n)))),
    Variables(A, n),
    Assumptions(And(Element(A, PowerSeries(CC, x)), NotEqual(SeriesCoefficient(A, x, 0), 0), Element(n, ZZGreaterEqual(1)))))

make_entry(ID("5ff181"),
    Formula(Where(Equal(Subscript(c, n), 1/(n * Subscript(a, 0)) * Sum((k/2-n) * Subscript(a, k) * Subscript(c, n-k), For(k, 1, n))),
        Equal(Subscript(c, n), SeriesCoefficient(1/Sqrt(A), x, n)), Equal(Subscript(a, n), SeriesCoefficient(A, x, n)))),
    Variables(A, n),
    Assumptions(And(Element(A, PowerSeries(CC, x)), NotEqual(SeriesCoefficient(A, x, 0), 0), Element(n, ZZGreaterEqual(1)))))

def_Topic(
    Title("Stirling numbers"),
    Entries(
        "778fa2",
        "2e9d0c",
        "4c6c43",
    ),
    Section("Tables"),
    Entries(
        "f88455",
        "a93679",
        "cecede",
    ),
    Section("Recurrence relations"),
    Entries(
        "f0d72c",
        "18ec99",
        "9fbe4f",
    ),
    Section("Connection formulas"),
    Entries(
        "071a94",
    ),
    Section("Generating functions"),
    Entries(
        "21241f",
        "f46e0e",
        "b823b0",
        "b01280",
        "a9a610",
    ),
    Section("Sum representations"),
    Entries(
        "6189b9",
    ),
    Section("Sums"),
    Entries(
        "ea9e2f",
        "255576",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "7774a3",
    ),
)

make_entry(ID("778fa2"),
    SymbolDefinition(StirlingCycle, StirlingCycle(n, k), "Unsigned Stirling number of the first kind"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(And(Element(n, ZZGreaterEqual(0)), Element(k, ZZGreaterEqual(0))), Element(StirlingCycle(n, k), ZZGreaterEqual(0))),
      )))

make_entry(ID("2e9d0c"),
    SymbolDefinition(StirlingS1, StirlingS1(n, k), "Signed Stirling number of the first kind"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(And(Element(n, ZZGreaterEqual(0)), Element(k, ZZGreaterEqual(0))), Element(StirlingS1(n, k), ZZ)),
      )))

make_entry(ID("4c6c43"),
    SymbolDefinition(StirlingS2, StirlingS2(n, k), "Stirling number of the second kind"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        Tuple(And(Element(n, ZZGreaterEqual(0)), Element(k, ZZGreaterEqual(0))), Element(StirlingS2(n, k), ZZGreaterEqual(0))),
      )))

make_entry(ID("f0d72c"),
    Formula(Equal(StirlingCycle(n+1, k), n*StirlingCycle(n,k) + StirlingCycle(n, k-1))),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(k, ZZGreaterEqual(1)))))

make_entry(ID("18ec99"),
    Formula(Equal(StirlingS1(n+1, k), StirlingS1(n, k-1) - n*StirlingS1(n,k))),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(k, ZZGreaterEqual(1)))))

make_entry(ID("9fbe4f"),
    Formula(Equal(StirlingS2(n+1, k), k * StirlingS2(n, k) + StirlingS2(n,k-1))),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(k, ZZGreaterEqual(1)))))

make_entry(ID("071a94"),
    Formula(Equal(StirlingS1(n, k), (-1)**(n+k) * StirlingCycle(n, k))),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("21241f"),
    Formula(Equal(RisingFactorial(x, n), Sum(StirlingCycle(n, k) * x**k, For(k, 0, n)))),
    Variables(x, n),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(x, CC))))

make_entry(ID("f46e0e"),
    Formula(Equal(RisingFactorial(x-n+1, n), Sum(StirlingS1(n, k) * x**k, For(k, 0, n)))),
    Variables(x, n),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(x, CC))))

make_entry(ID("b823b0"),
    Formula(Equal(x**n, Sum(StirlingS2(n, k) * RisingFactorial(x-n+1, n), For(k, 0, n)))),
    Variables(x, n),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(x, CC))))

make_entry(ID("b01280"),
    Formula(Equal(Div((Log(1+x))**k, Factorial(k)), Sum((-1)**(n-k) * StirlingCycle(n,k) * Div(x**n, Factorial(n)), For(n, k, Infinity)))),
    Variables(x, k),
    Assumptions(And(Element(k, ZZGreaterEqual(0)), Element(x, CC), Less(Abs(x), 1))))

make_entry(ID("a9a610"),
    Formula(Equal(Div((Exp(x)-1)**k, Factorial(k)), Sum(StirlingS2(n,k) * Div(x**n, Factorial(n)), For(n, k, Infinity)))),
    Variables(x, k),
    Assumptions(And(Element(k, ZZGreaterEqual(0)), Element(x, CC))))

make_entry(ID("6189b9"),
    Formula(Equal(StirlingS2(n,k), Div(1,Factorial(k)) * Sum((-1)**i * Binomial(k,i) * (k-i)**n, For(i, 0, k)))),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("ea9e2f"),
    Formula(Equal(Sum(StirlingCycle(n,k), For(k, 0, n)), Factorial(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("255576"),
    Formula(Equal(Sum(StirlingS2(n,k), For(k, 0, n)), BellNumber(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("7774a3"),
    LessEqual(StirlingCycle(n, k), (2**n*Factorial(n))/Factorial(k)),
    Variables(n, k),
    Assumptions(And(Element(n, ZZGreaterEqual(0)), Element(k, ZZGreaterEqual(0)))))

make_entry(ID("f88455"),
    Description("Table of", StirlingCycle(n, k), "for", LessEqual(0, n, 10), "and", LessEqual(0, k, 10)),
    Table(TableRelation(Tuple(n, k, y), Equal(StirlingCycle(n, k), y)),
        TableHeadings(Description(n, "\\", k), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
        TableColumnHeadings(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
        List(
        Tuple(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        Tuple(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        Tuple(0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        Tuple(0, 2, 3, 1, 0, 0, 0, 0, 0, 0, 0),
        Tuple(0, 6, 11, 6, 1, 0, 0, 0, 0, 0, 0),
        Tuple(0, 24, 50, 35, 10, 1, 0, 0, 0, 0, 0),
        Tuple(0, 120, 274, 225, 85, 15, 1, 0, 0, 0, 0),
        Tuple(0, 720, 1764, 1624, 735, 175, 21, 1, 0, 0, 0),
        Tuple(0, 5040, 13068, 13132, 6769, 1960, 322, 28, 1, 0, 0),
        Tuple(0, 40320, 109584, 118124, 67284, 22449, 4536, 546, 36, 1, 0),
        Tuple(0, 362880, 1026576, 1172700, 723680, 269325, 63273, 9450, 870, 45, 1),
    )))

make_entry(ID("a93679"),
    Description("Table of", StirlingS1(n, k), "for", LessEqual(0, n, 10), "and", LessEqual(0, k, 10)),
    Table(TableRelation(Tuple(n, k, y), Equal(StirlingS1(n, k), y)),
        TableHeadings(Description(n, "\\", k), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
        TableColumnHeadings(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
        List(
        Tuple(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        Tuple(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
        Tuple(0, -1, 1, 0, 0, 0, 0, 0, 0, 0, 0),
        Tuple(0, 2, -3, 1, 0, 0, 0, 0, 0, 0, 0),
        Tuple(0, -6, 11, -6, 1, 0, 0, 0, 0, 0, 0),
        Tuple(0, 24, -50, 35, -10, 1, 0, 0, 0, 0, 0),
        Tuple(0, -120, 274, -225, 85, -15, 1, 0, 0, 0, 0),
        Tuple(0, 720, -1764, 1624, -735, 175, -21, 1, 0, 0, 0),
        Tuple(0, -5040, 13068, -13132, 6769, -1960, 322, -28, 1, 0, 0),
        Tuple(0, 40320, -109584, 118124, -67284, 22449, -4536, 546, -36, 1, 0),
        Tuple(0, -362880, 1026576, -1172700, 723680, -269325, 63273, -9450, 870, -45, 1),
    )))

make_entry(ID("cecede"),
    Description("Table of", StirlingS2(n, k), "for", LessEqual(0, n, 10), "and", LessEqual(0, k, 10)),
    Table(TableRelation(Tuple(n, k, y), Equal(StirlingS2(n, k), y)),
        TableHeadings(Description(n, "\\", k), 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
        TableColumnHeadings(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10),
        List(
            Tuple(1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            Tuple(0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0),
            Tuple(0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0),
            Tuple(0, 1, 3, 1, 0, 0, 0, 0, 0, 0, 0),
            Tuple(0, 1, 7, 6, 1, 0, 0, 0, 0, 0, 0),
            Tuple(0, 1, 15, 25, 10, 1, 0, 0, 0, 0, 0),
            Tuple(0, 1, 31, 90, 65, 15, 1, 0, 0, 0, 0),
            Tuple(0, 1, 63, 301, 350, 140, 21, 1, 0, 0, 0),
            Tuple(0, 1, 127, 966, 1701, 1050, 266, 28, 1, 0, 0),
            Tuple(0, 1, 255, 3025, 7770, 6951, 2646, 462, 36, 1, 0),
            Tuple(0, 1, 511, 9330, 34105, 42525, 22827, 5880, 750, 45, 1),
    )))

def_Topic(
    Title("Symbolic expressions"),
    Section("Introduction"),
    Description("Formulas in Fungrim are represented using symbolic expressions that encode mathematical objects and operations in a semantic way. The symbolic expression language is called Grim. The LaTeX output rendered on the Fungrim website is produced automatically from the symbolic Grim expressions."),
    Section("Language documentation"),
    Description("See: <a href=\"http://fungrim.org/grim/\">The Grim formula language</a>"),
    Section("Markup for Fungrim entries"),
    Entries(
        "6db9b2",
        "0d9952",
        "c2fb41",
        "f37520",
        "3c8d31",
        "8af90e",
        "b976df",
    ),
    Section("Variable-generating expressions"),
    Entries(
        "43cc72",
        "978576",
    ),
    Section("Sequence-generating expressions"),
    Entries(
        "82c978",
        "73f5e7",
    ),
    Section("Cosmetic markup"),
    Entries(
        "ecfe08",
        "d14265",
        "ca1edc",
    ),
)

make_entry(ID("6db9b2"),
    SymbolDefinition(Entry, Ellipsis, "Entry"))

make_entry(ID("0d9952"),
    SymbolDefinition(ID, Ellipsis, "Entry ID"))

make_entry(ID("c2fb41"),
    SymbolDefinition(Formula, Ellipsis, "Formula"))

make_entry(ID("f37520"),
    SymbolDefinition(Variables, Ellipsis, "Declaration of variables"))

make_entry(ID("3c8d31"),
    SymbolDefinition(Assumptions, Ellipsis, "Assumptions (domain declaration) for the variables"))

make_entry(ID("8af90e"),
    SymbolDefinition(References, Ellipsis, "References"))

make_entry(ID("b976df"),
    SymbolDefinition(Description, Ellipsis, "Text description"))

make_entry(ID("978576"),
    SymbolDefinition(ForElement, Ellipsis, "Generator for all the elements of a set"),
    Description(
        SourceForm(ForElement(x, S)), "declares the variable", SourceForm(x),
        "just like", SourceForm(For(x)), "and additionally tells the parent operator",
        "that", x, "is to range over the elements of the set", S, ". ",
        "Examples: ",
        SourceForm(Set(2*n, ForElement(n, ZZ))), "becomes",
        Set(2*n, ForElement(n, ZZ)), ". ",
        SourceForm(Sum(1/n**2, ForElement(n, SetMinus(ZZ, Set(0))))), "becomes",
        Sum(1/n**2, ForElement(n, SetMinus(ZZ, Set(0)))), ". "),
)

make_entry(ID("82c978"),
    SymbolDefinition(Repeat, Repeat(x, n), "Repeating sequence"),
    Description("Represents the first arguments repeated the number of times ",
        "specified by the last argument. This expression does not represent ",
        "a mathematical object: it only exists at the expression level, and ",
        "injects the sequence between surrounding arguments. ",
        "To construct a mathematical object, we must pass the generator expression ",
        "to a function such as", SourceForm(Tuple), ". Example: ",
        SourceForm(Formula(Tuple(Repeat(1, N), 0, Repeat(1, 2, 3, M), 1, 2))),
        "renders as ",
        Tuple(Repeat(1, N), 0, Repeat(1, 2, 3, M), 1, 2),
        "."))

make_entry(ID("73f5e7"),
    SymbolDefinition(Step, Step(f(n), For(n, a, b)), "Enumerated sequence"),
    Description(SourceForm(Step(f(n), For(n, a, b))),
        " represents the sequence of values ", f(n), "for ", n, "between ",
        "the integers", a, "and", b, ". ",
        "The sequence is empty if ", Less(b, a), ". ",
        "This expression does not represent ",
        "a mathematical object: it only exists at the expression level, and ",
        "injects the sequence between a surrounding arguments. ",
        "To construct a mathematical object, we must pass the generator expression ",
        "to a function such as", SourceForm(Tuple), ". Examples: "),
    Description(SourceForm(f(Step(k**2, For(k, 1, 10))))),
    Description(f(Step(k**2, For(k, 1, 10)))),
    Description(SourceForm(Tuple(Step(Repeat(n, n), For(n, 0, N))))),
    Description(Tuple(Step(Repeat(n, n), For(n, 0, N)))),
    Description(SourceForm(Tuple(1, 2, 2, Step(Repeat(n, n), For(n, 3, N))))),
    Description(Tuple(1, 2, 2, Step(Repeat(n, n), For(n, 3, N)))))

make_entry(ID("ecfe08"),
    SymbolDefinition(Parentheses, Parentheses(Ellipsis), "Parentheses"),
    Description("Hints that the enclosed expression should be rendered surrounded by parentheses. ",
        "Semantically represents the identity function: ",
        SourceForm(Parentheses(x)), " is equivalent to ", SourceForm(x), "."))

make_entry(ID("d14265"),
    SymbolDefinition(Brackets, Brackets(Ellipsis), "Square brackets"),
    Description("Hints that the enclosed expression should be rendered surrounded by square brackets. ",
        "Semantically represents the identity function: ",
        SourceForm(Brackets(x)), " is equivalent to ", SourceForm(x), "."))

make_entry(ID("ca1edc"),
    SymbolDefinition(Braces, Braces(Ellipsis), "Curly braces"),
    Description("Hints that the enclosed expression should be rendered surrounded by curly braces. ",
        "Semantically represents the identity function: ",
        SourceForm(Braces(x)), " is equivalent to ", SourceForm(x), "."))

def_Topic(
    Title("Totient function"),
    Section("Definitions"),
    Entries(
        "2c46dc",
    ),
    Section("Tables"),
    Entries(
        "6d37c9",
    ),
    Section("Counting"),
    Entries(
        "c19cd6",
    ),
    Section("Factorization"),
    Entries(
        "b9c50f",
        "081abd",
        "cb410e",
        "1d731f",
        "db4763",
        "56d7fe",
        "05e9ae",
        "c0e088",
        "b9c36d",
        "d1ea57",
        "11a56b",
    ),
    Section("Divisibility"),
    Entries(
        "f0639c",
        "eae0de",
        "8f51dd",
    ),
    Subsection("Euler-Fermat theorem"),
    Entries(
        "a68214",
        "36fe36",
    ),
    Section("Sum representations"),
    Entries(
        "3f5711",
        "93a877",
        "efd378",
        "91f156",
        "bb4ce0",
        "a08583",
        "08ff0b",
    ),
    Section("Summation"),
    Entries(
        "cdd7e7",
        "90bb4a",
        "0fdb94",
        "a05466",
        "ea27a7",
    ),
    Section("Generating functions"),
    Entries(
        "1a907e",
        "7f5468",
        "a9a405",
    ),
    Section("Asymptotics"),
    Entries(
        "cd7877",
        "acfc1f",
        "4b5b44",
        "33139b",
        "feb1a0",
        "8d7b3d",
        "9923b7",
    ),
    Section("Bounds and inequalities"),
    Entries(
        "e3005f",
        "485ab6",
        "d0b5a7",
        "b81b45",
        "08fb81",
        "775e10",
        "433a5c",
        "86fcf1",
        "acb28a",
        "0477b3",
    ),
)

make_entry(ID("2c46dc"),
    SymbolDefinition(Totient, Totient(n), "Euler totient function"),
    References("http://oeis.org/A000010"))

make_entry(ID("c19cd6"),
    Formula(Equal(Totient(n), Cardinality(Set(k, ForElement(k, Range(1, n)), Equal(GCD(n,k), 1))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("b9c50f"),
    Formula(Equal(Totient(n), n * PrimeProduct(Parentheses(1-1/p), For(p), Divides(p, n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("081abd"),
    Formula(Equal(Totient(2**n), 2**(n-1))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))))

make_entry(ID("cb410e"),
    Formula(Equal(Totient(p), p - 1)),
    Variables(p),
    Assumptions(Element(p, PP)))

make_entry(ID("1d731f"),
    Formula(Equal(Totient(p**k), p**(k-1) * (p - 1))),
    Variables(p, k),
    Assumptions(And(Element(p, PP), Element(k, ZZGreaterEqual(1)))))

make_entry(ID("db4763"),
    Formula(Implies(Equal(GCD(m,n), 1), Equal(Totient(m*n), Totient(m)*Totient(n)))),
    Variables(m, n),
    Assumptions(And(Element(m, ZZGreaterEqual(0)), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("56d7fe"),
    Formula(Equal(Totient(m*n), (Totient(m) * Totient(n) * GCD(m,n) / Totient(GCD(m,n))))),
    Variables(m, n),
    Assumptions(And(Element(m, ZZGreaterEqual(1)), Element(n, ZZGreaterEqual(1)))))

make_entry(ID("05e9ae"),
    Formula(Equal(Totient(m**n), m**(n-1) * Totient(m))),
    Variables(m, n),
    Assumptions(And(Element(m, ZZGreaterEqual(0)), Element(n, ZZGreaterEqual(1)))))

make_entry(ID("c0e088"),
    Formula(Equal(Totient(2*n), Cases(Tuple(2*Totient(n), Even(n)), Tuple(Totient(n), Odd(n))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("b9c36d"),
    Formula(Equal(Totient(Product(Pow(PrimeNumber(k), Subscript(e, k)), For(k, 1, m))),
        Product(Totient(Pow(PrimeNumber(k), Subscript(e, k))), For(k, 1, m)))),
    Variables(e, m),
    Assumptions(And(Element(Subscript(e, k), ZZGreaterEqual(0)), Element(m, ZZGreaterEqual(0)))))

make_entry(ID("d1ea57"),
    Formula(Equal(Totient(LCM(m,n))*Totient(GCD(m,n)), Totient(m)*Totient(n))),
    Variables(m, n),
    Assumptions(And(Element(m, ZZGreaterEqual(0)), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("11a56b"),
    Formula(Equal(Totient(-n), Totient(n))),
    Variables(n),
    Assumptions(Element(n, ZZ)))

make_entry(ID("f0639c"),
    Formula(Cases(Tuple(Odd(Totient(n)), Element(n, Set(1, 2))), Tuple(Even(Totient(n)), Otherwise))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("eae0de"),
    Formula(Implies(Divides(m, n), Divides(Totient(m), Totient(n)))),
    Variables(m, n),
    Assumptions(And(Element(m, ZZGreaterEqual(0)), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("8f51dd"),
    Formula(Divides(n, Totient(m**n-1))),
    Variables(m, n),
    Assumptions(And(Element(m, ZZGreaterEqual(1)), Element(n, ZZGreaterEqual(1)))))

make_entry(ID("a68214"),
    Formula(CongruentMod(Pow(a,Totient(n)), 1, n)),
    Variables(a, n),
    Assumptions(And(Element(a, ZZ), Element(n, ZZGreaterEqual(1)), Equal(GCD(a,n), 1))))

make_entry(ID("36fe36"),
    Formula(Implies(CongruentMod(x, y, Totient(n)), CongruentMod(a**x, a**y, n))),
    Variables(a, x, y, n),
    Assumptions(And(Element(a, ZZ), Element(n, ZZGreaterEqual(1)), Equal(GCD(a,n), 1), Element(x, ZZGreaterEqual(0)), Element(y, ZZGreaterEqual(0)))))

make_entry(ID("3f5711"),
    Formula(Equal(Totient(n), Sum(GCD(n,k) * Exp(2*Pi*ConstI*k/n), For(k, 1, n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("93a877"),
    Formula(Equal(Totient(n), Sum(GCD(n,k) * Cos(2*Pi*k/n), For(k, 1, n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("efd378"),
    Formula(Equal(Totient(n), DivisorSum(MoebiusMu(d) * (n/d), For(d, n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("91f156"),
    Formula(Equal(Totient(n), Sum(Cases(Tuple(1, Equal(GCD(n,k), 1)), Tuple(0, Otherwise)), For(k, 1, n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("bb4ce0"),
    Formula(Equal(Totient(n), (2/n) * Sum(Cases(Tuple(k, Equal(GCD(n,k), 1)), Tuple(0, Otherwise)), For(k, 1, n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(2))))

make_entry(ID("a08583"),
    Formula(Equal(Totient(n) * DivisorSigma(0,n), Sum(Cases(Tuple(GCD(n,k-1), Equal(GCD(n,k), 1)), Tuple(0, Otherwise)), For(k, 1, n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))),
    Description("Menon's identity"))

make_entry(ID("08ff0b"),
    Formula(Equal(Totient(n), n - DivisorSum(Totient(d), For(d, n), Less(d, n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("cdd7e7"),
    Formula(Equal(DivisorSum(Totient(d), For(d, n)), n)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("90bb4a"),
    Formula(Equal(DivisorSum(Totient(d) * d, For(d, n)), Parentheses((2/n) * Sum(LCM(n, k), For(k, 1, n))) - 1)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("0fdb94"),
    Formula(Equal(DivisorSum(Totient(d) * (n / d), For(d, n)), Sum(GCD(n, k), For(k, 1, n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("a05466"),
    Formula(Equal(DivisorSum(Totient(d) * DivisorSigma(k, n/d), For(d, n)), n*DivisorSigma(k-1,n))),
    Variables(k, n),
    Assumptions(And(Element(k, ZZGreaterEqual(1)), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("ea27a7"),
    Formula(Equal(Sum(Totient(k) * Floor(n/k), For(k, 1, n)), (n*(n+1))/2)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("1a907e"),
    Formula(Equal(Sum(Totient(n) / n**s, For(n, 1, Infinity)), RiemannZeta(s-1) / RiemannZeta(s))),
    Variables(s),
    Assumptions(And(Element(s, CC), Greater(Re(s), 2))))

make_entry(ID("7f5468"),
    Formula(Equal(Sum((Totient(n) * q**n) / (1-q**n), For(n, 1, Infinity)), q/(1-q)**2)),
    Variables(q),
    Assumptions(And(Element(q, CC), Less(Abs(q), 1))))

make_entry(ID("a9a405"),
    Formula(Equal(Sum(Totient(n)/n * Log(1-x**n), For(n, 1, Infinity)), x/(x-1))),
    Variables(x),
    Assumptions(And(Element(x, CC), Less(Abs(x), 1))))

make_entry(ID("cd7877"),
    Formula(Equal(SequenceLimitSuperior(Totient(n) / n, For(n, Infinity)), 1)))

make_entry(ID("acfc1f"),
    Formula(Equal(SequenceLimitInferior((Totient(n) * Log(Log(n))) / n, For(n, Infinity)), Exp(-ConstGamma))))

make_entry(ID("4b5b44"),
    Formula(Equal(SequenceLimit(Totient(n) / n**(1-delta), For(n, Infinity)), Infinity)),
    Variables(delta),
    Assumptions(Element(delta, OpenInterval(0, Infinity))))

make_entry(ID("33139b"),
    Formula(Equal(SequenceLimitInferior(Totient(n+1) / Totient(n), For(n, Infinity)), 0)))

make_entry(ID("feb1a0"),
    Formula(Equal(SequenceLimitSuperior(Totient(n+1) / Totient(n), For(n, Infinity)), Infinity)))

make_entry(ID("8d7b3d"),
    Formula(Equal(SequenceLimit(1/N**2 * Sum(Totient(n), For(n, 1, N)), For(N, Infinity)), 3/Pi**2)))

make_entry(ID("9923b7"),
    Formula(Equal(SequenceLimit(1/Log(N) * Sum(1/Totient(n), For(n, 1, N)), For(N, Infinity)), (RiemannZeta(2)*RiemannZeta(3) / RiemannZeta(6)))))

make_entry(ID("e3005f"),
    Formula(LessEqual(Totient(n), n)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(0))))

make_entry(ID("485ab6"),
    Formula(LessEqual(Totient(n), n - 1)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(2))))

make_entry(ID("d0b5a7"),
    Formula(GreaterEqual(Totient(n), Sqrt(n))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(7))))

make_entry(ID("b81b45"),
    Formula(Implies(NotElement(n, PP), LessEqual(Totient(n), n - Sqrt(n)))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(2))))

make_entry(ID("08fb81"),
    Formula(LessEqual(Totient(m*n), m*Totient(n))),
    Variables(m, n),
    Assumptions(And(Element(m, ZZGreaterEqual(0)), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("775e10"),
    Formula(LessEqual(Totient(m)*Totient(n), Totient(m*n))),
    Variables(m, n),
    Assumptions(And(Element(m, ZZGreaterEqual(0)), Element(n, ZZGreaterEqual(0)))))

make_entry(ID("433a5c"),
    Formula(Greater(Totient(n), n / (Exp(ConstGamma) * Log(Log(n)) + Decimal("2.50637")/Log(Log(n))))),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(3))))

make_entry(ID("86fcf1"),
    Formula(Equal(Cardinality(Set(n, ForElement(n, ZZGreaterEqual(1)), Less(Totient(n), n / (Exp(ConstGamma) * Log(Log(n))))))), Cardinality(ZZ)))

make_entry(ID("acb28a"),
    Formula(Less(Totient(n) * DivisorSigma(1, n), n**2)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(2))),
    References("G. H. Hardy and E. M. Wright (1979), An Introduction to the Theory of Numbers (Fifth ed.), Oxford University Press. Theorem 327."))

make_entry(ID("0477b3"),
    Formula(Greater(Totient(n) * DivisorSigma(1, n), (6/Pi**2) * n**2)),
    Variables(n),
    Assumptions(Element(n, ZZGreaterEqual(1))),
    References("G. H. Hardy and E. M. Wright (1979), An Introduction to the Theory of Numbers (Fifth ed.), Oxford University Press. Theorem 327."))

make_entry(ID("6d37c9"),
    Description("Table of", Totient(n), "for", LessEqual(0, n, 100)),
    Table(
      Var(n),
      TableValueHeadings(n, Totient(n)),
      TableSplit(5),
      List(
    Tuple(0, 0),
    Tuple(1, 1),
    Tuple(2, 1),
    Tuple(3, 2),
    Tuple(4, 2),
    Tuple(5, 4),
    Tuple(6, 2),
    Tuple(7, 6),
    Tuple(8, 4),
    Tuple(9, 6),
    Tuple(10, 4),
    Tuple(11, 10),
    Tuple(12, 4),
    Tuple(13, 12),
    Tuple(14, 6),
    Tuple(15, 8),
    Tuple(16, 8),
    Tuple(17, 16),
    Tuple(18, 6),
    Tuple(19, 18),
    Tuple(20, 8),
    Tuple(21, 12),
    Tuple(22, 10),
    Tuple(23, 22),
    Tuple(24, 8),
    Tuple(25, 20),
    Tuple(26, 12),
    Tuple(27, 18),
    Tuple(28, 12),
    Tuple(29, 28),
    Tuple(30, 8),
    Tuple(31, 30),
    Tuple(32, 16),
    Tuple(33, 20),
    Tuple(34, 16),
    Tuple(35, 24),
    Tuple(36, 12),
    Tuple(37, 36),
    Tuple(38, 18),
    Tuple(39, 24),
    Tuple(40, 16),
    Tuple(41, 40),
    Tuple(42, 12),
    Tuple(43, 42),
    Tuple(44, 20),
    Tuple(45, 24),
    Tuple(46, 22),
    Tuple(47, 46),
    Tuple(48, 16),
    Tuple(49, 42),
    Tuple(50, 20),
    Tuple(51, 32),
    Tuple(52, 24),
    Tuple(53, 52),
    Tuple(54, 18),
    Tuple(55, 40),
    Tuple(56, 24),
    Tuple(57, 36),
    Tuple(58, 28),
    Tuple(59, 58),
    Tuple(60, 16),
    Tuple(61, 60),
    Tuple(62, 30),
    Tuple(63, 36),
    Tuple(64, 32),
    Tuple(65, 48),
    Tuple(66, 20),
    Tuple(67, 66),
    Tuple(68, 32),
    Tuple(69, 44),
    Tuple(70, 24),
    Tuple(71, 70),
    Tuple(72, 24),
    Tuple(73, 72),
    Tuple(74, 36),
    Tuple(75, 40),
    Tuple(76, 36),
    Tuple(77, 60),
    Tuple(78, 24),
    Tuple(79, 78),
    Tuple(80, 32),
    Tuple(81, 54),
    Tuple(82, 40),
    Tuple(83, 82),
    Tuple(84, 24),
    Tuple(85, 64),
    Tuple(86, 42),
    Tuple(87, 56),
    Tuple(88, 40),
    Tuple(89, 88),
    Tuple(90, 24),
    Tuple(91, 72),
    Tuple(92, 44),
    Tuple(93, 60),
    Tuple(94, 46),
    Tuple(95, 72),
    Tuple(96, 32),
    Tuple(97, 96),
    Tuple(98, 42),
    Tuple(99, 60),
    Tuple(100, 40),
    )))

def_Topic(
    Title("Weierstrass elliptic functions"),
    Section("Definitions"),
    Entries(
        "f7a534",
        "69be32",
        "5f3210",
    ),
    Section("Illustrations"),
    Entries(
        "ff0c9f",
        "0c8084",
        "3009a8",
    ),
    Section("Complex lattices"),
    Entries(
        "3c1659",
        "d530b1",
    ),
    Section("Series and product representations"),
    Entries(
        "58d67b",
        "b10ca7",
        "7c4457",
        "9bf0ad",         "3e84e3",     ),
    Section("Derivatives"),
    Entries(
        "e677fb",
        "0e649f",
    ),
    Section("Theta function representations"),
    Entries(
        "af0dfc",
        "0207dc",
        "b96c9d",
    ),
    Section("Inverse functions"),
    Entries(
        "124339",       ),
    Section("Symmetries"),
    Entries(
        "12a9e8",
        "72eb69",
        "23beb5",
    ),
    Section("Periodicity"),
    Entries(
        "a95b7e",
        "ffcc0f",
        "a0c85d",
        "35403b",
        "de9f42",
    ),
    Section("Analytic properties"),
    Entries(
        "ae2c5d",
        "6021ba",
        "1da705",
        "c6234b",
        "69eb9b",
        "151e42",
        "881aee",
    ),
)

make_entry(ID("f7a534"),
    SymbolDefinition(WeierstrassP, WeierstrassP(z,tau), "Weierstrass elliptic function"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(And(Element(z, SetMinus(CC, Lattice(1, tau))), Element(tau, HH)), Element(WeierstrassP(z,tau), CC)),
        Tuple(And(Element(z, Lattice(1, tau)), Element(tau, HH)), Element(WeierstrassP(z,tau), Set(UnsignedInfinity))),
      )),
    )

make_entry(ID("69be32"),
    SymbolDefinition(WeierstrassZeta, WeierstrassZeta(z,tau), "Weierstrass zeta function"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(And(Element(z, SetMinus(CC, Lattice(1, tau))), Element(tau, HH)), Element(WeierstrassZeta(z,tau), CC)),
        Tuple(And(Element(z, Lattice(1, tau)), Element(tau, HH)), Element(WeierstrassZeta(z,tau), Set(UnsignedInfinity))),
      )),
    )

make_entry(ID("5f3210"),
    SymbolDefinition(WeierstrassSigma, WeierstrassSigma(z,tau), "Weierstrass sigma function"),
    Table(TableRelation(Tuple(P, Q), Implies(P, Q)),
      TableHeadings(Description("Domain"), Description("Codomain")),
      List(
        TableSection("Numbers"),
        Tuple(And(Element(z, CC), Element(tau, HH)), Element(WeierstrassSigma(z,tau), CC)),
      )),
    )

intv = ClosedInterval(Decimal("-1.5"),Decimal("1.5"))

make_entry(ID("ff0c9f"),
    Image(Description("X-ray of", WeierstrassP(z,ConstI), "on", Element(intv + intv*ConstI), "with lattice cell highlighted"),
        ImageSource("xray_elliptic_p")),
    description_xray,
    )

make_entry(ID("0c8084"),
    Image(Description("X-ray of", WeierstrassP(z,Exp(Pi*ConstI/3)), "on", Element(z, intv + intv*ConstI), "with lattice cell highlighted"),
        ImageSource("xray_elliptic_p_2")),
    description_xray,
    )

make_entry(ID("3009a8"),
    Image(Description("X-ray of", WeierstrassP(z,Decimal("-0.8")+Decimal("0.7")*ConstI), "on", Element(z, intv + intv*ConstI), "with lattice cell highlighted"),
        ImageSource("xray_elliptic_p_3")),
    description_xray,
    )

make_entry(ID("3c1659"),
    SymbolDefinition(Lattice, Lattice(a,b), "Complex lattice with periods a, b"))

make_entry(ID("d530b1"),
    Formula(Equal(Lattice(a,b), Set(a*m+b*n, For(Tuple(m, n)), And(Element(m,ZZ), Element(n,ZZ))))),
    Variables(a,b),
    Assumptions(And(Element(a, SetMinus(CC, Set(0))), Element(b, SetMinus(CC, Set(0))), Greater(Im(b/a), 0))))

_mn_cond = ForElement(Tuple(m, n), SetMinus(Pow(ZZ, 2), Set(Tuple(0, 0))))

make_entry(ID("58d67b"),
    Formula(Equal(WeierstrassP(z,tau), 1/z**2 + Sum(1/(z+m+n*tau)**2-1/(m+n*tau)**2, _mn_cond))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), NotElement(z, Lattice(1, tau)))))

make_entry(ID("b10ca7"),
    Formula(Equal(WeierstrassZeta(z,tau),
        1/z + Sum(1/(z-m-n*tau)+1/(m+n*tau)+z/(m+n*tau)**2, _mn_cond))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), NotElement(z, Lattice(1, tau)))))

make_entry(ID("7c4457"),
    Formula(Equal(WeierstrassSigma(z,tau),
        z * Product((1-z/(m+n*tau)) * Exp(z/(m+n*tau) + z**2/(2*(m+n*tau)**2)), _mn_cond))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), NotElement(z, Lattice(1, tau)))))

make_entry(ID("e677fb"),
    Formula(Equal(ComplexDerivative(WeierstrassZeta(z,tau), For(z, z, 1)), -WeierstrassP(z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), NotElement(z, Lattice(1, tau)))))

make_entry(ID("0e649f"),
    Formula(Equal(ComplexDerivative(WeierstrassSigma(z,tau), For(z, z, 1)), WeierstrassZeta(z,tau) * WeierstrassSigma(z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), NotElement(z, Lattice(1, tau)))))

make_entry(ID("af0dfc"),
    Formula(Equal(WeierstrassP(z,tau),
        (Pi * JacobiTheta(2,0,tau) * JacobiTheta(3,0,tau) * Div(JacobiTheta(4,z,tau), JacobiTheta(1,z,tau)))**2
            - Pi**2/3 * (JacobiTheta(2,0,tau)**4 + JacobiTheta(3,0,tau)**4))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), NotElement(z, Lattice(1, tau)))))

make_entry(ID("0207dc"),
    Formula(Equal(WeierstrassZeta(z,tau),
        -Div(z,3) * Div(JacobiTheta(1,0,tau,3), JacobiTheta(1,0,tau,1))
            + Div(JacobiTheta(1,z,tau,1), JacobiTheta(1,z,tau)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), NotElement(z, Lattice(1, tau)))))

make_entry(ID("b96c9d"),
    Formula(Equal(WeierstrassSigma(z,tau),
        Exp(-Div(z**2,6) * Div(JacobiTheta(1,0,tau,3), JacobiTheta(1,0,tau,1)))
            * (JacobiTheta(1,z,tau) / JacobiTheta(1,0,tau,1)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("12a9e8"),
    Formula(Equal(WeierstrassP(-z,tau), WeierstrassP(z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), NotElement(z, Lattice(1, tau)))))

make_entry(ID("72eb69"),
    Formula(Equal(WeierstrassZeta(-z,tau), -WeierstrassZeta(z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), NotElement(z, Lattice(1, tau)))))

make_entry(ID("23beb5"),
    Formula(Equal(WeierstrassSigma(-z,tau), -WeierstrassSigma(z,tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("a95b7e"),
    Formula(Equal(WeierstrassP(z+m+n*tau,tau), WeierstrassP(z,tau))),
    Variables(z, tau, m, n),
    Assumptions(And(Element(z, CC), Element(tau, HH), NotElement(z, Lattice(1, tau)), Element(m, ZZ), Element(n, ZZ))))

make_entry(ID("ffcc0f"),
    Formula(Equal(WeierstrassZeta(z+1,tau), WeierstrassZeta(z,tau) + WeierstrassZeta(Div(1,2),tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), NotElement(z, Lattice(1, tau)))))

make_entry(ID("a0c85d"),
    Formula(Equal(WeierstrassZeta(z+tau,tau), WeierstrassZeta(z,tau) + WeierstrassZeta(Div(tau,2),tau))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH), NotElement(z, Lattice(1, tau)))))

make_entry(ID("35403b"),
    Formula(Equal(WeierstrassSigma(z+1,tau), -(Exp(2*(z+Div(1,2))*WeierstrassZeta(Div(1,2),tau)) * WeierstrassSigma(z,tau)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("de9f42"),
    Formula(Equal(WeierstrassSigma(z+tau,tau), -(Exp(2*(z+Div(tau,2))*WeierstrassZeta(Div(tau,2),tau)) * WeierstrassSigma(z,tau)))),
    Variables(z, tau),
    Assumptions(And(Element(z, CC), Element(tau, HH))))

make_entry(ID("ae2c5d"),
    Formula(Equal(Poles(WeierstrassP(z,tau), ForElement(z, CC)), Lattice(1, tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("6021ba"),
    Formula(Equal(Poles(WeierstrassZeta(z,tau), ForElement(z, CC)), Lattice(1, tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("1da705"),
    Formula(Equal(Zeros(WeierstrassSigma(z,tau), ForElement(z, CC)), Lattice(1, tau))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("c6234b"),
    Formula(Equal(Zeros(WeierstrassP(z,ConstI), ForElement(z, CC)), Set(Parentheses(m+Div(1,2))+(n+Div(1,2))*ConstI, For(Tuple(m, n)), And(Element(m, ZZ), Element(n, ZZ))))))

make_entry(ID("69eb9b"),
    Formula(IsHolomorphic(WeierstrassP(z,tau), ForElement(z, SetMinus(CC, Lattice(1, tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("151e42"),
    Formula(IsHolomorphic(WeierstrassZeta(z,tau), ForElement(z, SetMinus(CC, Lattice(1, tau))))),
    Variables(tau),
    Assumptions(Element(tau, HH)))

make_entry(ID("881aee"),
    Formula(IsHolomorphic(WeierstrassSigma(z,tau), ForElement(z, CC))),
    Variables(tau),
    Assumptions(Element(tau, HH)))
